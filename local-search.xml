<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GitHub+Hexo博客网站搭建（三）</title>
    <link href="/blog/2023/05/26/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/blog/2023/05/26/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Hexo博客网站搭建（三）"><a href="#GitHub-Hexo博客网站搭建（三）" class="headerlink" title="GitHub+Hexo博客网站搭建（三）"></a>GitHub+Hexo博客网站搭建（三）</h1><p>不想将wangaaayu.github.io作为博客的地址，想多加一级，用wangaaayu.github.io/blog访问博客</p><h2 id="创建新博客仓库"><a href="#创建新博客仓库" class="headerlink" title="创建新博客仓库"></a>创建新博客仓库</h2><p>新建仓库，名字取为blog，顺便把添加README.md选项点上</p><p>在README.md中随便写点东西</p><p>在设置中的Pages选项中，将Branch由None改为main，文件夹默认为/(root)即可</p><p>稍等一段时间，就可以访问wangaaayu.github.io/blog，看到README.md中的内容</p><p><img src="/blog/2023/05/26/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%89%EF%BC%89/%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E8%AE%BE%E7%BD%AE.png"></p><h2 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h2><p>之前博客都备份在了io.dev私有仓库中，现在将该私有仓库重命名为blog.dev</p><p>clone该blog.dev仓库到本地，或者用命令【git remote set-url origin 新地址】修改之前本地仓库的git远程仓库地址，同时将本地仓库改名</p><p>修改本地仓库根目录下的_config.yml和_config.主题.yml（如果有的话）文件</p><ol><li><p>修改url。url修改为访问地址，即在原来的后面加上/blog</p></li><li><p>在url下添加root。root值为/blog/（官方建议<a href="https://hexo.io/docs/configuration">Configuration | Hexo</a>）</p></li><li><p>修改deploy:repo。deploy:repo修改为新的blog远程仓库的地址（注意分支branch也要正确）</p></li></ol><p><img src="/blog/2023/05/26/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%89%EF%BC%89/hexo%E4%BA%8C%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%AE%BE%E7%BD%AE.png"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># ...</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://WangAaayu.github.io/blog</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/blog/</span><br><span class="hljs-comment"># ...</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span>  <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span>  <span class="hljs-string">git@github.com:WangAaayu/blog.git</span><br>  <span class="hljs-attr">branch:</span>  <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>最后执行命令hexo g以及hexo d，发布博客</p><p>稍等一段时间，访问新的博客网站就可以看到发布的博客</p><h2 id="图片无法加载"><a href="#图片无法加载" class="headerlink" title="图片无法加载"></a>图片无法加载</h2><p>新的博客网站图片都加载不出来，原因是图片的请求路径不对</p><p>之前提到用这个命令下载插件能解决图片不显示的问题</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CodeFalling/</span>hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>现在图片加载不出来，说明这个插件也解决不了</p><p>试着重新下载hexo-asset-image插件，用github上点赞更多的</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm uninstall hexo-asset-<span class="hljs-built_in">image</span><br>npm install hexo-asset-<span class="hljs-built_in">image</span> --<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure><p>重新运行发现路径还是不对，原因是插件不适配</p><p>修改插件的index.js文件（node_modules\hexo-asset-image\index.js）</p><ol><li><p>将beginPos的位置改为link中的第4个“/”之后</p></li><li><p>将endPos的位置都改为link中的最后一个“/”</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">var</span> link = data.<span class="hljs-property">permalink</span>;<br><span class="hljs-comment">// 改为第4个“/”的位置，因为现在的网址多了blog/</span><br><span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">4</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> appendLink = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="hljs-comment">// if not with index.html endpos = link.lastIndexOf(&#x27;.&#x27;) + 1 support hexo-abbrlink</span><br><span class="hljs-keyword">if</span>(<span class="hljs-regexp">/.*\/index\.html$/</span>.<span class="hljs-title function_">test</span>(link)) &#123;<br>  <span class="hljs-comment">// when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html</span><br>  <span class="hljs-comment">// image in xxtitle/ will go to xxtitle/index/</span><br>  appendLink = <span class="hljs-string">&#x27;index/&#x27;</span>;<br>  <span class="hljs-comment">// var endPos = link.lastIndexOf(&#x27;/&#x27;);</span><br>&#125;<br><span class="hljs-comment">// else &#123;</span><br><span class="hljs-comment">//   var endPos = link.lastIndexOf(&#x27;.&#x27;);</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// 删除上面的endPos语句，无论是否有index.html，路径都是以“/”结尾</span><br><span class="hljs-comment">// 添加下面的endPos语句，endPos是最后一个“/”的位置</span><br><span class="hljs-keyword">var</span> endPos = link.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>link = link.<span class="hljs-title function_">substring</span>(beginPos, endPos) + <span class="hljs-string">&#x27;/&#x27;</span> + appendLink;<br><br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p><img src="/blog/2023/05/26/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%89%EF%BC%89/%E6%8F%92%E4%BB%B6%E4%BF%AE%E6%94%B9.png"></p><p>最后用hexo命令清除并重新生成博客网站</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo cl</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>稍等一段时间，访问新的博客网站就可以看到图片可以正常显示</p>]]></content>
    
    
    <categories>
      
      <category>GitHub个人网站搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue测试后端api接口简易模板</title>
    <link href="/blog/2023/05/25/vue%E6%B5%8B%E8%AF%95%E5%90%8E%E7%AB%AFapi%E6%8E%A5%E5%8F%A3%E7%AE%80%E6%98%93%E6%A8%A1%E6%9D%BF/"/>
    <url>/blog/2023/05/25/vue%E6%B5%8B%E8%AF%95%E5%90%8E%E7%AB%AFapi%E6%8E%A5%E5%8F%A3%E7%AE%80%E6%98%93%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="vue测试后端api接口简易模板"><a href="#vue测试后端api接口简易模板" class="headerlink" title="vue测试后端api接口简易模板"></a>vue测试后端api接口简易模板</h1><p>大多数vue项目都把页面放在src/views/目录下，并且有src/router/index.js做路由。本项目是<strong>vue2</strong>版本，主要用于后端开发过程中测试api，只用到api模块。项目结构如图：</p><p><img src="/blog/2023/05/25/vue%E6%B5%8B%E8%AF%95%E5%90%8E%E7%AB%AFapi%E6%8E%A5%E5%8F%A3%E7%AE%80%E6%98%93%E6%A8%A1%E6%9D%BF/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></p><h2 id="src-main-js"><a href="#src-main-js" class="headerlink" title="src/main.js"></a>src/main.js</h2><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs v"><span class="hljs-keyword">import</span> Vue from &#x27;vue&#x27;<br><span class="hljs-keyword">import</span> App from &#x27;./App<span class="hljs-variable">.vue</span>&#x27;<br><br>Vue<span class="hljs-variable">.config</span><span class="hljs-variable">.productionTip</span> = false<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  render: h =&gt; h(App),<br>&#125;).$mount(&#x27;#app&#x27;)<br></code></pre></td></tr></table></figure><h2 id="src-App-vue"><a href="#src-App-vue" class="headerlink" title="src/App.vue"></a>src/App.vue</h2><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs v">&lt;template&gt;<br>  &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;img alt=<span class="hljs-string">&quot;Vue logo&quot;</span> src=<span class="hljs-string">&quot;./assets/logo.png&quot;</span>&gt;<br>    &lt;HelloWorld msg=<span class="hljs-string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">import</span> HelloWorld from &#x27;./components/HelloWorld<span class="hljs-variable">.vue</span>&#x27;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: &#x27;App&#x27;,<br>  components: &#123;<br>    HelloWorld<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: Avenir, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  text-align: center;<br>  color: #<span class="hljs-number">2</span>c3e50;<br>  margin-top: <span class="hljs-number">60</span>px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="src-api-index-js"><a href="#src-api-index-js" class="headerlink" title="src/api/index.js"></a>src/api/index.js</h2><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs v"><span class="hljs-keyword">import</span> Vue from &#x27;vue&#x27;<br><span class="hljs-keyword">import</span> Axios from &#x27;axios&#x27;<br><br><span class="hljs-keyword">const</span> axiosInstance = Axios<span class="hljs-variable">.create</span>(&#123;<br>    withCredentials: true<br>&#125;)<br><br><span class="hljs-comment">// 通过拦截器处理csrf问题，这里的正则和匹配下标可能需要根据实际情况小改动</span><br>axiosInstance<span class="hljs-variable">.interceptors</span><span class="hljs-variable">.request</span><span class="hljs-variable">.use</span>((<span class="hljs-keyword">config</span>) =&gt; &#123;<br>    <span class="hljs-keyword">config</span><span class="hljs-variable">.headers</span>[&#x27;X-Requested-With&#x27;] = &#x27;XMLHttpRequest&#x27;<br>    <span class="hljs-keyword">const</span> regex = /.*csrftoken=([^;.]*).*$/<br>    <span class="hljs-keyword">config</span><span class="hljs-variable">.headers</span>[&#x27;X-CSRFToken&#x27;] = document<span class="hljs-variable">.cookie</span><span class="hljs-variable">.match</span>(regex) === <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : document<span class="hljs-variable">.cookie</span><span class="hljs-variable">.match</span>(regex)[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">config</span><br>&#125;)<br><br>axiosInstance<span class="hljs-variable">.interceptors</span><span class="hljs-variable">.response</span><span class="hljs-variable">.use</span>(<br>    response =&gt; &#123;<br>        <span class="hljs-keyword">return</span> response<br>    &#125;,<br>    error =&gt; &#123;<br>        <span class="hljs-keyword">return</span> Promise<span class="hljs-variable">.reject</span>(error)<br>    &#125;<br>)<br><br>Vue<span class="hljs-variable">.prototype</span><span class="hljs-variable">.axios</span> = axiosInstance<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> axiosInstance<br></code></pre></td></tr></table></figure><h2 id="src-api-api-js"><a href="#src-api-api-js" class="headerlink" title="src/api/api.js"></a>src/api/api.js</h2><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs v"><span class="hljs-keyword">import</span> axiosInstance from &#x27;./index&#x27;<br><br><span class="hljs-keyword">const</span> axios = axiosInstance<br><span class="hljs-keyword">const</span> ip = &#x27;http:<span class="hljs-comment">//localhost:8000/app/&#x27;  // api请求地址的统一字段</span><br><br><span class="hljs-comment">// GET请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getRequest = () =&gt; &#123;<span class="hljs-keyword">return</span> axios<span class="hljs-variable">.get</span>(ip + &#x27;后端url&#x27;)&#125;<br><br><span class="hljs-comment">// POST请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> postRequest = data =&gt; &#123;<span class="hljs-keyword">return</span> axios<span class="hljs-variable">.get</span>(ip + &#x27;后端url&#x27;, data)&#125;<br></code></pre></td></tr></table></figure><h2 id="src-components-HelloWorld-vue"><a href="#src-components-HelloWorld-vue" class="headerlink" title="src/components/HelloWorld.vue"></a>src/components/HelloWorld.vue</h2><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs v">&lt;template&gt;<br>  &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">import</span> &#123;<br>  getRequest, postRequest<br>&#125; from &#x27;../api/api<span class="hljs-variable">.js</span>&#x27;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-number">&#x27;He</span>lloWorld&#x27;,<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: &#x27;Welcome to Your Vue<span class="hljs-variable">.js</span> App&#x27;,<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    testGetRequest() &#123;<br>      getRequest()<span class="hljs-variable">.then</span>(response =&gt; &#123;<br>        console<span class="hljs-variable">.log</span>(response<span class="hljs-variable">.data</span>)<br>      &#125;)<span class="hljs-variable">.catch</span>((error) =&gt; &#123;<br>        alert(error<span class="hljs-variable">.response</span><span class="hljs-variable">.data</span>)<br>      &#125;)<br>    &#125;,<br>    testPostRequest() &#123;<br>      postRequest(&#123;<br>        <span class="hljs-comment">// 以字典形式构造POST请求的参数</span><br>        &#x27;key&#x27;: value,<br>        &#x27;key&#x27;: &#x27;value&#x27;,<br>      &#125;)<span class="hljs-variable">.then</span>(response =&gt; &#123;<br>        console<span class="hljs-variable">.log</span>(response<span class="hljs-variable">.data</span>)<br>      &#125;)<span class="hljs-variable">.catch</span>((error) =&gt; &#123;<br>        alert(error<span class="hljs-variable">.response</span><span class="hljs-variable">.data</span>)<br>      &#125;)<br>    &#125;,<br>  &#125;,<br>  created: <span class="hljs-keyword">function</span> () &#123;<br>    <span class="hljs-keyword">this</span><span class="hljs-variable">.testGetRequest</span>()<br>    <span class="hljs-keyword">this</span><span class="hljs-variable">.testPostRequest</span>()<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue+django部署ubuntu服务器</title>
    <link href="/blog/2023/05/18/vue+django%E9%83%A8%E7%BD%B2ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/blog/2023/05/18/vue+django%E9%83%A8%E7%BD%B2ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-django部署ubuntu服务器"><a href="#vue-django部署ubuntu服务器" class="headerlink" title="vue+django部署ubuntu服务器"></a>vue+django部署ubuntu服务器</h1><p>首先用MobaXterm（或其他软件）连接上ubuntu服务器</p><p>ubuntu服务器上需安装：</p><ul><li><p>mysql</p></li><li><p>python3（django+uwsgi）</p></li><li><p>nginx</p></li></ul><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="/blog/2023/05/18/vue+django%E9%83%A8%E7%BD%B2ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9E%B6%E6%9E%84.jpg"></p><h2 id="查看端口与进程"><a href="#查看端口与进程" class="headerlink" title="查看端口与进程"></a>查看端口与进程</h2><p>查看mysql的3306、django项目的8000等要用的端口有没有被占用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># -a查看已连接的服务端口，-ap查看所有的服务端口</span><br><span class="hljs-attribute">netstat</span> -ap | grep <span class="hljs-number">8000</span><br><span class="hljs-comment"># 关闭使用端口的程序</span><br><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> pid号<br></code></pre></td></tr></table></figure><p>查看mysql、nginx等进程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 输出格式为：拥有者 PID PPID CPU 系统启动时间 登入者的终端机位置 使用掉的CPU时间 下达的命令</span><br><span class="hljs-comment"># 该命令最少有一个结果，即该命令本身</span><br><span class="hljs-attribute">ps</span> -ef | grep mysql<br><span class="hljs-comment"># 关闭进程</span><br><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> pid号<br></code></pre></td></tr></table></figure><h2 id="mysql安装配置"><a href="#mysql安装配置" class="headerlink" title="mysql安装配置"></a>mysql安装配置</h2><p>mysql8.0，设置root密码、授予root所有权限、并使root能够远程连接</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 安装mysql（可只安装server）</span><br>sudo apt-<span class="hljs-built_in">get</span> install mysql-server<br>sudo apt-<span class="hljs-built_in">get</span> install mysql-client<br><span class="hljs-comment"># 查看mysql服务状态</span><br>systemctl status mysql.service<br><span class="hljs-comment"># mysql基本安全配置</span><br><span class="hljs-comment"># 配置的内容为：增加密码组件；设置root密码策略和密码；是否禁用匿名用户；是否不允许root远程登录；是否移除test数据库；是否重新加载权限表</span><br>sudo mysql_secure_installation<br><span class="hljs-comment"># 进入mysql</span><br>mysql -u root -p<br><span class="hljs-comment"># 设置密码策略</span><br><span class="hljs-built_in">set</span> global validate_password.<span class="hljs-attribute">policy</span>=LOW;<br><span class="hljs-comment"># 设置密码长度</span><br><span class="hljs-built_in">set</span> global validate_password.<span class="hljs-attribute">length</span>=6;<br><span class="hljs-comment"># 修改root密码</span><br>alter<span class="hljs-built_in"> user </span><span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified with mysql_native_password by <span class="hljs-string">&#x27;password&#x27;</span>;<br><span class="hljs-comment"># 进入mysql数据库</span><br>use mysql;<br><span class="hljs-comment"># 更改root的host</span><br>update<span class="hljs-built_in"> user </span><span class="hljs-built_in">set</span> <span class="hljs-attribute">host</span>=<span class="hljs-string">&#x27;%&#x27;</span> where <span class="hljs-attribute">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-comment"># 授予所有地址root所有数据库权限</span><br>grant all privileges on *.* <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> with grant option;<br><span class="hljs-comment"># 刷新权限，使之生效</span><br>flush privileges;<br><span class="hljs-comment"># 退出mysql</span><br>exit<br><span class="hljs-comment"># 修改mysqld.cnf配置文件中的bind-address</span><br>sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf<br>bind-address = 127.0.0.1,服务器ip地址<br><span class="hljs-comment"># 重启mysql</span><br>sudo systemctl restart mysql.service<br><span class="hljs-comment"># 查看3306端口的地址</span><br>ss -anplt | grep 3306<br><span class="hljs-comment"># 验证是否能够远程连接</span><br>mysql -u root -p -h ipv4地址<br></code></pre></td></tr></table></figure><p><img src="/blog/2023/05/18/vue+django%E9%83%A8%E7%BD%B2ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/mysql%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png"></p><h2 id="python3虚拟环境"><a href="#python3虚拟环境" class="headerlink" title="python3虚拟环境"></a>python3虚拟环境</h2><p>创建虚拟环境来运行项目，方便python环境管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装virtualenv包</span><br>pip install virtualenv<br><span class="hljs-comment"># 创建虚拟环境</span><br>virtualenv 环境名称<br><span class="hljs-comment"># 指定python版本创建虚拟环境</span><br>virtualenv 环境名称 --python=python3.8<br><span class="hljs-comment"># 激活虚拟环境</span><br><span class="hljs-built_in">source</span> 虚拟环境目录/bin/activate<br><span class="hljs-comment"># 退出虚拟环境</span><br>deactivate<br><span class="hljs-comment"># 删除环境删除文件夹即可</span><br><span class="hljs-built_in">rm</span> -rf 环境名称<br></code></pre></td></tr></table></figure><p>也可以使用virtualenvwrapper统一配置和管理虚拟环境</p><h2 id="上传本地项目"><a href="#上传本地项目" class="headerlink" title="上传本地项目"></a>上传本地项目</h2><p>vue中的后端api请求的请求ip地址改为服务器ip地址，端口应为后面nginx监听的端口</p><p>首先将vue打包放到django项目中，然后上传django项目；或者vue项目也上传</p><p>可以使用git上传项目或直接将项目打包文件传输至服务器</p><p>vue环境安装</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 安装nodejs</span><br>sudo apt-get install nodejs<br><span class="hljs-comment"># 查看nodejs和npm版本</span><br>node -v<br><span class="hljs-built_in">npm</span> -v<br><span class="hljs-comment"># 安装vue2脚手架</span><br>sudo <span class="hljs-built_in">npm</span> install -g vue-cli<br><span class="hljs-comment"># 安装vue3脚手架</span><br>sudo <span class="hljs-built_in">npm</span> install -g @vue/cli<br><span class="hljs-comment"># 查看vue版本</span><br>vue -V<br></code></pre></td></tr></table></figure><p>上传成功后在虚拟环境中安装django依赖包</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 本地django项目生成依赖包<br>pip <span class="hljs-keyword">freeze</span> &gt; requirements.txt<br># 在服务器安装依赖包<br>pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>服务器上安装报错的话可以根据生成的requirements.txt手动安装</p><p>其中，下载mysqlclient的方法为</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt-get <span class="hljs-keyword">install</span> libmysqlclient-dev<br>pip <span class="hljs-keyword">install</span> mysqlclient<br></code></pre></td></tr></table></figure><p>进入mysql创建django的数据库</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">mysql -u root -p<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> example;<br></code></pre></td></tr></table></figure><p>最后运行一下django项目，看能不能成功</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver<br></code></pre></td></tr></table></figure><p>若出现问题，可参考部署windows一文</p><h2 id="uwsgi安装配置"><a href="#uwsgi安装配置" class="headerlink" title="uwsgi安装配置"></a>uwsgi安装配置</h2><p>安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 在虚拟环境下</span><br>pip <span class="hljs-keyword">install</span> uwsgi<br></code></pre></td></tr></table></figure><p>配置uwsgi，新建uwsgi.ini文件并配置（路径不能用~符号，只能用根目录/开始写绝对路径），其中uwsgi.log需手动创建</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[uwsgi]</span><br><span class="hljs-comment"># 开启主进程</span><br><span class="hljs-attr">master</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># 最大进程数量</span><br><span class="hljs-attr">processes</span> = <span class="hljs-number">8</span><br><span class="hljs-comment"># 启用线程</span><br><span class="hljs-attr">enable-threads</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># 每个进程下的线程数</span><br><span class="hljs-attr">threads</span> = <span class="hljs-number">4</span><br><span class="hljs-comment"># django项目路径</span><br><span class="hljs-attr">chdir</span> = django项目路径<br><span class="hljs-comment"># wsgi.py文件的位置</span><br><span class="hljs-attr">wsgi-file</span> = django项目wsgi.py文件路径<br><span class="hljs-comment"># 该端口为后端django的运行端口，与nginx的配置一致</span><br><span class="hljs-attr">socket</span> = 服务器ip:<span class="hljs-number">8001</span><br><span class="hljs-attr">chmod-socket</span> = <span class="hljs-number">660</span><br><span class="hljs-comment"># 当服务器退出的时候自动删除unix socket文件和pid文件</span><br><span class="hljs-attr">vacuum</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment">#uwsgi的运行状态</span><br><span class="hljs-attr">status</span> = django项目路径/uwsgi.status<br><span class="hljs-comment"># uwsgid的进程id</span><br><span class="hljs-attr">pidfile</span> = django项目路径/uwsgi.pid<br><span class="hljs-comment"># 输出日志</span><br><span class="hljs-attr">logto</span> = django项目路径/uwsgi.log<br><span class="hljs-comment"># 虚拟环境路径</span><br><span class="hljs-attr">virtualenv</span> = 虚拟环境路径<br></code></pre></td></tr></table></figure><p>运行uwsgi，启动django项目</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">uwsgi <span class="hljs-comment">--ini uwsgi.ini</span><br></code></pre></td></tr></table></figure><p><img src="/blog/2023/05/18/vue+django%E9%83%A8%E7%BD%B2ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/uwsgi%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F.png"></p><p>uwsgi常用命令</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 运行</span><br>uwsgi <span class="hljs-comment">--ini uwsgi.ini</span><br><span class="hljs-comment"># 停止</span><br>uwsgi <span class="hljs-comment">--stop uwsgi.pid</span><br><span class="hljs-comment"># 重启</span><br>uwsgi <span class="hljs-comment">--reload uwsgi.pid</span><br></code></pre></td></tr></table></figure><h2 id="uwsgi后台运行"><a href="#uwsgi后台运行" class="headerlink" title="uwsgi后台运行"></a>uwsgi后台运行</h2><p>用systemd将uwsgi设置为系统服务，开启uwsgi服务使其在后台一直运行</p><p>在虚拟环境中查看虚拟环境的uwsgi命令路径</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">whereis uwsgi</span><br></code></pre></td></tr></table></figure><p>在/etc/systemd/system下创建uwsgi.service文件（路径应为绝对路径）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=singing evaluation music web uwsgi<br><span class="hljs-attr">After</span>=network.target<br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span>=虚拟环境的uwsgi命令路径 --ini uwsgi.ini路径<br><span class="hljs-attr">ExecStop</span>=虚拟环境的uwsgi命令路径 --stop uwsgi.pid路径<br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>开启uwsgi服务</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> uwsgi.service<br></code></pre></td></tr></table></figure><p>uwsgi服务的常用命令</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 开机自启动</span><br><span class="hljs-params">system</span>ctl enable uwsgi.service<br><span class="hljs-comment"># 启动</span><br><span class="hljs-params">system</span>ctl start uwsgi.service<br><span class="hljs-comment"># 停止</span><br><span class="hljs-params">system</span>ctl stop uwsgi.service<br><span class="hljs-comment"># 重启</span><br><span class="hljs-params">system</span>ctl restart uwsgi.service<br><span class="hljs-comment"># 查看状态</span><br><span class="hljs-params">system</span>ctl status uwsgi.service<br></code></pre></td></tr></table></figure><h2 id="nginx安装配置"><a href="#nginx安装配置" class="headerlink" title="nginx安装配置"></a>nginx安装配置</h2><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install nginx<br></code></pre></td></tr></table></figure><p>配置项目的nginx服务器块</p><p>在/etc/nginx/sites-available目录下新建配置文件example并配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>     <span class="hljs-attribute">listen</span>       <span class="hljs-number">8000</span>;  <span class="hljs-comment"># 项目访问端口</span><br>     <span class="hljs-attribute">server_name</span>  服务器ip;<br>     <span class="hljs-comment"># root         ;</span><br>     <span class="hljs-comment">#charset koi8-r;</span><br><br>     <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>     <span class="hljs-comment"># location / &#123;</span><br>     <span class="hljs-comment">#     root ;</span><br>     <span class="hljs-comment">#     index /templates/index.html;</span><br>     <span class="hljs-comment"># &#125;</span><br><br>     <span class="hljs-section">location</span> /app &#123;  <span class="hljs-comment"># 前端api请求</span><br>         <span class="hljs-attribute">uwsgi_pass</span> 服务器ip:<span class="hljs-number">8001</span>;  <span class="hljs-comment"># django运行端口，也即uwsgi配置中的socket端口，无需http://</span><br>         <span class="hljs-attribute">include</span> /etc/nginx/uwsgi_params;<br>     &#125;<br><br>     <span class="hljs-section">location</span> /static &#123;<br>         <span class="hljs-attribute">root</span> django项目的static目录路径;  <span class="hljs-comment"># 末尾加/</span><br>     &#125;<br><br>     <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>     <span class="hljs-section">location</span> = /50x.html &#123;<br>         <span class="hljs-attribute">root</span>   html;<br>     &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在sites-enabled目录建立该配置的链接，使nginx启动时读取该配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo ln -s <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-available/</span>example.com <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-enabled/</span><br></code></pre></td></tr></table></figure><p>重新启动nginx</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service nginx restart</span><br></code></pre></td></tr></table></figure><p>登录刚配置的网址看是否有nginx的欢迎界面</p><p><img src="/blog/2023/05/18/vue+django%E9%83%A8%E7%BD%B2ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F.png"></p><p>nginx常用命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 开机自启动</span><br>systemctl <span class="hljs-built_in">enable</span> nginx<br><span class="hljs-comment"># 启动</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>nginx start<br>systemctl start nginx<br><span class="hljs-comment"># 停止</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>nginx stop<br>systemctl stop nginx<br><span class="hljs-comment"># 重启</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>nginx restart<br>systemctl restart nginx<br><span class="hljs-comment"># 查看状态</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>nginx status<br>systemctl status nginx<br><span class="hljs-comment"># 重新加载</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>nginx reload<br>systemctl reload nginx<br>sudo nginx -s reload<br><span class="hljs-comment"># 若修改了/etc/nginx/nginx.conf文件，先测试配置是否正确</span><br>sudo nginx -t<br></code></pre></td></tr></table></figure><p>nginx日志文件位置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 请求日志</span><br><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>access.log<br><span class="hljs-comment"># 错误日志</span><br><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>error.log <br></code></pre></td></tr></table></figure><h2 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h2><p>运行nginx和uwsgi，访问服务器ip地址，端口为nginx的监听端口</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/zewanhuang/p/16595492.html">服务器部署 Vue 和 Django 项目的全记录 - ZewanHuang - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/shelter1234567/article/details/128065959">ubuntu安装Mysql数据库及安全配置_sudo mysql_secure_installation_昵称还在想呢的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/zhang1f/p/15771853.html">Ubuntu 中安装和配置 Nginx - Tozhang - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows下nginx代理django项目</title>
    <link href="/blog/2023/05/13/windows%E4%B8%8Bnginx%E4%BB%A3%E7%90%86django%E9%A1%B9%E7%9B%AE/"/>
    <url>/blog/2023/05/13/windows%E4%B8%8Bnginx%E4%BB%A3%E7%90%86django%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="windows下nginx代理django项目"><a href="#windows下nginx代理django项目" class="headerlink" title="windows下nginx代理django项目"></a>windows下nginx代理django项目</h1><p>django部署到本机网络上后，出现了音频无法快进，进度条无法拖动的问题。原因是前端请求音频文件不是通过后端的api，而是直接用require方法，这样做后端的响应没有包含 Content-Range 或者 Accept-Ranges Header。解决方法有两种：</p><ol><li><p>让django响应静态文件请求时有响应头（即前端通过api请求静态文件，该方法要修改前端，还要在后端单独写方法处理请求）。</p></li><li><p>用nginx服务器处理静态文件。</p></li></ol><p>考虑将来部署到linux服务器上也需要用nginx，以及实现的难度，我采用第二种方法，即在windows下用nginx处理django项目的静态文件请求。</p><p>值得一提的是，大多数django项目部署都需要用到uwsgi和nginx，然而在windows环境下，uwsgi无法下载（或者说使用的代价太大），因此windows下还是简单部署为好，实际项目使用还是需要在linux下。</p><h2 id="nginx目的"><a href="#nginx目的" class="headerlink" title="nginx目的"></a>nginx目的</h2><p>我们使用nginx的目的是帮助django处理静态文件，nginx起到代理的作用。因此，我们要做的是：</p><ol><li><p>对于静态文件请求，nginx直接处理，无需交与django</p></li><li><p>对于后端api接口请求，nginx交与django处理</p></li></ol><p><strong>重点：nginx监听的端口和django部署的端口不能是同一个端口</strong></p><p>两个程序不能监听同一个端口，这样做会出现有的静态文件通过nginx而有的则通过django的问题。</p><p>因此，我们访问项目也不再是django项目部署的端口，而是nginx监听的端口，前端同样是向nginx监听的端口发送api接口请求。</p><h2 id="nginx下载"><a href="#nginx下载" class="headerlink" title="nginx下载"></a>nginx下载</h2><p><a href="https://nginx.org/en/download.html">nginx: download</a>官网下载stable version的windows版本并解压。</p><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>在解压后的conf文件夹中，修改nginx.conf文件，主要修改http中的server：</p><ol><li><p>listen端口号改为浏览器访问项目的端口号；</p></li><li><p>server_name改为django项目部署的ipv4地址；</p></li><li><p>添加location /app（注册的app名称）将前端发送的api请求转发给后端；</p></li><li><p>添加location /static/处理前端的静态文件请求。</p></li></ol><p><strong>注意：路径一定要正确，用 “/” 而不是 “\” 。</strong></p><p>有关location的root、alias、路径末尾是否加 “/” 的问题，参考<a href="https://mp.weixin.qq.com/s/d9Kh-7CQhMIhEpcaZ3Em_A">Nginx之location详解</a></p><p>前端的api请求应转发给后端，因为nginx是不允许静态资源请求使用POST方法的，若通过nginx处理POST请求会报错，解决方法较复杂。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">8000</span>;  <span class="hljs-comment"># nginx监听端口号，即实际访问项目的端口号</span><br>    <span class="hljs-attribute">server_name</span>  x.x.x.x;  <span class="hljs-comment"># django项目部署的ipv4地址</span><br>    <span class="hljs-comment">#charset koi8-r;</span><br><br>    <span class="hljs-comment"># location / &#123;</span><br>    <span class="hljs-comment">#     root django项目根目录（manage.py所在目录）在电脑上的绝对路径（末尾需加/）;</span><br>    <span class="hljs-comment">#     index /templates/index.html;</span><br>    <span class="hljs-comment"># &#125;</span><br><br>    <span class="hljs-section">location</span> /app &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://x.x.x.x:8001;  <span class="hljs-comment"># django项目部署的ipv4地址与端口号（前面需加上http://）</span><br>    &#125;<br><br>    <span class="hljs-section">location</span> /static/ &#123;<br>        <span class="hljs-attribute">root</span> django项目根目录（manage.py所在目录）在电脑上的绝对路径（末尾需加/）;<br>    &#125;<br><br>    <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>    <span class="hljs-section">location</span> = /50x.html &#123;<br>        <span class="hljs-attribute">root</span>   html;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h2><p>nginx常用的命令如下。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 在nginx根目录下cmd</span><br><span class="hljs-comment"># 启动</span><br>start nginx<br><span class="hljs-comment"># 检查配置文件</span><br>nginx.exe -t<br><span class="hljs-comment"># 安全停止</span><br>nginx.exe -s <span class="hljs-keyword">quit</span><br><span class="hljs-comment"># 立即停止，可能不保存相关信息</span><br>nginx.exe -s stop<br><span class="hljs-comment"># 指定配置文件启动（？）</span><br>nginx.exe -c <span class="hljs-string">./conf/nginx.conf</span><br><span class="hljs-comment"># 启动后，重新加载配置</span><br>nginx.exe -s <span class="hljs-keyword">reload</span><br></code></pre></td></tr></table></figure><p><em>指定配置文件启动命令似乎不行，使用后cmd卡死。</em></p><p><em>当nginx启动失败或报错后，需要手动在任务管理器关闭进程，此时使用命令并不能真正关闭进程。</em></p><h2 id="启动nginx运行django"><a href="#启动nginx运行django" class="headerlink" title="启动nginx运行django"></a>启动nginx运行django</h2><p>先启动nginx，启动成功后，运行django。</p><p>访问项目时浏览器地址输入的端口号为nginx监听的端口号。</p><p>在浏览器开发者工具的网络里可以查看前端发送的请求，其中server为nginx。</p><p><img src="/blog/2023/05/13/windows%E4%B8%8Bnginx%E4%BB%A3%E7%90%86django%E9%A1%B9%E7%9B%AE/%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82.png"></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue+django简单部署本地windows</title>
    <link href="/blog/2023/05/09/vue+django%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0windows/"/>
    <url>/blog/2023/05/09/vue+django%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0windows/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-django简单部署本地windows"><a href="#vue-django简单部署本地windows" class="headerlink" title="vue+django简单部署本地windows"></a>vue+django简单部署本地windows</h1><ol><li><p>前端配置跨域、api请求的ip地址和打包的静态资源位置</p></li><li><p>后端配置跨域、templates和static路径和路由</p></li><li><p>将vue打包放入django中，在本机ip地址上运行django即可</p></li></ol><p>该方法仅在本地windows所在的内网中可以访问</p><p>不使用uwsgi和nginx</p><h2 id="vue-axios跨域携带cookie"><a href="#vue-axios跨域携带cookie" class="headerlink" title="vue axios跨域携带cookie"></a>vue axios跨域携带cookie</h2><p>在axios的请求实例创建时配置</p><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs v"><span class="hljs-keyword">const</span> axiosInstance = Axios<span class="hljs-variable">.create</span>(&#123;<br>    withCredentials: true<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="vue-axios请求ip配置"><a href="#vue-axios请求ip配置" class="headerlink" title="vue axios请求ip配置"></a>vue axios请求ip配置</h2><p>vue axios发送后端api请求的ip地址要换成本机的实际ip地址</p><p>即将127.0.0.1:xxxx换成ipv4:xxxx</p><h2 id="vue配置打包的静态资源位置"><a href="#vue配置打包的静态资源位置" class="headerlink" title="vue配置打包的静态资源位置"></a>vue配置打包的静态资源位置</h2><p>vue.config.js增加assetsDir，使vue打包的静态文件都放在static文件夹中（不增加也行，只要将vue打包出来的所有文件夹（静态资源）都放入django项目的static文件夹中即可）</p><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs v"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = require(&#x27;@vue/cli-service&#x27;)<br><span class="hljs-keyword">module</span><span class="hljs-variable">.exports</span> = defineConfig(&#123;<br>  assetsDir: <span class="hljs-string">&quot;static&quot;</span>,  <span class="hljs-comment">// 添加</span><br>  transpileDependencies: true,<br>  lintOnSave: false<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="vue打包放入django"><a href="#vue打包放入django" class="headerlink" title="vue打包放入django"></a>vue打包放入django</h2><p>打包前先运行一下看有没有报错</p><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs v">npm run build<br></code></pre></td></tr></table></figure><p>将打包后的dist文件夹里的</p><p>static里的所有文件放到django项目里的static文件夹下（static和manage.py同级）</p><p>index.html文件放到django项目里的templates文件夹下（templates和manage.py同级）</p><h2 id="django跨域配置"><a href="#django跨域配置" class="headerlink" title="django跨域配置"></a>django跨域配置</h2><p>settings.py增加corsheaders</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;corsheaders&#x27;</span>,  <span class="hljs-comment"># 增加</span><br>    <span class="hljs-string">&#x27;app&#x27;</span><br>]<br><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,  <span class="hljs-comment"># 增加</span><br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br><br><span class="hljs-comment"># 在最后增加两行，根据实际情况配置</span><br>CORS_ORIGIN_ALLOW_ALL = <span class="hljs-literal">True</span><br>CORS_ALLOW_CREDENTIALS = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h2 id="django-templates和static路径配置"><a href="#django-templates和static路径配置" class="headerlink" title="django templates和static路径配置"></a>django templates和static路径配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">TEMPLATES = [<br>    &#123;<br>        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [BASE_DIR / <span class="hljs-string">&#x27;templates&#x27;</span>],  <span class="hljs-comment"># templates路径</span><br>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>        &#125;,<br>    &#125;,<br>]<br><span class="hljs-comment"># static路径</span><br>STATIC_URL = <span class="hljs-string">&#x27;static/&#x27;</span><br>STATICFILES_DIRS=[os.path.join(BASE_DIR,<span class="hljs-string">&#x27;static&#x27;</span>)]<br></code></pre></td></tr></table></figure><h2 id="django路由配置"><a href="#django路由配置" class="headerlink" title="django路由配置"></a>django路由配置</h2><p>使django能够找到vue的index.html，显示出页面</p><p>views.py添加Index类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, req</span>):<br>        <span class="hljs-keyword">return</span> render(req, <span class="hljs-string">&#x27;index.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>urls.py（与views.py同级）添加re_path</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> re_path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    // ...<br>    re_path(<span class="hljs-string">&#x27;&#x27;</span>, views.Index.as_view())  <span class="hljs-comment"># 空表示匹配全部路由，需放在最后</span><br>]<br></code></pre></td></tr></table></figure><h2 id="运行django项目"><a href="#运行django项目" class="headerlink" title="运行django项目"></a>运行django项目</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver 本机ipv4地址:端口号<br></code></pre></td></tr></table></figure><p>访问项目浏览器输入本机的ip地址与端口号再加上注册的app名字，如ipv4:8000/app</p><p>若上面命令行的ip地址是0.0.0.0，则在本机上所有的ipv4地址的对应端口都能访问该项目</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.likecs.com/show-308274532.html">vue+django开发配置(vue转发请求、跨域携带cookie) - 爱码网 (likecs.com)</a></p><p><a href="https://www.likecs.com/show-308446244.html">windows下简单部署django+vue项目(打包后) - 爱码网 (likecs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dijkstra算法及networkx与animation动画演示</title>
    <link href="/blog/2023/05/04/Dijkstra%E7%AE%97%E6%B3%95%E5%8F%8Anetworkx%E4%B8%8Eanimation%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA/"/>
    <url>/blog/2023/05/04/Dijkstra%E7%AE%97%E6%B3%95%E5%8F%8Anetworkx%E4%B8%8Eanimation%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Dijkstra算法及networkx与animation动画演示"><a href="#Dijkstra算法及networkx与animation动画演示" class="headerlink" title="Dijkstra算法及networkx与animation动画演示"></a>Dijkstra算法及networkx与animation动画演示</h1><p>用动图来演示Dijkstra算法的过程和结果，使用了python的networkx画图，animation做动画，效果如下。</p><p>图：</p><p><img src="/blog/2023/05/04/Dijkstra%E7%AE%97%E6%B3%95%E5%8F%8Anetworkx%E4%B8%8Eanimation%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA/graph.png"></p><p>Dijkstra算法过程：</p><p><img src="/blog/2023/05/04/Dijkstra%E7%AE%97%E6%B3%95%E5%8F%8Anetworkx%E4%B8%8Eanimation%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA/process.gif"></p><p>Dijkstra算法结果：</p><p><img src="/blog/2023/05/04/Dijkstra%E7%AE%97%E6%B3%95%E5%8F%8Anetworkx%E4%B8%8Eanimation%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA/path.gif"></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>音频处理笔记</title>
    <link href="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/"/>
    <url>/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="音频处理"><a href="#音频处理" class="headerlink" title="音频处理"></a>音频处理</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><h3 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h3><p>声音由空气压力的变化而产生。声音信号通常由不同频率的信号组合而成。</p><p>为了能够将声音输入模型中，我们需要将声波数字化，即将信号转换为一系列的数字。这是通过以固定时间间隔测量声音的振幅来完成的，即采样。采样率是每秒采样出的样本数，常见的采样率约为每秒44100个样本。</p><p><img src="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/%E4%BF%A1%E5%8F%B7%E9%87%87%E6%A0%B7.png"></p><h3 id="音频数据处理方式"><a href="#音频数据处理方式" class="headerlink" title="音频数据处理方式"></a>音频数据处理方式</h3><p>过去的音频机器学习应用程序依赖于传统的数字信号处理技术来提取特征。例如，用语音学概念分析音频信号以提取音素等元素。所有这些方法都大量特定领域的专业知识。</p><p>随着深度学习的发展，处理音频的方式不再使用传统的音频处理技术，无需通过大量手动操作和自定义来生成特征，而是采用由音频生成频谱图的技术。</p><h3 id="频谱Spectrum"><a href="#频谱Spectrum" class="headerlink" title="频谱Spectrum"></a>频谱Spectrum</h3><p>频谱是组合产生信号的一组频率。频谱绘制了信号中存在的所有频率以及每个频率的强度或幅度。信号中最低的频率称为基频。基频的整数倍频率称为谐波。</p><p><img src="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/Spectrum.gif"></p><p>通常我们看的波形是信号的时域表示，表示振幅随时间的变化。频谱是信号的频域表示，表示再某个时刻，振幅与频率的关系。</p><p><img src="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/%E6%97%B6%E5%9F%9F%E5%92%8C%E9%A2%91%E5%9F%9F.png"></p><h3 id="频谱图spectrogram"><a href="#频谱图spectrogram" class="headerlink" title="频谱图spectrogram"></a>频谱图spectrogram</h3><p>声音信号的组成频率是随时间变化的，因此频谱随时间而变化。</p><p>频谱图是音频信号的等效紧凑表示，就像信号的“指纹”，它将音频数据的基本特征捕获为图像。</p><p>频谱图绘制了时间与频谱的关系，x轴为时间，y轴为频率。</p><p>频谱图使用不同的颜色来表示频率的幅度或强度。颜色月亮，信号的能量就越高。频谱图每个垂直的“切片”本质上是信号在该时刻的频谱，并表示信号强度如何分布在该时刻信号中的每个频率中。</p><p>频谱图是使用傅立叶变化将信号分解为其组成频率而生成的。首先将声音信号分为一系列持续时间很短的信号片段；然后对每个段应用傅立叶变换获取该段的组成频率，并显示信号中存在的每个频率的幅度；最后将所有这些片段的傅立叶变换组合成一个图即为频谱图。</p><h3 id="人耳"><a href="#人耳" class="headerlink" title="人耳"></a>人耳</h3><p>我们通常所说的“音高”，其实为声音的频率。音调高的声音具有比音调低的声音更高的频率。人类不会线性感知频率，与高频相比，人类对低频之间的差异更敏感。</p><p>我们通常所说的“响度”，其实为声音的振幅。人们对振幅的感知同样也不是线性的。</p><p>事实上，人耳对频率和响度的感知都是对数的。</p><p>为了以真实的方式处理声音，在处理数据中的频率和振幅时，需要使用对数标度，即梅尔标度（频率）和分贝标度（振幅）。这正是Mel Spectrogram的目的。</p><p><img src="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/Mel.gif"></p><p><img src="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/Decibel_scale.jpg"></p><h2 id="2-处理"><a href="#2-处理" class="headerlink" title="2 处理"></a>2 处理</h2><h3 id="音频信号的内存表示"><a href="#音频信号的内存表示" class="headerlink" title="音频信号的内存表示"></a>音频信号的内存表示</h3><p>在内存中，音频表示为数字的时间序列，表示每个时间步长的振幅。例如，如果采样率为 44100，则一秒的音频剪辑将有 44100 个数字。由于测量是在固定的时间间隔进行的，因此数据仅包含振幅数字而不包含时间值。给定采样率，我们可以计算出每次振幅数测量是在什么时刻进行的。</p><p>位深度（bit-depth）告诉我们每个样本的幅度测量值可以取多少个可能的值。例如，位深度为 16 表示振幅数可以介于 0 和 65535 (2 16 - 1) 之间。位深度影响音频测量的分辨率——位深度越高，音频保真度越好。</p><p><img src="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/SSampling.png"></p><h3 id="waveform"><a href="#waveform" class="headerlink" title="waveform"></a>waveform</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> librosa.display<br><span class="hljs-keyword">import</span> sklearn<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pl<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npt<br><br>AUDIO_FILE = <span class="hljs-string">&#x27;./audio/周杰伦 - 晴天.mp3&#x27;</span><br><br>samples, sample_rate = librosa.load(AUDIO_FILE, sr=<span class="hljs-literal">None</span>)<br>librosa.display.waveshow(samples, sr=sample_rate)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/waveform.png"></p><h3 id="spectrogram"><a href="#spectrogram" class="headerlink" title="spectrogram"></a>spectrogram</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 短时傅里叶变换，返回一个复数矩阵D(F，T)</span><br>sgram = librosa.stft(samples)<br>librosa.display.specshow(sgram)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/spectrogram.png"></p><p>显然，在该频谱图上看不到太多信息。发生这种情况的原因是人耳感知声音的方式是对数的，人类能够听到的大部分声音都集中在一个狭窄的频率和振幅范围内。</p><h3 id="Mel-Spectrogram"><a href="#Mel-Spectrogram" class="headerlink" title="Mel Spectrogram"></a>Mel Spectrogram</h3><p>相对于常规的频谱图，梅尔频谱图有两个重要的变化：</p><ul><li><p>y轴使用梅尔刻度而不是频率</p></li><li><p>使用Decibel Scale而不是Amplitude来指示颜色</p></li></ul><p>深度学习通常使用梅尔频谱图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将复数矩阵D(F, T)分离为幅值𝑆和相位𝑃的函数，返回幅值S，相位P</span><br>sgram_mag, _ = librosa.magphase(sgram)<br><span class="hljs-comment"># 计算梅尔频谱</span><br>mel_scale_sgram = librosa.feature.melspectrogram(S=sgram_mag, sr=sample_rate)<br>librosa.display.specshow(mel_scale_sgram)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/mel-spectrogram1.png"></p><p>这好多了，但大部分仍然很暗，可见没有携带足够的有用信息。因此，我们修改它以分贝比例而不是振幅。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 幅值转dB，将幅度频谱转换为dB标度频谱。也就是对S取对数</span><br>mel_sgram = librosa.amplitude_to_db(mel_scale_sgram, ref=np.<span class="hljs-built_in">min</span>)<br>librosa.display.specshow(mel_sgram, sr=sample_rate, x_axis=<span class="hljs-string">&#x27;time&#x27;</span>, y_axis=<span class="hljs-string">&#x27;mel&#x27;</span>)<br>plt.colorbar(<span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%+2.0f dB&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/mel-spectrogram2.png"></p><p>这就是我们真正想要的。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="傅立叶变换"><a href="#傅立叶变换" class="headerlink" title="傅立叶变换"></a>傅立叶变换</h3><p>离散傅立叶变换（DFT）：计算成本高，实践中较少用。</p><p>快速傅立叶变换（FFT）：计算音频信号整个时间序列的整体频率分量。但无法得知频率分量在音频信号中随时间的变化情况。</p><p>短时傅里叶变换（STFT）：使用滑动时间窗口将音频信号分解成更小的部分，对每个部分进行FFT，最终组合在一起。能够捕获频率随时间的变化。</p><p>STFT将音频信号分别沿时间轴和频率轴分为多个部分。它对整个频率范围进行划分，在梅尔尺度中分为等距的频带。STFT对每个时间段计算每个频带的振幅或能量。</p><p><img src="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/STFT.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 频谱图是二维的numpy数组，（频段数，时间段数）</span><br><span class="hljs-comment"># 数组中的每个数字都是对应时间段和频段信号的振幅</span><br><span class="hljs-comment"># 数组中的每一列都成为梅尔谱图图像中的一列</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mel_sgram), mel_sgram.shape)<br><span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt; (128, 23235)</span><br></code></pre></td></tr></table></figure><h3 id="梅尔谱图超参数"><a href="#梅尔谱图超参数" class="headerlink" title="梅尔谱图超参数"></a>梅尔谱图超参数</h3><p>用于调整梅尔谱图的超参数，使用Librosa的参数名称。（其他库也具有等效参数）</p><p>频段</p><ul><li><p>fmin：最小频率</p></li><li><p>fmax：要显示的最大频率</p></li><li><p>n_mels：频带数（即梅尔箱）。这是频谱图的高度</p></li></ul><p>时间段</p><ul><li><p>n_fft：每个时间段的窗口长度</p></li><li><p>hop_length：每一步滑动窗口的样本数。频谱图宽度=样本总数/hop_length</p></li></ul><h3 id="MFCC（梅尔频率倒谱系数）"><a href="#MFCC（梅尔频率倒谱系数）" class="headerlink" title="MFCC（梅尔频率倒谱系数）"></a>MFCC（梅尔频率倒谱系数）</h3><p>对于处理人类语音的问题，MFCC有时效果更好。</p><p>MFCC可以从梅尔谱图中选择与人类说话最常见的频率相对应的频带的压缩表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 提取MFCC特征</span><br>mfcc = librosa.feature.mfcc(samples, sr=sample_rate)<br><span class="hljs-comment"># 执行特征缩放，使得每个系数维度具有零均值和单位方差</span><br>mfcc = sklearn.preprocessing.scale(mfcc, axis=<span class="hljs-number">1</span>)<br>librosa.display.specshow(mfcc, sr=sample_rate, x_axis=<span class="hljs-string">&#x27;time&#x27;</span>)<br>plt.show()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mfcc), mfcc.shape)<br><span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt; (20, 23235)</span><br></code></pre></td></tr></table></figure><p><img src="/blog/2023/02/22/%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/mfcc.png"></p><p>MFCC从音频中提取出的特征比梅尔谱图更少，这些特征与捕捉声音的基本质量最相关。</p><h3 id="频谱图增强"><a href="#频谱图增强" class="headerlink" title="频谱图增强"></a>频谱图增强</h3><p>应用于图像的变换不适用于频谱图。例如翻转或旋转等。</p><p>使用SpecAugment，屏蔽频谱图的某个部分，有两种方式：</p><ul><li><p>Frequency mask：使用水平条随机屏蔽一系列连续频率</p></li><li><p>Time mask：使用垂直条随机屏蔽一段时间范围</p></li></ul><h3 id="原始音频增强"><a href="#原始音频增强" class="headerlink" title="原始音频增强"></a>原始音频增强</h3><ul><li><p>Time shift：将音频向左或向右移动一个随机量（对于没有特定顺序的交通或海浪等声音，音频可以环绕；对于顺序很重要的人类语音等声音，间隙可以用静音填充）</p></li><li><p>Pitch shift：随机修改声音部分的频率</p></li><li><p>Time stretch：随机放慢或加快声音</p></li><li><p>Add noise：为声音添加一些随机值</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://towardsdatascience.com/audio-deep-learning-made-simple-part-1-state-of-the-art-techniques-da1d3dff2504">Audio Deep Learning Made Simple (Part 1): State-of-the-Art Techniques | by Ketan Doshi | Towards Data Science</a></p><p><a href="https://towardsdatascience.com/audio-deep-learning-made-simple-part-2-why-mel-spectrograms-perform-better-aad889a93505">Audio Deep Learning Made Simple (Part 2): Why Mel Spectrograms perform better | by Ketan Doshi | Towards Data Science</a></p><p><a href="https://towardsdatascience.com/audio-deep-learning-made-simple-part-3-data-preparation-and-augmentation-24c6e1f6b52">Audio Deep Learning Made Simple (Part 3): Data Preparation and Augmentation | by Ketan Doshi | Towards Data Science</a></p><p><a href="https://lxkaka.wang/audio-process/">深度学习中的常用音频处理方法 - lxkaka</a></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Diffusion Model笔记</title>
    <link href="/blog/2023/02/02/Diffusion-Model%E7%AC%94%E8%AE%B0/"/>
    <url>/blog/2023/02/02/Diffusion-Model%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="扩散模型（diffusion-model）"><a href="#扩散模型（diffusion-model）" class="headerlink" title="扩散模型（diffusion model）"></a>扩散模型（diffusion model）</h1><h2 id="扩散过程"><a href="#扩散过程" class="headerlink" title="扩散过程"></a>扩散过程</h2><p>对初始数据分布$x_0$~q(x)，不断添加高斯噪声，最终使数据分布$X_T$变成各项独立的高斯分布。</p><ul><li><p>前向扩散过程的定义</p><p>$q(x_t|x_{t-1})=N(x_t;\sqrt{1-\beta_t}x_{t-1},\beta_tI)$</p><p>$q(x_{1:T}|x_0)=\prod_{t=1}^Tq(x_t|x_{t-1})$（马尔科夫链过程）</p></li><li><p>通过重参数化技巧，可以推导出任意时刻的$q(x_t)$，无需做迭代</p><p>$x_t=\sqrt{\alpha_t}x_{t-1}+\sqrt{1-\alpha_t}z_{t-1}=…=\sqrt{\overline{\alpha}_t}x_0+\sqrt{1-\overline{\alpha}_t}z$</p><p>其中$\overline{\alpha_t}=\prod_{i=1}^T\alpha_i$；参数重整化体现为$\sqrt{\alpha_t}(\sqrt{\alpha_{t-1}}x_{t-2}+\sqrt{1-\alpha_{t-1}}z_{t-2})+\sqrt{1-\alpha_t}z_{t-1}$中，$\sqrt{\alpha_t-\alpha_t\alpha_{t-1}}z_{t-2}+\sqrt{1-\alpha_t}z_{t-1}$为两个正态分布叠加，可以重参数化为$\sqrt{1-\alpha_t\alpha_{t-1}}\overline{z}_{t-2}$</p></li><li><p>每个时间步所添加的噪声的标准差$\beta_t$给定，且随t增大而增大</p></li><li><p>每个时间步所添加的噪声的均值与$\beta_t$有关，为了使$x_T$稳定收敛到$N(0,1)$</p></li><li><p>由$\mathbf{x_t=\sqrt{\overline{\alpha_t}}x_0+\sqrt{1-\overline{\alpha_t}}z}$可得</p><ul><li><p>$\mathbf{q(x_t|x_0)=N(x_t;\sqrt{\overline{\alpha}_t}x_0,(1-\overline{\alpha}_t)I)}$</p></li><li><p>随着不断加噪，$x_t$逐渐接近纯高斯噪声</p></li><li><p>$\mathbf{x_0=\frac{1}{\sqrt{\overline{\alpha}_t}}(x_t-\sqrt{1-\overline{\alpha}_t}z_t)}$</p></li></ul></li><li><p>扩散过程中的后验条件概率$q(x_{t-1}|x_t,x_0)$可以用公式表达，即给定$x_t$、$x_0$，可计算出$x_{t-1}$</p><p>假设$\beta_t$足够小时，$\mathbf{q(x_{t-1}|x_t,x_0)=N(x_{t-1};\tilde{\mu}(x_t,x_0),\tilde{\beta_t}I)}$</p><p>通过高斯分布的概率密度函数和贝叶斯以及二次函数的均值和方差计算可得（具体推导过程省略）$\mathbf{\tilde{\mu}_t=\frac{1}{\sqrt{\alpha_t}}(x_t-\frac{\beta_t}{\sqrt{1-\overline{\alpha}_t}}z_t)}$</p><p>即在$x_0$条件下，后验条件概率分布可通过$x_t$和$z_t$计算得到</p></li></ul><h2 id="逆扩散过程"><a href="#逆扩散过程" class="headerlink" title="逆扩散过程"></a>逆扩散过程</h2><p>从高斯噪声$x_T$中逐步还原出原始数据$x_0$。马尔科夫链过程。</p><ul><li>$\mathbf{p_{\theta}(x_{t-1}|x_t)=N(x_{t-1};\mu_{\theta}(x_t,t),\Sigma_{\theta}(x_t,t)}$$p_{\theta}(x_{0:T})=p(x_T)\prod_{t-1}^Tp_{\theta}(x_{t-1}|x_t)$</li></ul><h2 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h2><p>对负对数似然$L=E_{q(x_0)}[-logp_\theta(x_0)]$使用变分下限（VLB），并进一步推导化简得到最终loss</p><ul><li><p>$\mathbf{L_t^{simple}=E_{t,x_0,\epsilon}[||\epsilon-\epsilon_\theta(\sqrt{\overline{\alpha}_t}x_0+\sqrt{1-\overline{\alpha}_t}\epsilon,t)||^2]}$</p></li><li><p>在推导的过程中，loss转换为$q(x_{t-1}|x_t,x_0)=N(x_{t-1};\tilde{\mu}(x_t,x_0),\tilde{\beta_t}I)$与$p_{\theta}(x_{t-1}|x_t)=N(x_{t-1};\mu_{\theta}(x_t,t),\Sigma_{\theta}(x_t,t)$两个高斯分布之间的KL散度，将$\mu$与$x_t$的公式代入将loss转化为$\epsilon$、$x_0$、$t$的公式</p></li><li><p>DDPM作者采用了预测随机变量（噪声）法，并不直接预测后验分布的期望值或原始数据</p></li><li><p>DDPM作者将方差$\Sigma_{\theta}(x_t,t)$用给定的$\beta_t$或$\tilde{\beta_t}$代替，训练参数只存在均值中，为了使训练更加稳定</p></li></ul><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><ol><li><p>给出原始数据$x_0 \sim q(x_0)$</p></li><li><p>设定$t \sim Uniform({1,…,T})$</p></li><li><p>从标准高斯分布采样一个噪声$\epsilon \sim N(0,I)$</p></li><li><p>采用梯度下降法优化目标函数$||\epsilon-\epsilon_\theta(\sqrt{\overline{\alpha}_t}x_0+\sqrt{1-\overline{\alpha}_t}\epsilon,t)||$</p></li></ol><h2 id="推断过程"><a href="#推断过程" class="headerlink" title="推断过程"></a>推断过程</h2><ol><li><p>每个时间步通过$x_t$和$t$计算$p_{\theta}(x_{t-1}|x_t)=N(x_{t-1};\mu_{\theta}(x_t,t),\Sigma_{\theta}(x_t,t))$</p></li><li><p>通过重参数从$p_{\theta}(x_{t-1}|x_t)$中采样得到$x_{t-1}$</p></li><li><p>通过不断迭代最终得到$x_0$</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li><p>定义时间步数、$\beta_t$、$\sqrt{\overline{\alpha_t}}$等公式计算中需要用到的常量</p><p>$\mathbf{x_t=\sqrt{\overline{\alpha_t}}x_0+\sqrt{1-\overline{\alpha_t}}z}$</p><p>$\mathbf{\mu_\theta=\frac{1}{\sqrt{\alpha_t}}(x_t-\frac{\beta_t}{\sqrt{1-\overline{\alpha}_t}}z_\theta(x_t,t))}$</p><p>$\mathbf{\Sigma_{\theta}(x_t,t)=\tilde{\beta_t}=\beta_t}$</p><p><em>DDPM论文中作者将时间步数$T$设置为1000，$\beta_t$为0.0001到0.02之间的线性插值</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">num_timesteps = <span class="hljs-number">1000</span><br>schedule_low = <span class="hljs-number">1e-4</span><br>schedule_high = <span class="hljs-number">0.02</span><br>betas = torch.tensor(np.linspace(schedule_low, schedule_high, num_timesteps), dtype=torch.float32)<br><br>alphas = <span class="hljs-number">1</span> - betas<br>alphas_cumprod = np.cumprod(alphas)<br>sqrt_alphas_cumprod = np.sqrt(alphas_cumprod)<br>sqrt_one_minus_alphas_cumprod = np.sqrt(<span class="hljs-number">1</span> - alphas_cumprod)<br>reciprocal_sqrt_alphas = np.sqrt(<span class="hljs-number">1</span> / alphas)<br>betas_over_sqrt_one_minus_alphas_cumprod = (betas / sqrt_one_minus_alphas_cumprod)<br>sqrt_betas = np.sqrt(betas)<br></code></pre></td></tr></table></figure></li><li><p>前向扩散过程</p><p>$\mathbf{x_t=\sqrt{\overline{\alpha_t}}x_0+\sqrt{1-\overline{\alpha_t}}z}$</p><p>$\mathbf{||\epsilon-\epsilon_\theta(\sqrt{\overline{\alpha}_t}x_0+\sqrt{1-\overline{\alpha}_t}\epsilon,t)||}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward_diffusion_process</span>(<span class="hljs-params">model, x0, num_timesteps, sqrt_alphas_cumprod, sqrt_one_minus_alphas_cumprod</span>):<br>    batch_size = x0.shape[<span class="hljs-number">0</span>]<br>    t = torch.randint(<span class="hljs-number">0</span>, num_timesteps, size=(batch_size,))<br>    noise = torch.randn_like(x0)<br>    xt = sqrt_alphas_cumprod[t] * x0 + sqrt_one_minus_alphas_cumprod[t] * noise<br>    estimated_noise = model(xt, t)<br>    loss = (noise - estimated_noise).square().mean()<br>    <span class="hljs-keyword">return</span> loss<br></code></pre></td></tr></table></figure></li><li><p>逆向扩散过程</p><p>$\mathbf{p_{\theta}(x_{t-1}|x_t)=N(x_{t-1};\mu_{\theta}(x_t,t),\Sigma_{\theta}(x_t,t))}$</p><p>$\mathbf{\mu_\theta(x_t,t)=\frac{1}{\sqrt{\alpha_t}}(x_t-\frac{\beta_t}{\sqrt{1-\overline{\alpha}_t}}z_\theta(x_t,t))}$</p><p>$\mathbf{\Sigma_{\theta}(x_t,t)=\tilde{\beta_t}=\beta_t}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_diffusion_process</span>(<span class="hljs-params">model, shape, num_timesteps, reciprocal_sqrt_alphas, betas_over_sqrt_one_minus_alphas_cumprod, sqrt_betas</span>):<br>    current_x = torch.randn(shape)<br>    x_seq = [current_x]<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(num_timesteps)):<br>        current_x = sample(model, current_x, t, shape[<span class="hljs-number">0</span>], reciprocal_sqrt_alphas, betas_over_sqrt_one_minus_alphas_cumprod, sqrt_betas)<br>        x_seq.append(current_x)<br>    <span class="hljs-keyword">return</span> x_seq<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sample</span>(<span class="hljs-params">model, xt, t, batch_size, reciprocal_sqrt_alphas, betas_over_sqrt_one_minus_alphas_cumprod, sqrt_betas</span>):<br>    ts = torch.full([batch_size, <span class="hljs-number">1</span>], t)<br>    estimated_noise = model(xt, ts)<br>    mean = reciprocal_sqrt_alphas[ts] * (xt - betas_over_sqrt_one_minus_alphas_cumprod[ts] * estimated_noise)<br>    <span class="hljs-keyword">if</span> t &gt; <span class="hljs-number">0</span>:<br>        z = torch.randn_like(xt)<br>    <span class="hljs-keyword">else</span>:<br>        z = <span class="hljs-number">0</span><br>    sample = mean + sqrt_betas[t] * z<br>    <span class="hljs-keyword">return</span> sample<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub+Hexo博客网站搭建（二）</title>
    <link href="/blog/2022/11/11/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/blog/2022/11/11/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="图片无法正常加载"><a href="#图片无法正常加载" class="headerlink" title="图片无法正常加载"></a>图片无法正常加载</h1><p>Hexo网页无法正常加载图片</p><p>解决方法：</p><ol><li><p>_config.yml和主题的_config.theme.yml里的<code>post_asset_folder</code>设置为true（这样每篇文章都会有对应同名的文件夹，图片就放在这里面）</p></li><li><p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code>（一定要有前面的网址，不能只有hexo-asset-image，这是个坑，害我搞了好久）</p></li><li><p>markdown正常插入图片（即<code>![image_introduction](blog_name/image_name.jpg)</code>）</p></li></ol><h1 id="图片无法居中"><a href="#图片无法居中" class="headerlink" title="图片无法居中"></a>图片无法居中</h1><p>hexo网页的图片总是左对齐，无法居中</p><p>解决方法：</p><ol><li>使用HTML标签，注意该段代码不能放在代码栏中，成功时代码不显示，显示的是图片</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图片的绝对路径或与本文档的相对路径&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;鼠标移动到图片上显示该内容&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">img</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="公式无法正常加载"><a href="#公式无法正常加载" class="headerlink" title="公式无法正常加载"></a>公式无法正常加载</h1><p>Hexo网页无法正常加载公式</p><p>解决方法：</p><ol><li><p>在theme文件夹里找到主题的配置文件_config.yml</p></li><li><p>把<code>mathjax </code>下面的<code>enable</code> 设置为 true（到这里只解决了行间公式，即<code>$fomula$</code>）</p></li><li><p>在有数学公式的markdown文件里的front-matter（即最开头那块）里加上<code>mathjax: true</code>（到这里才更进一步解决了公式块，即<code>$$fomula$$</code>）</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>GitHub个人网站搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Transformer笔记</title>
    <link href="/blog/2022/11/11/Transformer%E7%AC%94%E8%AE%B0/"/>
    <url>/blog/2022/11/11/Transformer%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>     <img src="/blog/2022/11/11/Transformer%E7%AC%94%E8%AE%B0/transformer_model.jpg"></p><h1 id="Input-Embedding"><a href="#Input-Embedding" class="headerlink" title="Input Embedding"></a>Input Embedding</h1><h2 id="One-Hot-Encoding"><a href="#One-Hot-Encoding" class="headerlink" title="One-Hot Encoding"></a>One-Hot Encoding</h2><p>将输入单词用one-hot形式编码成序列向量，向量长度就是预定义的词汇表中拥有的词汇量，向量在这一维中的值只有一个位置是1，其余都是0，1对应的位置就是词汇表中表示这个单词的地方</p><p>劣势：稀疏；长</p><h2 id="Word-Embedding"><a href="#Word-Embedding" class="headerlink" title="Word Embedding"></a>Word Embedding</h2><p>设计一个可学习的权重矩阵W，将one-hot词向量与这个矩阵进行点乘，得到新的表示结果</p><p>优势：降维</p><h2 id="Position-Encoding"><a href="#Position-Encoding" class="headerlink" title="Position Encoding"></a>Position Encoding</h2><p>预定义函数，通过函数计算出位置信息<br>$PE_{(pos,2i)}=sin(pos/10000^{2i/d})$</p><p>$PE_{(pos,2i+1)}=cos(pos/10000^{2i/d})$<br>这种编码方式保证了不同位置在所有维度上不会被编码到完全一样的值</p><h2 id="Transformer对输入的操作概括"><a href="#Transformer对输入的操作概括" class="headerlink" title="Transformer对输入的操作概括"></a>Transformer对输入的操作概括</h2><p>word embedding + position embedding = final representation</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/e6b5b463cf7b">Transformer 修炼之道（一）、Input Embedding</a></p><h1 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h1><p>Encoder由多个（通常6个）层组成，每个层内部都有<strong>残差连接</strong>和<strong>归一化操作</strong>，主要内容包括<strong>多头自注意力层</strong>（Multi-Head Self-Attention）和<strong>前向反馈网络层</strong>（Feed Forward Network），前者用于捕捉特征之间的关系，后者是进一步编码学习，实质上等同于MLP（Multi-Layer Perception）</p><h2 id="Multi-Head-Self-Attention"><a href="#Multi-Head-Self-Attention" class="headerlink" title="Multi-Head Self-Attention"></a>Multi-Head Self-Attention</h2><p>多头（多个，通常为8）</p><ol><li><p>对输入做不同的线性变换生成<strong>Q（Query）、K（Key）、V（Value）</strong></p></li><li><p><strong>Scaled Dot-Product Attention</strong>（对Q、K、V进行计算得到输出）</p><p>$$<br>Attention(Q,K,V)=softmax(\frac{Q K^T}{\sqrt{d_k}})V \<br>d_k是Q,K矩阵的列数，即向量维度<br>$$</p><p>除以\sqrt{d_k}的原因是防止Q和K的点积值过大（\sqrt{d_k}即Q的列数，也是K的行数），避免在经过softmax后梯度太小</p></li><li><p>将多个自注意力的输出拼接起来，再进行线性变换</p></li></ol><h2 id="Feed-Forward-Network（FFN）"><a href="#Feed-Forward-Network（FFN）" class="headerlink" title="Feed Forward Network（FFN）"></a>Feed Forward Network（FFN）</h2><p>两个全连接层，其中一个带ReLU激活，两层中间有Dropout<br>$FFN(x)=max(0,xW_1+b_1)W_2+b_2$</p><h2 id="Add-amp-Norm"><a href="#Add-amp-Norm" class="headerlink" title="Add &amp; Norm"></a>Add &amp; Norm</h2><p>$$<br>LayerNorm(X+MultiHeadAttention(X)) \<br>LayerNorm(X+FeedForward(X))<br>$$</p><p>Add：输入加输出（残差连接）</p><p>Norm：Layer Normalization，通常为$\frac{x-\mu}{\sigma}$，$\mu$表示均值$\sigma$表示标准差</p><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/81901d3d3f8e">Transformer 修炼之道（二）、Encoder</a></p><h1 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h1><h2 id="Multi-Head-Attention-with-Mask"><a href="#Multi-Head-Attention-with-Mask" class="headerlink" title="Multi-Head Attention with Mask"></a>Multi-Head Attention with Mask</h2><p>mask：忽略某些位置（要预测的之后的内容），不计算与其相关的注意力权重（下三角矩阵，以极大负值代替0，从而使得其经过softmax后生成的概率趋近于0，相当于不计算这些位置的注意力权重）</p><h2 id="Encoder-Decoder-Attention"><a href="#Encoder-Decoder-Attention" class="headerlink" title="Encoder-Decoder Attention"></a>Encoder-Decoder Attention</h2><p>其实是多头自注意力，K和V来自Encoder的输出，Q：如果是Decoder的第一层，则使用（已解码的）输入序列（最开始则是起始字符）；如果是后面的层，则是前面层的输出</p><h2 id="Output-Generator"><a href="#Output-Generator" class="headerlink" title="Output Generator"></a>Output Generator</h2><p>实质是线性层，将解码的序列映射回原来的空间维度，然后经过softmax（或log-softmax）生成预测概率</p><h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/2ee8a87bcd29">Transformer 修炼之道（三）、Decoder</a></p><h1 id="Transformer总结"><a href="#Transformer总结" class="headerlink" title="Transformer总结"></a>Transformer总结</h1><ul><li>Transformer 与 RNN 不同，可以比较好地并行训练</li><li>Transformer 本身是不能利用单词的顺序信息的，因此需要在输入中添加位置 Embedding，否则 Transformer 就是一个词袋模型了</li><li>Transformer 的重点是 Self-Attention 结构，其中用到的 Q, K, V矩阵通过输出进行线性变换得到</li><li>Transformer 中 Multi-Head Attention 中有多个 Self-Attention，可以捕获单词之间多种维度上的相关系数 attention score</li></ul><h1 id="整体可参考"><a href="#整体可参考" class="headerlink" title="整体可参考"></a>整体可参考</h1><p><a href="https://zhuanlan.zhihu.com/p/338817680">Transformer模型详解（图解最完整版）</a></p><h1 id="变种"><a href="#变种" class="headerlink" title="变种"></a>变种</h1><h2 id="Sandwich-Transformer"><a href="#Sandwich-Transformer" class="headerlink" title="Sandwich Transformer"></a>Sandwich Transformer</h2><p>变换了self-attention和FFN的顺序</p><h2 id="Universal-Transformer"><a href="#Universal-Transformer" class="headerlink" title="Universal Transformer"></a>Universal Transformer</h2><p>在深度上加上循环，增加通用性</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub+Hexo博客网站搭建（一）</title>
    <link href="/blog/2022/11/08/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/blog/2022/11/08/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>弄一个自己的网站，可以放一些平时写的笔记或找到的资料什么的。</p><h1 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h1><p>网站的搭建其实很简单，在GitHub上新建一个repository，把名字命名为username.github.io就行。</p><p>网站有了，如何写文章？这里不需涉及到前端的编程。有一个叫框架的东西，可以帮我们实现前端，我们要做的就是写markdown就行了。我没用GitHub默认的框架，用的是Hexo。</p><p>接下来就是把网站换成Hexo框架。需要下两个东西，Git和Node.js。</p><p>Git是GitHub必备，主要目的就是为了方便项目管理，在本地更新项目后git上去比在GitHub上操作方便多了。</p><p>Node.js是Hexo的基础，就是Hexo是基于Node.js的。</p><p>详细的搭建步骤<a href="https://blog.csdn.net/qq_39400113/article/details/104703467?spm=1001.2014.3001.5501">Github+Hexo+matery博客搭建_果果小师弟的博客-CSDN博客</a></p><h1 id="网站主题"><a href="#网站主题" class="headerlink" title="网站主题"></a>网站主题</h1><p>网站主题就是网页显示的样子，主题有很多，萝卜青菜各有所爱，我选用的是Fluid。</p><p>安装的详细步骤<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">开始使用 | Hexo Fluid 用户手册</a></p><h1 id="多电脑写博客"><a href="#多电脑写博客" class="headerlink" title="多电脑写博客"></a>多电脑写博客</h1><p>因为工位有电脑，自己也有一台，所以如果两台电脑都能写博客， 就会很方便。</p><p>这个方法其实就是把博客的所有内容也都放到GitHub上，然后要写博客就更新一下本地的repository，写好博客后再更新到GitHub上。</p><p>所以Git和Hexo都是必备的。</p><p>具体步骤可以参考：</p><p><a href="https://blog.csdn.net/qq_30105599/article/details/118302086">多台电脑同步更新Hexo博客___tourist的博客-CSDN博客_hexo 多台电脑</a></p><p><a href="https://www.bilibili.com/read/cv16385424">https://www.bilibili.com/read/cv16385424</a></p><h1 id="多电脑写博客改进"><a href="#多电脑写博客改进" class="headerlink" title="多电脑写博客改进"></a>多电脑写博客改进</h1><p>上面的方法是没毛病，但是有个问题，就是这样做的话源文件都公开了，安全性不太好。虽然可能也没多少人看，也没人愿意抄，真想搞到文章也拦不住，但是还是保护一下源文件，不然心里膈应。</p><p>刚开始试了把repository改成私有的，但是这样就没有公开的网站了；也试了lock branch的分支保护规则，但是只是不允许别人push，clone还是可以的呀。</p><p>所以想出一个解决方法就是，把源文件放在一个新的repository里，让这个repository是私有的，发布的网页还是放在原来的repository里。</p><p>操作很简单：</p><ol><li><p>新建一个私有的repository</p></li><li><p>在私有repository里随便添加个文件（readme什么的都行），然后clone到本地</p></li><li><p>把源文件（除了.git和.deploy_git文件夹）全部copy到私有的repository里</p></li><li><p>把github上发布网站的repository的存放源文件的分支删掉</p></li><li><p>在私有repository里push一下把源文件存到私有库里</p></li></ol><p>这样就完成了，之后所有的操作都在新的这个私有repository里，命令什么的也都一样。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><code>hexo new &quot;[title]&quot;</code>新建文章，名为title（加不加双引号都可以）</p><p><code>hexo g</code>渲染静态页面</p><p><code>hexo s</code>本地预览网站</p><p><code>hexo d</code>将渲染出的静态页面上传至GitHub</p><p><code>git pull</code>从GitHub上拉取仓库文件（本地更新）</p><p><code>git add .</code>将当前目录下的所有文件添加到暂存区</p><p><code>git commit -m &quot;[message]&quot;</code>提交暂存区到本地仓库</p><p><code>git push</code>将本地的分支版本上传到远程并合并</p>]]></content>
    
    
    <categories>
      
      <category>GitHub个人网站搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
