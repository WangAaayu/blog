<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C盘扩容</title>
    <link href="/blog/posts/7055cfc/"/>
    <url>/blog/posts/7055cfc/</url>
    
    <content type="html"><![CDATA[<h1 id="C盘扩容"><a href="#C盘扩容" class="headerlink" title="C盘扩容"></a>C盘扩容</h1><p>C盘满了，但C盘所在的磁盘仍有多余的空间，可以对C盘扩容</p><p>一般情况下，通过磁盘管理即可扩容，当C盘分区右侧存在无法删除的分区时，可使用DiskGenius移动分区再进行扩容</p><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><ol><li><p>Win+R输入diskmgmt.msc确定，出现磁盘管理窗口</p></li><li><p>通过删除卷或压缩卷在C盘分区右侧得到未分配分区（操作前先备份数据）</p></li><li><p>使用扩展卷将未分配分区归入到C盘分区</p></li></ol><p><img src="/blog/posts/7055cfc/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86.png"></p><p>该方法仅在C盘分区紧邻右侧有未分配分区才能使用，当C盘分区紧邻右侧有已经分配的无法删除的分区时，需要使用管理软件</p><p>该问题有些管理软件需要升级才能解决，使用DiskGenius可以免费解决</p><h2 id="DiskGenius"><a href="#DiskGenius" class="headerlink" title="DiskGenius"></a>DiskGenius</h2><p><a href="https://www.diskgenius.cn/">https://www.diskgenius.cn/</a></p><ol><li><p>右键C盘紧邻右侧的已分配无法删除的分区，选择调整分区大小</p></li><li><p>通过鼠标拖动该分区的边界，将该分区移动到另外一侧，点击开始</p></li><li><p>扩容C盘</p></li></ol><p><img src="/blog/posts/7055cfc/diskgenius.png"></p><p>DiskGenius的功能很强大，或许有更加正式的方法可以移动分区</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python运行方式</title>
    <link href="/blog/posts/d10a47fc/"/>
    <url>/blog/posts/d10a47fc/</url>
    
    <content type="html"><![CDATA[<h1 id="Python运行方式"><a href="#Python运行方式" class="headerlink" title="Python运行方式"></a>Python运行方式</h1><p>运行python有四种方式：</p><ol><li><p>脚本运行：<code>python xxx.py</code></p></li><li><p>库模块作为脚本运行：<code>python -m xxx</code></p></li><li><p>代码运行：<code>python -c &quot;code&quot;</code></p></li><li><p>交互式解释器模式（Read-Eval-Print Loop, REPL）下运行</p></li></ol><p>四种方式的区别在于sys.path不同</p><h2 id="sys-path"><a href="#sys-path" class="headerlink" title="sys.path"></a>sys.path</h2><p>sys.path是指定模块搜索路径的字符串列表。从环境变量PYTHONPATH初始化，加上安装依赖的默认值。</p><p>默认情况下，sys.path列表的第一项将根据运行方式的不同而不同</p><h3 id="脚本运行"><a href="#脚本运行" class="headerlink" title="脚本运行"></a>脚本运行</h3><p>sys.path[0]为脚本所在的目录</p><h3 id="库模块作为脚本运行"><a href="#库模块作为脚本运行" class="headerlink" title="库模块作为脚本运行"></a>库模块作为脚本运行</h3><p>sys.path[0]为当前的目录</p><h3 id="代码运行-REPL运行"><a href="#代码运行-REPL运行" class="headerlink" title="代码运行/REPL运行"></a>代码运行/REPL运行</h3><p>sys.path[0]为空字符串</p><p><img src="/blog/posts/d10a47fc/syspath.png"></p><h2 id="运行方式选择"><a href="#运行方式选择" class="headerlink" title="运行方式选择"></a>运行方式选择</h2><p>没有编译器，在命令行的情况下需要选择合适的运行方式：</p><ul><li><p>当程序不依赖自定义的模块时，使用脚本运行方式<code>python xxx.py</code></p></li><li><p>当程序依赖自定义的模块时，使用库模块作为脚本运行方式<code>python -m pkg.xxx</code>（需要在所有使用的模块目录下新建__init__.py，python才能将该目录识别为包，并且需要在所有包的根目录下运行）</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>语言基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+Django开发过程问题整合</title>
    <link href="/blog/posts/977e27a9/"/>
    <url>/blog/posts/977e27a9/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-Django开发过程问题整合"><a href="#Vue-Django开发过程问题整合" class="headerlink" title="Vue+Django开发过程问题整合"></a>Vue+Django开发过程问题整合</h1><h2 id="vue同步与异步"><a href="#vue同步与异步" class="headerlink" title="vue同步与异步"></a>vue同步与异步</h2><p>vue的方法是顺序调用的，方法体内也是顺序执行的，但是无法保证先调用的方法先执行结束，即方法内是同步的，但是方法间是异步的</p><p>解决方法：</p><p>使用async和await修饰符，使方法间同步</p><p>async用于修饰函数，表示该函数异步，该函数执行不会阻塞后面代码的执行，await只能放在async修饰的函数内，表示需要等待await修饰的函数执行结束后才继续执行后面的代码</p><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs v">async method()&#123;<br>    await method1()<br>    await method2()<br>    await method3()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vue丢失后端数据的精度"><a href="#vue丢失后端数据的精度" class="headerlink" title="vue丢失后端数据的精度"></a>vue丢失后端数据的精度</h2><p>后端的数据为64位长整数，前端javascript数字为64位，但整数最多为15位，因此后端的数据超过前端能表示的最大整数时，前端的数据将溢出</p><p>javascript数字表示见：<a href="https://www.runoob.com/js/js-obj-number.html">JavaScript Number 对象 | 菜鸟教程</a></p><p>解决方法：</p><p>后端将长整数转换为字符串传给前端，接收前端返回的数据字符串后转换为长整数</p><p>该问题出现在数据库id上，后端需根据前端返回的id查询数据库，理论上来说，后端可以不用将该字符串转换为长整数，因为在这种情况下，mysql会将字符串转换为匹配对应字段的数据类型，但是只使用字符串的前导数字，即在第一个非数字字符及其之后的所有字符会被丢弃</p><p>mysql查询字符串转换为数字见：<a href="https://cloud.tencent.com/developer/ask/sof/1225507">在MySQL中使用字符串查询Int字段的奇怪行为 - 问答 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h2 id="django的json编码"><a href="#django的json编码" class="headerlink" title="django的json编码"></a>django的json编码</h2><p>django视图层函数返回数据时需要先将其转成json，json默认的编码器无法转换datetime对象</p><p>解决方法：</p><p>构造json编码器以转换datetime对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyEncoder</span>(json.JSONEncoder):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">default</span>(<span class="hljs-params">self, obj</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(obj, datetime):<br>            <span class="hljs-keyword">return</span> obj.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> json.JSONEncoder.default(self, obj)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">view1</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># ...</span><br>    json_data = json.dumps(data, cls=MyEncoder)<br>    <span class="hljs-keyword">return</span> HttpResponse(json_data, content_type=<span class="hljs-string">&quot;application/json&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="django外键与外键-id"><a href="#django外键与外键-id" class="headerlink" title="django外键与外键_id"></a>django外键与外键_id</h2><p>django当表含有外键时，该表对象的字段除了有外键之外，还有外键_id</p><p>该外键字段返回的是对应主键所在表的一条数据，是一个表对象，而外键_id字段返回的是对应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TableB</span>(models.Model):<br>    b_id = models.AutoField(primary_key=<span class="hljs-literal">True</span>)<br>    a_id = models.ForeignKey(to=TableA, db_column=<span class="hljs-string">&#x27;a_id&#x27;</span>, on_delete=models.CASCADE)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_table_b</span>(<span class="hljs-params">request</span>):<br>    b = TableB.objects.get(b_id=<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(b.a_id)  <span class="hljs-comment"># TableA对象</span><br>    <span class="hljs-built_in">print</span>(b.a_id_id)  <span class="hljs-comment"># 值</span><br></code></pre></td></tr></table></figure><h2 id="django与单例模式"><a href="#django与单例模式" class="headerlink" title="django与单例模式"></a>django与单例模式</h2><p>django视图层需要一些全局的数据，供函数读取</p><p>解决方法：</p><p>通过单例模式构造一个存储全局数据的类（也可以使用数据库存储，该方法的优点是节省空间，适用于少量数据）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    _instance_lock = threading.Lock()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-keyword">with</span> Singleton._instance_lock:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(Singleton, <span class="hljs-string">&quot;_instance&quot;</span>):<br>                Singleton._instance = <span class="hljs-built_in">object</span>.__new__(cls)<br>        <span class="hljs-keyword">return</span> Singleton._instance<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        data()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">data</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python调用Java程序（打包与JPype）</title>
    <link href="/blog/posts/189cd634/"/>
    <url>/blog/posts/189cd634/</url>
    
    <content type="html"><![CDATA[<h1 id="Python调用Java程序（打包与JPype）"><a href="#Python调用Java程序（打包与JPype）" class="headerlink" title="Python调用Java程序（打包与JPype）"></a>Python调用Java程序（打包与JPype）</h1><h2 id="java程序打包jar（maven）"><a href="#java程序打包jar（maven）" class="headerlink" title="java程序打包jar（maven）"></a>java程序打包jar（maven）</h2><h3 id="当程序不引用第三方依赖时"><a href="#当程序不引用第三方依赖时" class="headerlink" title="当程序不引用第三方依赖时"></a>当程序不引用第三方依赖时</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta"># c：创建新档案 v：详细输出 f：指定档案文件名</span><br><span class="hljs-meta"># example.jar为指定的文件名 xxx.class为需要打包的类，按需添加</span><br>jar -cvf example.jar example1.<span class="hljs-keyword">class</span> <span class="hljs-title class_">example2</span>.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p>或使用maven的package指令</p><h3 id="当程序引用第三方依赖时"><a href="#当程序引用第三方依赖时" class="headerlink" title="当程序引用第三方依赖时"></a>当程序引用第三方依赖时</h3><p>方法一：</p><p>使用开发软件的打包功能</p><p>vscode左下角JAVA PROJECTS栏上点击第二个按钮（Export Jar），接着选择主类以及需要的类和依赖等，就可以得到包含第三方依赖的jar包</p><p>方法二：</p><p>使用插件</p><p>在pom.xml中添加maven-assembly-plugin插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>   <br>        <span class="hljs-comment">&lt;!-- 添加插件，使jar包包含依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>fully.qualified.MainClass<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着在项目的目录下执行命令，在target文件夹中得到包含依赖的jar包</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">mvn clean compile <span class="hljs-keyword">assembly</span>:<span class="hljs-type">single</span><br></code></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/574594/how-can-i-create-an-executable-runnable-jar-with-dependencies-using-maven">How can I create an executable/runnable JAR with dependencies using Maven?</a></p><p><a href="https://blog.csdn.net/SCGH_Fx/article/details/122431915">maven将第三方依赖打进jar包_将依赖打入jar包_兵工厂三剑客的博客-CSDN博客</a></p><p><a href="https://stackoverflow.com/questions/3753894/executable-jar-with-depedencies">Executable Jar with depedencies</a></p><h2 id="jpype"><a href="#jpype" class="headerlink" title="jpype"></a>jpype</h2><p>jpype是一个python模块，用于从python中提供对java的完全访问</p><p><a href="https://jpype.readthedocs.io/en/latest/index.html">JPype documentation</a></p><h3 id="python与java位数一致"><a href="#python与java位数一致" class="headerlink" title="python与java位数一致"></a>python与java位数一致</h3><p>首先确保使用的python和java位数一样（都是64位或都是32位）</p><p>在cmd中输入<code>python</code>和<code>java -version</code>即可查看</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> jpype1<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jpype<br><br><span class="hljs-comment"># jar包路径</span><br>jar_path = <span class="hljs-string">&quot;example.jar&quot;</span><br><span class="hljs-comment"># 启动java虚拟机（虚拟机路径，模式，jar包路径）</span><br>jpype.startJVM(jpype.getDefaultJVMPath(), <span class="hljs-string">&quot;-ea&quot;</span>, <span class="hljs-string">&quot;-Djava.class.path=%s&quot;</span> %jar_path)<br><span class="hljs-comment"># 加载类</span><br>exampleClass = jpype.JClass(<span class="hljs-string">&#x27;com.Example&#x27;</span>)<br><span class="hljs-comment"># 类实例化</span><br>exampleInstance = exampleClass(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment"># 执行函数</span><br>test = exampleInstance.test(<span class="hljs-string">&quot;hello&quot;</span>)<br><span class="hljs-built_in">print</span>(test)<br><span class="hljs-comment"># 关闭虚拟机</span><br>jpype.shutdownJVM()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语言基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雪花算法（SnowFlake）</title>
    <link href="/blog/posts/75e39d48/"/>
    <url>/blog/posts/75e39d48/</url>
    
    <content type="html"><![CDATA[<h1 id="雪花算法（SnowFlake）"><a href="#雪花算法（SnowFlake）" class="headerlink" title="雪花算法（SnowFlake）"></a>雪花算法（SnowFlake）</h1><h2 id="Twitter雪花算法"><a href="#Twitter雪花算法" class="headerlink" title="Twitter雪花算法"></a>Twitter雪花算法</h2><p><img src="/blog/posts/75e39d48/twitter%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95.jpg"></p><p>雪花算法原理是生成一个的64位比特位的long类型的唯一id</p><ul><li>最高1位固定值0，使生成的id为正整数</li><li>41位存储毫秒级时间戳，2^41/(1000<em>60</em>60<em>24</em>365)=69，大概可以使用69年</li><li>10位存储机器码，包括5位datacenterId和5位workerId，最多可以部署2^10=1024台机器</li><li>12位存储序列号，时间戳同一毫秒时，通过这个递增的序列号来区分，即对于同一台机器，一毫秒时间戳可以生成2^12=4096个不重复id</li></ul><p>可以将雪花算法作为一个单独的服务进行部署，然后需要全局唯一 id 的系统，请求雪花算法服务获取 id 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Twitter_Snowflake</span><br><span class="hljs-comment"> * SnowFlake的结构如下(每部分用-分开):</span><br><span class="hljs-comment"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 -</span><br><span class="hljs-comment"> * 000000000000</span><br><span class="hljs-comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0</span><br><span class="hljs-comment"> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span><br><span class="hljs-comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T</span><br><span class="hljs-comment"> * = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69</span><br><span class="hljs-comment"> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId</span><br><span class="hljs-comment"> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号</span><br><span class="hljs-comment"> * 加起来刚好64位，为一个Long型。</span><br><span class="hljs-comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SnowflakeIdWorker</span> &#123;<br>    <span class="hljs-comment">// ==============================Fields===========================================</span><br>    <span class="hljs-comment">/** 开始时间截 (2020-08-28) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">twepoch</span> <span class="hljs-operator">=</span> <span class="hljs-number">1598598185157L</span>;<br><br>    <span class="hljs-comment">/** 机器id所占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">5L</span>;<br><br>    <span class="hljs-comment">/** 数据标识id所占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">5L</span>;<br><br>    <span class="hljs-comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxWorkerId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits);<br><br>    <span class="hljs-comment">/** 支持的最大数据标识id，结果是31 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxDatacenterId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; datacenterIdBits);<br><br>    <span class="hljs-comment">/** 序列在id中占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">12L</span>;<br><br>    <span class="hljs-comment">/** 机器ID向左移12位 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdShift</span> <span class="hljs-operator">=</span> sequenceBits;<br><br>    <span class="hljs-comment">/** 数据标识id向左移17位(12+5) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdShift</span> <span class="hljs-operator">=</span> sequenceBits + workerIdBits;<br><br>    <span class="hljs-comment">/** 时间截向左移22位(5+5+12) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">timestampLeftShift</span> <span class="hljs-operator">=</span> sequenceBits + workerIdBits + datacenterIdBits;<br><br>    <span class="hljs-comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceMask</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits);<br><br>    <span class="hljs-comment">/** 工作机器ID(0~31) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> workerId;<br><br>    <span class="hljs-comment">/** 数据中心ID(0~31) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> datacenterId;<br><br>    <span class="hljs-comment">/** 毫秒内序列(0~4095) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequence</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br><br>    <span class="hljs-comment">/** 上次生成ID的时间截 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">lastTimestamp</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">// ==============================Constructors=====================================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> workerId     工作ID (0~31)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> datacenterId 数据中心ID (0~31) 此方法是判断传入的机房号和机器号是否超过了最大值，即31，或者小于0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SnowflakeIdWorker</span><span class="hljs-params">(<span class="hljs-type">long</span> workerId, <span class="hljs-type">long</span> datacenterId)</span> &#123;<br>        <span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<br>                    String.format(<span class="hljs-string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<br>                    String.format(<span class="hljs-string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));<br>        &#125;<br>        <span class="hljs-built_in">this</span>.workerId = workerId;<br>        <span class="hljs-built_in">this</span>.datacenterId = datacenterId;<br>    &#125;<br><br>    <span class="hljs-comment">// ==============================Methods==========================================</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 核心方法</span><br><span class="hljs-comment">     * 获得下一个ID (该方法是线程安全的)</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @return SnowflakeId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1.获取当前的系统时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br><br>        <span class="hljs-comment">// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span><br>        <span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>                    String.format(<span class="hljs-string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>,<br>                            lastTimestamp - timestamp));<br>        &#125;<br><br>        <span class="hljs-comment">// 如果是同一时间生成的，则进行毫秒内序列</span><br>        <span class="hljs-keyword">if</span> (lastTimestamp == timestamp) &#123;<br>            <span class="hljs-comment">// sequence 要增1, 但要预防sequence超过 最大值4095，所以要 与 SEQUENCE_MASK 按位求与</span><br>            <span class="hljs-comment">// 即如果此时sequence等于4095，加1后为4096，再和4095按位与后，结果为0</span><br>            sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;<br>            <span class="hljs-comment">// 毫秒内序列溢出</span><br>            <span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 阻塞到下一个毫秒,获得新的时间戳</span><br>                timestamp = tilNextMillis(lastTimestamp);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 时间戳改变，毫秒内序列重置</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            sequence = <span class="hljs-number">0L</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 上次生成ID的时间截</span><br>        <span class="hljs-comment">// 把当前时间赋值给 lastTime, 以便下一次判断是否处在同一个毫秒内</span><br>        lastTimestamp = timestamp;<br><br>        <span class="hljs-comment">// 移位并通过或运算拼到一起组成64位的ID</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="hljs-comment">// 时间戳减去默认时间 再左移22位 与运算</span><br>                | (datacenterId &lt;&lt; datacenterIdShift) <span class="hljs-comment">// 机房号 左移17位 与运算</span><br>                | (workerId &lt;&lt; workerIdShift) <span class="hljs-comment">// 机器号 左移12位 与运算</span><br>                | sequence; <span class="hljs-comment">// 序列号无需左移 直接进行与运算</span><br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lastTimestamp 上次生成ID的时间截</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前时间戳</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">tilNextMillis</span><span class="hljs-params">(<span class="hljs-type">long</span> lastTimestamp)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br>        <span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;<br>            timestamp = timeGen();<br>        &#125;<br>        <span class="hljs-keyword">return</span> timestamp;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回以毫秒为单位的当前时间</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前时间(毫秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">timeGen</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-comment">// ==============================Test=============================================</span><br>    <span class="hljs-comment">/** 测试 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SnowflakeIdWorker</span> <span class="hljs-variable">idWorker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SnowflakeIdWorker</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> idWorker.nextId();<br>            System.out.println(id);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/7082669476658806792">SnowFlake 雪花算法详解与实现 - 掘金</a></p><p><a href="https://blog.csdn.net/qq_41656303/article/details/109316962">snowflake算法(雪花算法)_LQJ灬的博客-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/534893180">分布式唯一 ID 生成方案浅谈</a></p><p><a href="https://www.jianshu.com/p/88eef580a45a">分布式自增ID算法——雪花算法 - 简书</a></p><h2 id="雪花算法改（增加数据信息）"><a href="#雪花算法改（增加数据信息）" class="headerlink" title="雪花算法改（增加数据信息）"></a>雪花算法改（增加数据信息）</h2><p>根据实际项目的需要，修改SnowFlake的结构</p><p>0 - 0000000000 0000000000 0000000000 00000 - 0 - 0 - 0 - 0000000000 0000000000 00000</p><ul><li><p>1位标识</p></li><li><p>36位时间截(毫秒级)</p></li><li><p>3位数据机器位</p></li><li><p>4位毫秒内序列</p></li><li><p>20位信息序列，存储数据的信息，信息以首字母的形式存储，每5位表示一个字母，0表示空，1-26表示a-z；该信息序列可以表示4个字母，存储部分数据，方便id与数据的对应和检验</p></li></ul><p><img src="/blog/posts/75e39d48/%E6%94%B9%E7%94%9F%E6%88%90id.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SnowFlake的结构如下(每部分用-分开):</span><br><span class="hljs-comment"> * 0 - 0000000000 0000000000 0000000000 000000 - 0 - 00 - 0000 - 0000000000</span><br><span class="hljs-comment"> * 0000000000</span><br><span class="hljs-comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0</span><br><span class="hljs-comment"> * 36位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span><br><span class="hljs-comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。35位的时间截，可以使用1年，年T</span><br><span class="hljs-comment"> * = (1L &lt;&lt; 36) / (1000L * 60 * 60 * 24 * 365) = 2</span><br><span class="hljs-comment"> * 3位的数据机器位，可以部署在4个节点，包括1位datacenterId和1位workerId</span><br><span class="hljs-comment"> * 4位毫秒内序列，毫秒内的计数，1位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生2个ID序号</span><br><span class="hljs-comment"> * 20位信息序列，存储数据信息，信息以首字母的形式存储，每5位表示一个字母，0表示空，1~26表示a~z</span><br><span class="hljs-comment"> * 加起来刚好64位，为一个Long型。</span><br><span class="hljs-comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySnowflakeIdWorker</span> &#123;<br>    <span class="hljs-comment">// ==============================Fields===========================================</span><br>    <span class="hljs-comment">/** 开始时间截 (2023-06-16) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">startTimestamp</span> <span class="hljs-operator">=</span> <span class="hljs-number">1686904669147L</span>;<br><br>    <span class="hljs-comment">/** 机器id所占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">2L</span>;<br><br>    <span class="hljs-comment">/** 数据标识id所占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/** 支持的最大机器id，结果是1 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxWorkerId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits);<br><br>    <span class="hljs-comment">/** 支持的最大数据标识id，结果是1 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxDatacenterId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; datacenterIdBits);<br><br>    <span class="hljs-comment">/** 序列在id中占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">4L</span>;<br><br>    <span class="hljs-comment">/** 信息在id中占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">infoBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">20L</span>;<br><br>    <span class="hljs-comment">/* 时间戳在id中占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">timestampBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">64</span> - <span class="hljs-number">1</span> - workerIdBits - datacenterIdBits - sequenceBits - infoBits;<br><br>    <span class="hljs-comment">/** 序列向左移25位 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceShift</span> <span class="hljs-operator">=</span> infoBits;<br><br>    <span class="hljs-comment">/** 机器ID向左移26位(25+1) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdShift</span> <span class="hljs-operator">=</span> infoBits + sequenceBits;<br><br>    <span class="hljs-comment">/** 数据中心id向左移27位(25+1+1) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdShift</span> <span class="hljs-operator">=</span> infoBits + sequenceBits + workerIdBits;<br><br>    <span class="hljs-comment">/** 时间截向左移28位(25+1+1+1) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">timestampShift</span> <span class="hljs-operator">=</span> infoBits + sequenceBits + workerIdBits + datacenterIdBits;<br><br>    <span class="hljs-comment">/** 生成序列的掩码，这里为1 (0b1=0x1=1) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceMask</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits);<br><br>    <span class="hljs-comment">/** 工作机器ID(0~1) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> workerId;<br><br>    <span class="hljs-comment">/** 数据中心ID(0~1) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> datacenterId;<br><br>    <span class="hljs-comment">/** 毫秒内序列(0~1) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequence</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br><br>    <span class="hljs-comment">/** 上次生成ID的时间截 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">lastTimestamp</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">// ==============================Constructors=====================================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     * 此方法是判断传入的机房号和机器号是否超过了最大值，即31，或者小于0</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> workerId     工作ID (0~1)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> datacenterId 数据中心ID (0~1)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MySnowflakeIdWorker</span><span class="hljs-params">(<span class="hljs-type">long</span> workerId, <span class="hljs-type">long</span> datacenterId)</span> &#123;<br>        <span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<br>                    String.format(<span class="hljs-string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<br>                    String.format(<span class="hljs-string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));<br>        &#125;<br>        <span class="hljs-built_in">this</span>.workerId = workerId;<br>        <span class="hljs-built_in">this</span>.datacenterId = datacenterId;<br>    &#125;<br><br>    <span class="hljs-comment">// ==============================Methods==========================================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 核心方法</span><br><span class="hljs-comment">     * 获得下一个ID (该方法是线程安全的)</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> SnowflakeId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-comment">// 1.获取当前的系统时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br><br>        <span class="hljs-comment">// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span><br>        <span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>                    String.format(<span class="hljs-string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>,<br>                            lastTimestamp - timestamp));<br>        &#125;<br><br>        <span class="hljs-comment">// 如果是同一时间生成的，则进行毫秒内序列</span><br>        <span class="hljs-keyword">if</span> (lastTimestamp == timestamp) &#123;<br>            <span class="hljs-comment">// sequence 要增1, 但要预防sequence超过 最大值4095，所以要 与 SEQUENCE_MASK 按位求与</span><br>            <span class="hljs-comment">// 即如果此时sequence等于4095，加1后为4096，再和4095按位与后，结果为0</span><br>            sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;<br>            <span class="hljs-comment">// 毫秒内序列溢出</span><br>            <span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 阻塞到下一个毫秒,获得新的时间戳</span><br>                timestamp = tilNextMillis(lastTimestamp);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 时间戳改变，毫秒内序列重置</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            sequence = <span class="hljs-number">0L</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 上次生成ID的时间截</span><br>        <span class="hljs-comment">// 把当前时间赋值给 lastTime, 以便下一次判断是否处在同一个毫秒内</span><br>        lastTimestamp = timestamp;<br><br>        <span class="hljs-comment">// 根据数据生成信息序列</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> infoGen(data);<br><br>        <span class="hljs-comment">// 移位并通过或运算拼到一起组成64位的ID</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> ((timestamp - startTimestamp) &lt;&lt; timestampShift) <span class="hljs-comment">// 时间戳减去默认时间 再左移28位 或运算</span><br>                | (datacenterId &lt;&lt; datacenterIdShift) <span class="hljs-comment">// 机房号 左移27位 或运算</span><br>                | (workerId &lt;&lt; workerIdShift) <span class="hljs-comment">// 机器号 左移26位 或运算</span><br>                | (sequence &lt;&lt; sequenceShift) <span class="hljs-comment">// 序列号 左移25位 或运算</span><br>                | (info); <span class="hljs-comment">// 信息号 无需左移 直接进行或运算</span><br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lastTimestamp 上次生成ID的时间截</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前时间戳</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">tilNextMillis</span><span class="hljs-params">(<span class="hljs-type">long</span> lastTimestamp)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br>        <span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;<br>            timestamp = timeGen();<br>        &#125;<br>        <span class="hljs-keyword">return</span> timestamp;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回以毫秒为单位的当前时间</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前时间(毫秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">timeGen</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据数据生成信息序列</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 信息序列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">infoGen</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> PinYinUtil.getDataHeadChar(data);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> string2long(s);<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将字符串转换为long，每个字符对应5位</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 信息序列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">string2long</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-type">char</span>[] cs = str.toCharArray();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">lo</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cs.length; i++) &#123;<br>            lo = lo &lt;&lt; <span class="hljs-number">5</span>;<br>            <span class="hljs-keyword">if</span> (cs[i] != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                lo += cs[i] - <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> lo;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">idDecoder</span><span class="hljs-params">(<span class="hljs-type">long</span> id)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestampFilter</span> <span class="hljs-operator">=</span> (-<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; timestampBits) &lt;&lt; timestampShift);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdFilter</span> <span class="hljs-operator">=</span> (-<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; datacenterIdBits) &lt;&lt; datacenterIdShift);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">workerIdFilter</span> <span class="hljs-operator">=</span> (-<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits) &lt;&lt; workerIdShift);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">sequenceFilter</span> <span class="hljs-operator">=</span> (-<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits) &lt;&lt; sequenceShift);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">infoFilter</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; infoBits);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">ts</span> <span class="hljs-operator">=</span> ((id &amp; timestampFilter) &gt;&gt; timestampShift) + startTimestamp;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> (id &amp; datacenterIdFilter) &gt;&gt; datacenterIdShift;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">wid</span> <span class="hljs-operator">=</span> (id &amp; workerIdFilter) &gt;&gt; workerIdShift;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">seq</span> <span class="hljs-operator">=</span> (id &amp; sequenceFilter) &gt;&gt; sequenceShift;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> id &amp; infoFilter;<br>        System.out.println(<span class="hljs-string">&quot;time: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(ts)));<br>        System.out.println(<span class="hljs-string">&quot;datacenter id: &quot;</span> + did);<br>        System.out.println(<span class="hljs-string">&quot;worker id: &quot;</span> + wid);<br>        System.out.println(<span class="hljs-string">&quot;sequence: &quot;</span> + seq);<br>        System.out.println(<span class="hljs-string">&quot;data: &quot;</span> + PinYinUtil.getDataFromLong(info));<br>    &#125;<br><br>    <span class="hljs-comment">// ==============================Test=============================================</span><br>    <span class="hljs-comment">/** 测试 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MySnowflakeIdWorker</span> <span class="hljs-variable">idWorker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySnowflakeIdWorker</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> idWorker.nextId(<span class="hljs-string">&quot;你好谢谢&quot;</span>);<br>        System.out.println(l);<br>        System.out.println(Long.toBinaryString(l));<br>        idWorker.idDecoder(l);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> net.sourceforge.pinyin4j.PinyinHelper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PinYinUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">dataWord</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><br>    <span class="hljs-comment">/* 去掉字符串中的其他符号，值保留英文和中文 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">string2AllTrim</span><span class="hljs-params">(String value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isNull(value)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> value.replaceAll(<span class="hljs-string">&quot;[^a-zA-Z\u4e00-\u9fa5]&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* 判断字符串是否为空 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNull</span><span class="hljs-params">(Object strData)</span> &#123;<br>        <span class="hljs-keyword">if</span> (strData == <span class="hljs-literal">null</span> || String.valueOf(strData).trim().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* 提取每个汉字的首字母(小写) */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getPinYinHeadChar</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isNull(str)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">convert</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; str.length(); j++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> str.charAt(j);<br>            <span class="hljs-comment">// 提取汉字的首字母</span><br>            String[] pinyinArray = PinyinHelper.toHanyuPinyinStringArray(word);<br>            <span class="hljs-keyword">if</span> (pinyinArray != <span class="hljs-literal">null</span>) &#123;<br>                convert += pinyinArray[<span class="hljs-number">0</span>].charAt(<span class="hljs-number">0</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                convert += word;<br>            &#125;<br>        &#125;<br><br>        convert = string2AllTrim(convert);<br>        <span class="hljs-keyword">return</span> convert.toLowerCase();<br>    &#125;<br><br>    <span class="hljs-comment">/* 获取数据的首字母，长度为4，多则删除少则空格填补 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getDataHeadChar</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> PinYinUtil.getPinYinHeadChar(str);<br>        <span class="hljs-keyword">if</span> (s.length() &lt; dataWord) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataWord - s.length(); i++) &#123;<br>                s += <span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.length() &gt; dataWord) &#123;<br>            s = s.substring(<span class="hljs-number">0</span>, dataWord);<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-comment">/* 将long信息序列转换为字母字符串 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">long2InfoString</span><span class="hljs-params">(<span class="hljs-type">long</span> lo)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; <span class="hljs-number">5</span>);<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">while</span> (lo != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (lo &amp; filter);<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>                info.append(c);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;a&#x27;</span> + n - <span class="hljs-number">1</span>);<br>                info.append(c);<br>            &#125;<br>            lo = lo &gt;&gt; <span class="hljs-number">5</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> info.reverse().toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getDataFromLong</span><span class="hljs-params">(<span class="hljs-type">long</span> lo)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> long2InfoString(lo);<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-comment">/* 测试 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(PinYinUtil.getDataHeadChar(<span class="hljs-string">&quot;你好谢谢&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_44740485/article/details/129099951">java获取汉字的首字母_java获取中文首字母_可乐丿不加冰的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode搭建Java环境</title>
    <link href="/blog/posts/b893e3bf/"/>
    <url>/blog/posts/b893e3bf/</url>
    
    <content type="html"><![CDATA[<h1 id="VSCode搭建Java环境"><a href="#VSCode搭建Java环境" class="headerlink" title="VSCode搭建Java环境"></a>VSCode搭建Java环境</h1><h2 id="vscode插件安装"><a href="#vscode插件安装" class="headerlink" title="vscode插件安装"></a>vscode插件安装</h2><p>插件搜索java，安装Extension Pack for Java，包含6个插件</p><p>重启vscode打开新窗口，可以点击左侧explorer里的create java project来创建java项目，根据需要选择项目类型</p><h2 id="java编译与运行"><a href="#java编译与运行" class="headerlink" title="java编译与运行"></a>java编译与运行</h2><p>不使用插件编译运行的方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编译</span><br>javac xxx.java<br><span class="hljs-comment"># 指定源文件使用的字符编码进行编译</span><br>javac -encoding [utf-8/gbk] xxx.java<br><span class="hljs-comment"># 运行</span><br>java xxx<br></code></pre></td></tr></table></figure><h2 id="maven项目配置"><a href="#maven项目配置" class="headerlink" title="maven项目配置"></a>maven项目配置</h2><p>maven官网：<a href="https://maven.apache.org/%EF%BC%8C%E7%82%B9%E5%87%BB%E5%B7%A6%E4%BE%A7%E7%9A%84download%EF%BC%8C%E4%B8%8B%E8%BD%BDBinary">https://maven.apache.org/</a> ，点击左侧的download，下载Binary zip archive并解压</p><p>打开windows的高级系统设置，环境变量，双击系统变量中的Path进行编辑，点击新建，填入maven的bin目录的绝对路径，如D:\maven\apache-maven-3.9.2\bin，点击编辑环境变量和环境变量窗口的确定</p><p>win+R输入cmd，打开命令行窗口，输入mvn -v可以输出maven的信息，说明已配置好</p><p>打开vscode设置，搜索Maven.Executable.Path，填入maven的bin目录下的mvn.cmd的绝对路径，如D:\maven\apache-maven-3.9.2\bin\mvn.cmd</p><p>创建maven项目时，可以选择archetype原型来创建，创建好后，explorer栏的最下方有maven插件可以管理项目</p><p>添加依赖时，可以去maven官网<a href="https://mvnrepository.com/%EF%BC%8C%E6%90%9C%E7%B4%A2%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85%EF%BC%8C%E9%80%89%E6%8B%A9%E5%AF%B9%E5%BA%94%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81">https://mvnrepository.com/，搜索需要的包，选择对应的版本，可以下载和复制代码</a></p><p><img src="/blog/posts/b893e3bf/maven%E4%BE%9D%E8%B5%96.png"></p><h2 id="关于java中文乱码"><a href="#关于java中文乱码" class="headerlink" title="关于java中文乱码"></a>关于java中文乱码</h2><p>参考<a href="https://blog.csdn.net/m0_74075298/article/details/128607966">Java中文乱码浅析及解决方案_浩绪的博客-CSDN博客</a></p><p>java中文乱码与以下几个编码格式的设置有关：</p><ol><li><p>java编译器自动选择的编码格式</p></li><li><p>输出终端的编码格式</p></li><li><p>代码文件的编码格式</p></li><li><p>（如果Gradle开发）Gradle项目配置中的编码格式</p></li></ol><p>这些设置如果不一致，或者不同但没有合适的转换，就会导致中文乱码</p><h3 id="java编译器自动选择的编码格式"><a href="#java编译器自动选择的编码格式" class="headerlink" title="java编译器自动选择的编码格式"></a>java编译器自动选择的编码格式</h3><p>取决于操作系统和地区语言设置，无法自行改变，win11中文版为gbk编码</p><h3 id="输出终端的编码格式"><a href="#输出终端的编码格式" class="headerlink" title="输出终端的编码格式"></a>输出终端的编码格式</h3><p>cmd中输入chcp可以查看编码格式</p><p>65001为utf-8编码</p><p>936为gbk编码</p><p>该编码格式应与java编译器的编码格式一致，可以使用<code>chcp xxx</code>改变</p><h3 id="代码文件的编码格式"><a href="#代码文件的编码格式" class="headerlink" title="代码文件的编码格式"></a>代码文件的编码格式</h3><p>通常为utf-8，开发工具的下方都有显示</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><strong>源文件UTF-8+编译指定UTF-8+Java编译器GBK（固定）+输出终端GBK</strong></p><ol><li><p>编译时指定的源文件字符编码应与源文件编码格式一致</p></li><li><p>输出终端的编码格式应与java编译器的编码格式一致</p></li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 指定源文件使用的字符编码为utf-8，然后进行编译</span><br><span class="hljs-keyword">javac </span>-encoding utf<span class="hljs-number">-8</span> xxx.<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span><span class="hljs-comment"># 由于java编译器自动选择gbk编码格式，因此将输出终端的编码格式也改为gbk（以cmd为例）</span><br>chcp <span class="hljs-number">936</span><br><span class="hljs-comment"># 运行java文件</span><br><span class="hljs-keyword">java </span>xxx <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语言基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Socket聊天程序（Java）</title>
    <link href="/blog/posts/545a2897/"/>
    <url>/blog/posts/545a2897/</url>
    
    <content type="html"><![CDATA[<h1 id="Socket聊天程序（Java）"><a href="#Socket聊天程序（Java）" class="headerlink" title="Socket聊天程序（Java）"></a>Socket聊天程序（Java）</h1><p>大三网络实验课写的</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ol><li><p>实现了一个基于TCP协议、Client/Server模式的聊天程序，相当于一个多人聊天室。</p></li><li><p>该聊天室允许多位用户同时在聊天室文本交流、传输文件和接受文件。</p></li><li><p>该聊天室支持离线文件和断点续传。</p></li></ol><h2 id="客户端与服务器功能"><a href="#客户端与服务器功能" class="headerlink" title="客户端与服务器功能"></a>客户端与服务器功能</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><img src="/blog/posts/545a2897/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8A%9F%E8%83%BD.png"></p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>服务器程序（Server.java）设置了sockets队列，用来存储连接的socket。服务器创建服务端，开放端口后，在while循环里不断地阻塞等待用户的连接，当用户连接后，将该socket放入sockets队列里，并启动一个新的服务器线程ServerThread为该socket服务。使用服务器线程的方法使服务器允许多用户连接。<br>服务器线程程序（ServerThread.java）进行用户与服务器连接后的工作。服务器线程程序处理用户在线的整个过程，主要提供用户登录、用户基本文字聊天、用户之间传输文件（包括二进制大文件）、离线文件和断点续传等功能。实现方法如下：</p><ol><li><p>用户登录功能：服务器将已经注册的用户名和密码存储在account_password.txt文件中，若用户登录时发送用户名和密码，服务器将其与存储的用户名密码进行匹配，若匹配成功则发送“登录成功”提示，用户可以继续进行后续操作，否则，发送“登录失败！账号或密码有误！”提示，并关闭该socket，用户则无法进行后续操作。</p></li><li><p>用户基本文字聊天功能：服务器阻塞等待接收用户的输入，一旦收到输入，则判断是否为文件操作，否则将在输入的字符串前加上该用户的ip地址和端口组成新的消息，然后给sockets队列加锁，防止对sockets队列的使用产生冲突，加锁成功后向sockets队列里所有连接的socket发送该消息。通过该方法提供聊天室功能，即一位用户发送的消息所有在线用户都能收到。</p></li><li><p>用户之间传输文件（包括二进制大文件）功能：服务器对用户每次的输入进行判断，若为发送文件，则打开接收文件的端口，与用户连接，启动ReceiveFileServerThread在新连接的socket上接收用户发送的文件，若为接收文件，则同理打开发送文件的端口，与用户连接，启动SendFileServerThread在新连接的socket上发送给用户所请求的文件。通过将聊天、发送文件、接收文件的端口分开，可以使用户同时进行聊天、发送文件、接收文件的多个操作，并且发送文件和接收文件使用多线程运行，因此用户可以同时发送和接收多个文件。</p></li><li><p>离线文件功能：服务器通过将用户上传的文件存放在本地的方法提供离线文件功能，用户若想接收不在线时别的用户发送的文件，只需向服务器发送下载请求即可，相对的，若用户发送文件的对象不在线，也可上传文件提供发送对象下载。</p></li><li><p>断点续传功能：服务器在接收文件的过程中，是对该文件的.temp文件进行写入，当文件接收完毕时，才将文件改为正式文件。通过.temp文件方法，可以判断文件是否传输完毕，若某次传输中断，再次传输时，服务器在本地发现了同名的.temp文件，即可知道上次文件未传输完毕，于是在断点位置继续写入，避免了已接收内容的重复接收。</p></li></ol><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><h3 id="客户端连接与断开服务器"><a href="#客户端连接与断开服务器" class="headerlink" title="客户端连接与断开服务器"></a>客户端连接与断开服务器</h3><p>当启动客户端程序后，该用户界面自动弹出，并且已经默认填写好服务器IP、端口和默认的用户名密码，点击连接后，若连接成功，则会弹出连接成功的提示，若连接失败，则会弹出连接失败的提示。点击断开按钮即可断开与服务器的连接，退出聊天室。</p><p><img src="/blog/posts/545a2897/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png"></p><p>该过程在服务器后台有着相应的消息显示。</p><p><img src="/blog/posts/545a2897/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E%E5%8F%B0%E8%BF%9E%E6%8E%A5%E6%B6%88%E6%81%AF.png"></p><p>在客户端抓包，可以看见本机与服务器的连接。基本聊天功能连接的是服务器的6655端口。并且可以捕获到服务器与主机的信息交互，如用户名密码的发送等等。</p><p><img src="/blog/posts/545a2897/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E6%8A%93%E5%8C%85.png"></p><p><img src="/blog/posts/545a2897/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E6%8A%93%E5%8C%85%E4%BF%A1%E6%81%AF.png"></p><p>服务器上抓包。</p><p><img src="/blog/posts/545a2897/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9E%E6%8E%A5%E6%8A%93%E5%8C%85%E4%BF%A1%E6%81%AF.png"></p><h3 id="用户之间的聊天"><a href="#用户之间的聊天" class="headerlink" title="用户之间的聊天"></a>用户之间的聊天</h3><p>用户的聊天以IP地址、端口号、用户名与消息的形式发送给所有在线用户。若用户试图发送空的消息，则会弹出消息不能为空的提示。</p><p><img src="/blog/posts/545a2897/%E8%81%8A%E5%A4%A9.png"></p><p>该过程在服务器后台有着相应的消息显示。</p><p><img src="/blog/posts/545a2897/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E%E5%8F%B0%E8%81%8A%E5%A4%A9%E6%B6%88%E6%81%AF.png"></p><p>在客户端抓包，可以看见本机与服务器消息交互的数据包。在服务器抓包，可以在Data字段里看见服务器转发给客户端的消息。</p><p><img src="/blog/posts/545a2897/%E8%81%8A%E5%A4%A9%E6%8A%93%E5%8C%85.png"></p><h3 id="用户之间的文件传输"><a href="#用户之间的文件传输" class="headerlink" title="用户之间的文件传输"></a>用户之间的文件传输</h3><p>用户点击上传文件按钮时，就弹出选择文件窗口。</p><p><img src="/blog/posts/545a2897/%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6.png"></p><p>当选择好文件，点击打开或按回车时，开始发送文件。发送过程中会有文件传输窗口。当文件传输完成时也有相应的提示，并且显示1秒后自动关闭。</p><p><img src="/blog/posts/545a2897/%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6.png"></p><p>传输完成后所有在线用户可以看见服务器发送的消息。</p><p><img src="/blog/posts/545a2897/%E7%94%A8%E6%88%B7%E7%9C%8B%E8%A7%81%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%B6%88%E6%81%AF.png"></p><p>服务器显示用户传输文件的消息。</p><p><img src="/blog/posts/545a2897/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6%E6%B6%88%E6%81%AF.png"></p><p>其他所有用户会弹出文件接收提示窗口。选择是后开始接收文件。同样接收成功后也会有相应的接收成功提示，并且显示1秒后自动关闭。</p><p><img src="/blog/posts/545a2897/%E6%98%AF%E5%90%A6%E6%8E%A5%E6%94%B6%E6%96%87%E4%BB%B6%E6%8F%90%E7%A4%BA.png"></p><p>接收完成后所有在线用户可以看见服务器发送的消息。</p><p><img src="/blog/posts/545a2897/%E7%94%A8%E6%88%B7%E7%9C%8B%E8%A7%81%E6%96%87%E4%BB%B6%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF.png"></p><p>服务器显示用户接收文件的消息。</p><p><img src="/blog/posts/545a2897/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E6%94%B6%E6%96%87%E4%BB%B6%E6%B6%88%E6%81%AF.png"></p><p>在客户端抓包，可以看见本机与服务器文件传输的数据包。文件发送连接的是服务器的8822端口，文件接收连接的是服务器的9911端口。在数据包中可以看出文件是以二进制的形式传输。</p><h3 id="离线文件和断电续传"><a href="#离线文件和断电续传" class="headerlink" title="离线文件和断电续传"></a>离线文件和断电续传</h3><p>用户点击下载文件按钮，即弹出下载文件输入窗口。输入要下载的文件名后，开始下载离线文件，服务器以本地的文件进行发送。过程同用户接收文件。</p><p><img src="/blog/posts/545a2897/%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6.png"><br>在客户端抓包。此时为客户端接收文件，连接的是服务器的9911端口。传输的同样为二进制数据。</p><p>当用户在传输过程中点击取消按钮，则取消发送文件，会有取消发送的提示窗口。在服务器存放文件的目录下会有该文件的.temp文件。</p><p><img src="/blog/posts/545a2897/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6.png"></p><p>当下次继续发送该文件时，直接从上次断点位置开始，直观显示为进度条为上次中断的位置。</p><p>通过抓包可以看出，取消发送后，客户端断开了与服务器8822断开的连接，当继续上传文件时，再次建立连接。通过断点信息交互后继续从断点位置开始传输文件。</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>用户输入的用户名密码不正确，用户重复连接，用户重复断开，用户发送空消息等错误操作都会弹出相应的提示窗口，并且不会断开与服务器的连接。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="Client-java"><a href="#Client-java" class="headerlink" title="Client.java"></a>Client.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mysocket2;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><span class="hljs-keyword">import</span> java.awt.event.WindowAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.WindowEvent;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> javax.swing.border.TitledBorder;<br><span class="hljs-keyword">import</span> javax.swing.event.ListSelectionEvent;<br><span class="hljs-keyword">import</span> javax.swing.event.ListSelectionListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-comment">//private String SERVER_IP=&quot;127.0.0.1&quot;;</span><br>    <span class="hljs-keyword">private</span> String SERVER_IP=<span class="hljs-string">&quot;121.36.14.65&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> SERVER_PORT=<span class="hljs-number">6655</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> SERVER_FILE_SEND_PORT=<span class="hljs-number">8822</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> SERVER_FILE_RECEIVE_PORT=<span class="hljs-number">9911</span>;<br><br>    <span class="hljs-keyword">private</span> JPanel sendPanel;<br>    <span class="hljs-keyword">private</span> JButton btn_send_file;<br>    <span class="hljs-keyword">private</span> JButton btn_download_file;<br>    <span class="hljs-keyword">private</span> JFrame frame;<br>    <span class="hljs-keyword">private</span> JTextArea textArea;<br>    <span class="hljs-keyword">private</span> JTextField textField;<br>    <span class="hljs-keyword">private</span> JTextField txt_port;<br>    <span class="hljs-keyword">private</span> JTextField txt_hostIp;<br>    <span class="hljs-keyword">private</span> JTextField txt_username;<br>    <span class="hljs-keyword">private</span> JTextField txt_userpwd;<br>    <span class="hljs-keyword">private</span> JButton btn_start;<br>    <span class="hljs-keyword">private</span> JButton btn_stop;<br>    <span class="hljs-keyword">private</span> JButton btn_send;<br>    <span class="hljs-keyword">private</span> JPanel northPanel;<br>    <span class="hljs-keyword">private</span> JPanel southPanel;<br>    <span class="hljs-keyword">private</span> JScrollPane rightScroll;<br>    <span class="hljs-keyword">private</span> JScrollPane leftScroll;<br>    <span class="hljs-keyword">private</span> JSplitPane centerSplit;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isConnected</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">private</span> PrintWriter writer;<br>    <span class="hljs-keyword">private</span> BufferedReader reader;<br>    <span class="hljs-keyword">private</span> MessageThread messageThread;<span class="hljs-comment">// 负责接收消息的线程</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Client</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// GUI</span><br>        textArea = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JTextArea</span>();<br>        textArea.setEditable(<span class="hljs-literal">false</span>);<br>        textArea.setForeground(Color.blue);<br>        textField = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JTextField</span>();<br>        txt_port = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JTextField</span>(<span class="hljs-string">&quot;6655&quot;</span>);<br>        <span class="hljs-comment">//txt_hostIp = new JTextField(&quot;127.0.0.1&quot;);</span><br>        txt_hostIp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JTextField</span>(<span class="hljs-string">&quot;121.36.14.65&quot;</span>);<br>        txt_username = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JTextField</span>(<span class="hljs-string">&quot;asd&quot;</span>);<br>        txt_userpwd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JTextField</span>(<span class="hljs-string">&quot;123&quot;</span>);<br>        btn_start = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;连接&quot;</span>);<br>        btn_stop = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;断开&quot;</span>);<br>        btn_send = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;发送&quot;</span>);<br>        btn_send_file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;上传文件&quot;</span>);<br>        btn_download_file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;下载文件&quot;</span>);<br>        northPanel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<br>        northPanel.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GridLayout</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>        northPanel.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;服务器IP&quot;</span>));<br>        northPanel.add(txt_hostIp);<br>        northPanel.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;端口&quot;</span>));<br>        northPanel.add(txt_port);<br>        northPanel.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;用户名&quot;</span>));<br>        northPanel.add(txt_username);<br>        northPanel.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;密码&quot;</span>));<span class="hljs-comment">//</span><br>        northPanel.add(txt_userpwd);<br>        northPanel.add(btn_start);<br>        northPanel.add(btn_stop);<br>        northPanel.setBorder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TitledBorder</span>(<span class="hljs-string">&quot;连接信息&quot;</span>));<br>        rightScroll = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JScrollPane</span>(textArea);<br>        rightScroll.setBorder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TitledBorder</span>(<span class="hljs-string">&quot;消息显示区&quot;</span>));<br>        southPanel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BorderLayout</span>());<br>        sendPanel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BorderLayout</span>());<br>        southPanel.setBorder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TitledBorder</span>(<span class="hljs-string">&quot;写消息&quot;</span>));<br>        southPanel.add(textField, <span class="hljs-string">&quot;Center&quot;</span>);<br>        sendPanel.add(btn_send, BorderLayout.NORTH);<br>        sendPanel.add(btn_send_file, BorderLayout.CENTER);<br>        sendPanel.add(btn_download_file, BorderLayout.SOUTH);<br>        southPanel.add(sendPanel, <span class="hljs-string">&quot;East&quot;</span>);<br>        centerSplit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSplitPane</span>(JSplitPane.HORIZONTAL_SPLIT, leftScroll, rightScroll);<br>        centerSplit.setDividerLocation(<span class="hljs-number">150</span>);<br>        frame = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>(<span class="hljs-string">&quot;客户机&quot;</span>);<br>        frame.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BorderLayout</span>());<br>        frame.add(northPanel, <span class="hljs-string">&quot;North&quot;</span>);<br>        frame.add(centerSplit, <span class="hljs-string">&quot;Center&quot;</span>);<br>        frame.add(southPanel, <span class="hljs-string">&quot;South&quot;</span>);<br>        frame.setSize(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">screen_width</span> <span class="hljs-operator">=</span> Toolkit.getDefaultToolkit().getScreenSize().width;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">screen_height</span> <span class="hljs-operator">=</span> Toolkit.getDefaultToolkit().getScreenSize().height;<br>        frame.setLocation((screen_width - frame.getWidth()) / <span class="hljs-number">2</span>, (screen_height - frame.getHeight()) / <span class="hljs-number">2</span>);<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 写消息的文本框中按回车键时事件</span><br>        textField.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>                send();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 单击发送按钮时事件</span><br>        btn_send.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>                send();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 单击文件按钮时事件</span><br>        btn_send_file.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>                sendFile();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 单击下载按钮时事件</span><br>        btn_download_file.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">fn</span> <span class="hljs-operator">=</span> JOptionPane.showInputDialog(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;请输入要下载的文件名：&quot;</span>,<span class="hljs-string">&quot;下载文件&quot;</span>,JOptionPane.PLAIN_MESSAGE);<br>                textArea.append(<span class="hljs-string">&quot;接收文件：&quot;</span> + fn + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>                sendMessage(frame.getTitle() + <span class="hljs-string">&quot;接收文件：&quot;</span> + fn);<br>                <span class="hljs-type">ReceiveFileClientThread</span> <span class="hljs-variable">rfct_download</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReceiveFileClientThread</span>(SERVER_IP, SERVER_FILE_RECEIVE_PORT, fn);<br>                rfct_download.start();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 单击连接按钮时事件</span><br>        btn_start.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>                <span class="hljs-keyword">if</span>(isConnected)&#123;<br>                    JOptionPane.showMessageDialog(frame, <span class="hljs-string">&quot;已经连接！&quot;</span>, <span class="hljs-string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> Integer.parseInt(txt_port.getText().trim());<br>                <span class="hljs-type">String</span> <span class="hljs-variable">hostIp</span> <span class="hljs-operator">=</span> txt_hostIp.getText().trim();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> txt_username.getText().trim();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">userpwd</span> <span class="hljs-operator">=</span> txt_userpwd.getText().trim();<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> connectServer(port, hostIp, username, userpwd);<br>                <span class="hljs-keyword">if</span>(flag)&#123;<br>                    frame.setTitle(username);<br>                    JOptionPane.showMessageDialog(frame, <span class="hljs-string">&quot;连接成功!&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    JOptionPane.showMessageDialog(frame, <span class="hljs-string">&quot;连接失败!&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 单击断开按钮时事件</span><br>        btn_stop.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>                <span class="hljs-keyword">if</span>(!isConnected)&#123;<br>                    JOptionPane.showMessageDialog(frame, <span class="hljs-string">&quot;已经断开！&quot;</span>, <span class="hljs-string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> closeConnection();<br>                <span class="hljs-keyword">if</span>(flag == <span class="hljs-literal">false</span>)&#123;<br>                    JOptionPane.showMessageDialog(frame, <span class="hljs-string">&quot;断开失败！&quot;</span>, <span class="hljs-string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);<br>                &#125;<br>                JOptionPane.showMessageDialog(frame, <span class="hljs-string">&quot;断开成功!&quot;</span>);<br>                textArea.setText(<span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 关闭窗口事件</span><br>        frame.addWindowListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br>                <span class="hljs-keyword">if</span>(isConnected)&#123;<br>                    closeConnection();<span class="hljs-comment">// 关闭连接</span><br>                &#125;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">// 发送消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!isConnected) &#123;<br>            JOptionPane.showMessageDialog(frame, <span class="hljs-string">&quot;还没有连接服务器，无法发送消息！&quot;</span>, <span class="hljs-string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> textField.getText().trim();<br>        <span class="hljs-keyword">if</span> (message == <span class="hljs-literal">null</span> || message.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            JOptionPane.showMessageDialog(frame, <span class="hljs-string">&quot;消息不能为空！&quot;</span>, <span class="hljs-string">&quot;错误&quot;</span>, JOptionPane.ERROR_MESSAGE);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        sendMessage(frame.getTitle() + <span class="hljs-string">&quot;:&quot;</span> + message);<br>        textField.setText(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 发送文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendFile</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JFileChooser</span> <span class="hljs-variable">sourceFileChooser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFileChooser</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>        sourceFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> sourceFileChooser.showOpenDialog(frame);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pathname</span> <span class="hljs-operator">=</span> sourceFileChooser.getSelectedFile().getPath();<br>        <span class="hljs-type">File</span> <span class="hljs-variable">sourceFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(pathname);<br>        textArea.append(<span class="hljs-string">&quot;发送文件：&quot;</span> + sourceFile.getName() + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>        sendMessage(frame.getTitle() + <span class="hljs-string">&quot;发送文件：&quot;</span> + sourceFile.getName());<br>        <span class="hljs-type">SendFileClientThread</span> <span class="hljs-variable">sfct</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendFileClientThread</span>(SERVER_IP, SERVER_FILE_SEND_PORT, pathname);<br>        sfct.start();<br>    &#125;<br><br>    <span class="hljs-comment">// 连接服务器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">connectServer</span><span class="hljs-params">(<span class="hljs-type">int</span> port, String hostIp, String username, String userpwd)</span> &#123;<br>        <span class="hljs-comment">// 连接服务器</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(hostIp, port);<span class="hljs-comment">// 根据端口号和服务器ip建立连接</span><br>            reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br>            writer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(socket.getOutputStream());<br>            <span class="hljs-comment">///////////////</span><br>            ObjectOutputStream oos=    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>            User u=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(username, userpwd);<br>            oos.writeObject(u);<br>            <span class="hljs-comment">/////////////////</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">login_message</span> <span class="hljs-operator">=</span> reader.readLine();<br>            textArea.append(login_message + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>            <span class="hljs-keyword">if</span>(login_message.contains(<span class="hljs-string">&quot;成功&quot;</span>))&#123;<br>                <span class="hljs-comment">// 开启接收消息的线程</span><br>                messageThread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageThread</span>(reader, textArea);<br>                messageThread.start();<br>                isConnected = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 已经连接上了</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                isConnected = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                textArea.append(<span class="hljs-string">&quot;与端口号为：&quot;</span> + port + <span class="hljs-string">&quot;    IP地址为：&quot;</span> + hostIp + <span class="hljs-string">&quot;   的服务器连接失败!&quot;</span> + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>                isConnected = <span class="hljs-literal">false</span>;<span class="hljs-comment">// 未连接上</span><br>                e.printStackTrace();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 接收服务器消息</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>        <span class="hljs-keyword">private</span> BufferedReader reader;<br>        <span class="hljs-keyword">private</span> JTextArea textArea;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MessageThread</span><span class="hljs-params">(BufferedReader reader, JTextArea textArea)</span>&#123;<br>            <span class="hljs-built_in">this</span>.reader = reader;<br>            <span class="hljs-built_in">this</span>.textArea = textArea;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    message = reader.readLine();<br>                    <span class="hljs-keyword">if</span>(message!=<span class="hljs-literal">null</span>) &#123;<br>                        textArea.append(message + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>                        <span class="hljs-keyword">if</span> (message.contains(<span class="hljs-string">&quot;发送文件：&quot;</span>)) &#123;<br>                            <span class="hljs-keyword">if</span> (!message.contains(frame.getTitle())) &#123;<br>                                String[] m = message.split(<span class="hljs-string">&quot;发送文件：&quot;</span>);<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">fn</span> <span class="hljs-operator">=</span> m[<span class="hljs-number">1</span>];<br>                                <span class="hljs-type">int</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> JOptionPane.showConfirmDialog(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;是否接收文件&quot;</span> + fn + <span class="hljs-string">&quot;？&quot;</span>, <span class="hljs-string">&quot;文件接收提示&quot;</span>, JOptionPane.YES_NO_OPTION);<br>                                <span class="hljs-keyword">if</span> (option == JOptionPane.YES_OPTION) &#123;<br>                                    textArea.append(<span class="hljs-string">&quot;接收文件：&quot;</span> + fn + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>                                    sendMessage(frame.getTitle() + <span class="hljs-string">&quot;接收文件：&quot;</span> + fn);<br>                                    <span class="hljs-type">ReceiveFileClientThread</span> <span class="hljs-variable">rfct</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReceiveFileClientThread</span>(SERVER_IP, SERVER_FILE_RECEIVE_PORT, fn);<br>                                    rfct.start();<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 向服务器发送消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        writer.println(message);<br>        writer.flush();<br>    &#125;<br><br>    <span class="hljs-comment">// 断开连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">closeConnection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>        sendMessage(<span class="hljs-string">&quot;CLOSE&quot;</span>);<span class="hljs-comment">// 发送断开连接命令给服务器</span><br>        messageThread.stop();<span class="hljs-comment">// 停止接受消息线程</span><br>        <span class="hljs-comment">// 释放资源</span><br>        <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>) &#123;<br>            reader.close();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (writer != <span class="hljs-literal">null</span>) &#123;<br>            writer.close();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (socket != <span class="hljs-literal">null</span>) &#123;<br>            socket.close();<br>        &#125;<br>        isConnected = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e1) &#123;<br>            e1.printStackTrace();<br>            isConnected = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SendFileClientThread-java"><a href="#SendFileClientThread-java" class="headerlink" title="SendFileClientThread.java"></a>SendFileClientThread.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mysocket2;<br><br><span class="hljs-keyword">import</span> javafx.scene.control.Labeled;<br><br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendFileClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    String server_ip;<br>    <span class="hljs-type">int</span> server_port;<br>    String pn;<br><br>    JFrame jframe;<br>    Container contentPanel;<br>    JProgressBar progressbar;<br>    JLabel label;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SendFileClientThread</span><span class="hljs-params">(String server_ip, <span class="hljs-type">int</span> server_port, String pn)</span> &#123;<br>        <span class="hljs-built_in">this</span>.server_ip = server_ip;<br>        <span class="hljs-built_in">this</span>.server_port = server_port;<br>        <span class="hljs-built_in">this</span>.pn = pn;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        FileInputStream fis;<br>        DataInputStream dis;<br>        DataOutputStream dos;<br>        <span class="hljs-keyword">try</span> &#123;<br>            jframe = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>(<span class="hljs-string">&quot;文件传输&quot;</span>);<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(server_ip, server_port);<br>            File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(pn);<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>            <span class="hljs-comment">//BufferedInputStream bi=new BufferedInputStream(new InputStreamReader(new FileInputStream(file),&quot;GBK&quot;));</span><br>            dis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(socket.getInputStream());<br>            dos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(socket.getOutputStream());<span class="hljs-comment">//client.getOutputStream()返回此套接字的输出流</span><br>            <span class="hljs-comment">//文件名、大小等属性</span><br>            dos.writeUTF(file.getName());<br>            dos.flush();<br>            dos.writeLong(file.length());<br>            dos.flush();<br>            <span class="hljs-comment">///////////////</span><br>            <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">rad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(pn, <span class="hljs-string">&quot;r&quot;</span>);<br>            <span class="hljs-type">long</span> size=dis.readLong();<span class="hljs-comment">//读取文件已发送的大小</span><br>            dos.writeLong(rad.length());<span class="hljs-comment">//完整文件大小</span><br>            dos.flush();<br>            <span class="hljs-comment">//开始传输的位置</span><br>            <span class="hljs-type">long</span> offset=size;<br>            <span class="hljs-comment">// 文件分块</span><br>            <span class="hljs-type">int</span> barSize=(<span class="hljs-type">int</span>) (rad.length()/<span class="hljs-number">1024</span>);<br>            <span class="hljs-type">int</span> barOffset=(<span class="hljs-type">int</span>)(offset/<span class="hljs-number">1024</span>);<br><br>            <span class="hljs-comment">//传输界面</span><br>            jframe.setSize(<span class="hljs-number">380</span>,<span class="hljs-number">120</span>);<br>            contentPanel = jframe.getContentPane();<br>            contentPanel.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BoxLayout</span>(contentPanel, BoxLayout.Y_AXIS));<br>            progressbar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JProgressBar</span>();<span class="hljs-comment">//进度条</span><br>            label = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(file.getName()+<span class="hljs-string">&quot; 发送中&quot;</span>);<br>            contentPanel.add(label);<br>            progressbar.setOrientation(JProgressBar.HORIZONTAL);<br>            progressbar.setMinimum(<span class="hljs-number">0</span>);<br>            progressbar.setMaximum(barSize);<br>            progressbar.setValue(barOffset);<br>            progressbar.setStringPainted(<span class="hljs-literal">true</span>);<br>            progressbar.setPreferredSize(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(<span class="hljs-number">150</span>, <span class="hljs-number">20</span>));<br>            progressbar.setBorderPainted(<span class="hljs-literal">true</span>);<br>            progressbar.setBackground(Color.pink);<br>            JButton cancel=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;取消&quot;</span>);<br>            JPanel barPanel=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<br>            barPanel.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FlowLayout</span>(FlowLayout.LEFT));<br>            barPanel.add(progressbar);<br>            barPanel.add(cancel);<br>            contentPanel.add(barPanel);<br>            cancel.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CancelActionListener</span>(label,dis,dos,rad,jframe,socket));<br>            <span class="hljs-comment">//jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">screen_width</span> <span class="hljs-operator">=</span> Toolkit.getDefaultToolkit().getScreenSize().width;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">screen_height</span> <span class="hljs-operator">=</span> Toolkit.getDefaultToolkit().getScreenSize().height;<br>            jframe.setLocation((screen_width - jframe.getWidth()) / <span class="hljs-number">2</span>, (screen_height - jframe.getHeight()) / <span class="hljs-number">2</span>);<br>            jframe.setVisible(<span class="hljs-literal">true</span>);<br><br>            System.out.println(<span class="hljs-string">&quot;发送文件 &quot;</span> + file.getName());<br>            System.out.println(<span class="hljs-string">&quot;######## 开始传输文件 ########&quot;</span>);<br>            <span class="hljs-type">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> length;<br>            <span class="hljs-keyword">if</span> (offset&lt;rad.length()) &#123;<br>                rad.seek(offset);<br>                <span class="hljs-keyword">while</span>((length=rad.read(buf))&gt;<span class="hljs-number">0</span>)&#123;<br>                    dos.write(buf,<span class="hljs-number">0</span>,length);<br>                    progressbar.setValue(++barOffset);<br>                    dos.flush();<br>                &#125;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;######## 文件传输成功 ########&quot;</span>);<br>            label.setText(file.getName()+<span class="hljs-string">&quot; 发送完成&quot;</span>);<br>            dis.close();<br>            dos.close();<br>            rad.close();<br>            sleep(<span class="hljs-number">1000</span>);<br>            <span class="hljs-comment">///////////////</span><br>        &#125;<span class="hljs-keyword">catch</span>(IOException | InterruptedException e)&#123;<br>            label.setText(<span class="hljs-string">&quot; 取消发送,连接关闭&quot;</span>);<br>            <span class="hljs-comment">//e.printStackTrace();</span><br>            <span class="hljs-comment">//System.out.println(&quot;客户端文件传输异常&quot;);</span><br>            <span class="hljs-comment">//JOptionPane.showMessageDialog(frame, &quot;无法发送文件!&quot;, &quot;错误&quot;, JOptionPane.ERROR_MESSAGE);</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            jframe.dispose();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ReceiveFileClientThread-java"><a href="#ReceiveFileClientThread-java" class="headerlink" title="ReceiveFileClientThread.java"></a>ReceiveFileClientThread.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mysocket2;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveFileClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    String server_ip;<br>    <span class="hljs-type">int</span> server_port;<br>    String filename;<br><br>    JFrame jframe;<br>    Container contentPanel;<br>    JProgressBar progressbar;<br>    JLabel label;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReceiveFileClientThread</span><span class="hljs-params">(String server_ip, <span class="hljs-type">int</span> server_port, String filename)</span> &#123;<br>        <span class="hljs-built_in">this</span>.server_ip = server_ip;<br>        <span class="hljs-built_in">this</span>.server_port = server_port;<br>        <span class="hljs-built_in">this</span>.filename = filename;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        DataInputStream dis;<br>        DataOutputStream dos;<br>        <span class="hljs-keyword">try</span> &#123;<br>            jframe=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>(<span class="hljs-string">&quot;接收文件&quot;</span>);<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(server_ip, server_port);<br>            dis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(socket.getInputStream());<br>            dos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(socket.getOutputStream());<br><br>            <span class="hljs-type">File</span> <span class="hljs-variable">directory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./client&quot;</span>);<br>            <span class="hljs-keyword">if</span>(!directory.exists()) &#123;<br>                directory.mkdir();<br>            &#125;<br>            <span class="hljs-comment">// 文件名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fn</span> <span class="hljs-operator">=</span> dis.readUTF();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> directory.getAbsolutePath() + File.separatorChar + filename;<br>            <span class="hljs-comment">// 传输时为.temp文件</span><br>            File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName+<span class="hljs-string">&quot;.temp&quot;</span>);<br>            RandomAccessFile rad=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(fileName+<span class="hljs-string">&quot;.temp&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>);<br>            <span class="hljs-comment">//获得文件大小</span><br>            <span class="hljs-type">long</span> size=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(file.exists()&amp;&amp; file.isFile())&#123;<br>                size=file.length();<br>            &#125;<br>            dos.writeLong(size); <span class="hljs-comment">//发送已接收的大小</span><br>            dos.flush();<br>            <span class="hljs-type">long</span> allSize=dis.readLong(); <span class="hljs-comment">// 完整文件大小</span><br>            <span class="hljs-comment">// 文件分块</span><br>            <span class="hljs-type">int</span> barSize=(<span class="hljs-type">int</span>)(allSize/<span class="hljs-number">1024</span>);<br>            <span class="hljs-type">int</span> barOffset=(<span class="hljs-type">int</span>)(size/<span class="hljs-number">1024</span>);<br><br>            <span class="hljs-comment">//传输界面</span><br>            jframe.setSize(<span class="hljs-number">300</span>,<span class="hljs-number">120</span>);<br>            contentPanel =jframe.getContentPane();<br>            contentPanel.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BoxLayout</span>(contentPanel, BoxLayout.Y_AXIS));<br>            progressbar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JProgressBar</span>();<span class="hljs-comment">//进度条</span><br>            label=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(filename+<span class="hljs-string">&quot; 接收中&quot;</span>);<br>            contentPanel.add(label);<br>            progressbar.setOrientation(JProgressBar.HORIZONTAL);<br>            progressbar.setMinimum(<span class="hljs-number">0</span>);<br>            progressbar.setMaximum(barSize);<br>            progressbar.setValue(barOffset);<br>            progressbar.setStringPainted(<span class="hljs-literal">true</span>);<br>            progressbar.setPreferredSize(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(<span class="hljs-number">150</span>, <span class="hljs-number">20</span>));<br>            progressbar.setBorderPainted(<span class="hljs-literal">true</span>);<br>            progressbar.setBackground(Color.pink);<br>            JButton cancel=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;取消&quot;</span>);<br>            JPanel barPanel=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<br>            barPanel.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FlowLayout</span>(FlowLayout.LEFT));<br>            barPanel.add(progressbar);<br>            barPanel.add(cancel);<br>            contentPanel.add(barPanel);<br>            cancel.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CancelActionListener</span>(label,dis,dos,rad,jframe,socket));<br>            <span class="hljs-comment">//jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">screen_width</span> <span class="hljs-operator">=</span> Toolkit.getDefaultToolkit().getScreenSize().width;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">screen_height</span> <span class="hljs-operator">=</span> Toolkit.getDefaultToolkit().getScreenSize().height;<br>            jframe.setLocation((screen_width - jframe.getWidth()) / <span class="hljs-number">2</span>, (screen_height - jframe.getHeight()) / <span class="hljs-number">2</span>);<br>            jframe.setVisible(<span class="hljs-literal">true</span>);<br><br>            System.out.println(<span class="hljs-string">&quot;######## 开始接收文件 ########&quot;</span>);<br>            rad.seek(size);<br>            <span class="hljs-type">int</span> length;<br>            <span class="hljs-type">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span>((length=dis.read(buf, <span class="hljs-number">0</span>, buf.length))!=-<span class="hljs-number">1</span>)&#123;<br>                rad.write(buf,<span class="hljs-number">0</span>,length);<br>                progressbar.setValue(++barOffset);<br>            &#125;<br>            dis.close();<br>            dos.close();<br>            rad.close();<br>            File f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>            <span class="hljs-comment">// 覆盖已有的文件</span><br>            <span class="hljs-keyword">if</span>(f.exists())&#123;<br>                f.delete();<br>            &#125;<br>            <span class="hljs-comment">// 将.temp文件转为正式文件</span><br>            <span class="hljs-keyword">if</span>(barOffset &gt;= barSize)&#123;<br>                file.renameTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName));<br>            &#125;<br>            <span class="hljs-comment">//////////////</span><br>            System.out.println(<span class="hljs-string">&quot;######## 文件接收成功 [File Name：&quot;</span> + fileName + <span class="hljs-string">&quot;] ########&quot;</span>);<br>            label.setText(filename+<span class="hljs-string">&quot; 接收完成&quot;</span>);<br>            sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//e.printStackTrace();</span><br>            label.setText(<span class="hljs-string">&quot; 已取消接收，连接关闭！&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            jframe.dispose();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mysocket2;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3217779599604368894L</span>;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, String password)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Servers-java"><a href="#Servers-java" class="headerlink" title="Servers.java"></a>Servers.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mysocket2;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Servers</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> SERVER_PORT=<span class="hljs-number">6655</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> SERVER_FILE_SEND_PORT=<span class="hljs-number">8822</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> SERVER_FILE_RECEIVE_PORT=<span class="hljs-number">9911</span>;<br><br>    <span class="hljs-comment">//将接收到的socket变成一个集合</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span>   List&lt;Socket&gt; sockets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<br>    <span class="hljs-comment">//protected static   List&lt;Socket&gt; file_send_sockets = new Vector&lt;&gt;();</span><br>    <span class="hljs-comment">//protected static   List&lt;Socket&gt; file_receive_sockets = new Vector&lt;&gt;();</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建服务端</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(SERVER_PORT);<br>        <span class="hljs-comment">//ServerSocket file_send_server = new ServerSocket(SERVER_FILE_SEND_PORT);</span><br>        <span class="hljs-comment">//ServerSocket file_receive_server = new ServerSocket(SERVER_FILE_RECEIVE_PORT);</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//接受客户端请求</span><br>        <span class="hljs-keyword">while</span> (flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//阻塞等待客户端的连接</span><br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">accept</span> <span class="hljs-operator">=</span> server.accept();<br>                <span class="hljs-keyword">synchronized</span> (sockets)&#123;<br>                    sockets.add(accept);<br>                &#125;<br>                <span class="hljs-comment">//多个服务器线程进行对客户端的响应</span><br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerThead</span>(accept));<br>                thread.start();<br>                <span class="hljs-comment">//捕获异常</span><br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//关闭服务器</span><br>        <span class="hljs-comment">//file_send_server.close();</span><br>        <span class="hljs-comment">//file_receive_server.close();</span><br>        server.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ServerThread-java"><a href="#ServerThread-java" class="headerlink" title="ServerThread.java"></a>ServerThread.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mysocket2;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务器线程，主要来处理多个客户端的请求</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerThead</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">mysocket2</span>.Servers <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    Socket socket;<br>    String socketName;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> SERVER_PORT=<span class="hljs-number">5200</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> SERVER_FILE_SEND_PORT=<span class="hljs-number">8822</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> SERVER_FILE_RECEIVE_PORT=<span class="hljs-number">9911</span>;<br><br>    <span class="hljs-comment">/////////////////////</span><br>    <span class="hljs-comment">/////////////////////</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerThead</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;请求登录...&quot;</span>);<br>        <span class="hljs-comment">//3.获取输入流(对象流)</span><br>        ObjectInputStream ois;<br>        <span class="hljs-comment">//5.获取输出流(数据流)，反馈给客户端登录信息</span><br>        DataOutputStream dos;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ois = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) ois.readObject();<br>            System.out.println(socket.getInetAddress().getHostAddress()+<span class="hljs-string">&quot;请求登录\t用户名：&quot;</span>+user.getName()+<span class="hljs-string">&quot;\t密码：&quot;</span>+user.getPassword());<br>            String str;<br>            <span class="hljs-comment">//对用户名和密码进行验证</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">aps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;src/mysocket2/account_password.txt&quot;</span>));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">apline</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            String[] ap;<br>            <span class="hljs-keyword">while</span>((apline=aps.readLine())!=<span class="hljs-literal">null</span>)<br>            &#123;<br>                ap=apline.split(<span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 空格分隔用户名和密码</span><br>                <span class="hljs-keyword">if</span>(ap[<span class="hljs-number">0</span>].equals(user.getName())&amp;&amp;ap[<span class="hljs-number">1</span>].equals(user.getPassword()))<br>                &#123;<br>                    b = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(b) &#123;<br>                str=user.getName()+<span class="hljs-string">&quot;登录成功！&quot;</span>;<br>                <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(socket.getOutputStream());<br>                pw.println(str);<br>                pw.flush();<br>                <span class="hljs-comment">/////////////////</span><br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br>                <span class="hljs-comment">//设置该客户端的端点地址</span><br>                    socketName = socket.getRemoteSocketAddress().toString();<br>                System.out.println(<span class="hljs-string">&quot;Client@&quot;</span>+socketName+<span class="hljs-string">&quot;已加入聊天&quot;</span>);<br>                print(<span class="hljs-string">&quot;Client@&quot;</span>+socketName+<span class="hljs-string">&quot;已加入聊天&quot;</span>);<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">while</span> (flag)<br>                &#123;<br>                    <span class="hljs-comment">//阻塞，等待该客户端的输出流</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> reader.readLine();<br>                    System.out.println(<span class="hljs-string">&quot;read line &quot;</span>+ line);<br>                    <span class="hljs-comment">//若客户端退出，则退出连接。</span><br>                    <span class="hljs-keyword">if</span> (line == <span class="hljs-literal">null</span>)&#123;<br>                        flag = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(line.contains(<span class="hljs-string">&quot;发送文件：&quot;</span>))&#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Client@&quot;</span> + socketName + <span class="hljs-string">&quot;:&quot;</span> + line;<br>                        System.out.println(msg);<br>                        print(msg);<br>                        <span class="hljs-comment">//向在线客户端输出信息</span><br>                        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">file_send_server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(SERVER_FILE_SEND_PORT);<br>                        <span class="hljs-type">Socket</span> <span class="hljs-variable">file_send_accept</span> <span class="hljs-operator">=</span> file_send_server.accept();<br>                        <span class="hljs-type">ReceiveFileServerThread</span> <span class="hljs-variable">rfst</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReceiveFileServerThread</span>(file_send_accept);<br>                        rfst.start();<br>                        file_send_server.close();<br><br>                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(line.contains(<span class="hljs-string">&quot;接收文件：&quot;</span>))&#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Client@&quot;</span> + socketName + <span class="hljs-string">&quot;:&quot;</span> + line;<br>                        System.out.println(msg);<br>                        print(msg);<br>                        <span class="hljs-comment">//向在线客户端输出信息</span><br>                        String[] l=line.split(<span class="hljs-string">&quot;接收文件：&quot;</span>);<br>                        String fn=l[<span class="hljs-number">1</span>];<br>                        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">file_receive_server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(SERVER_FILE_RECEIVE_PORT);<br>                        <span class="hljs-type">Socket</span> <span class="hljs-variable">file_receive_accept</span> <span class="hljs-operator">=</span> file_receive_server.accept();<br>                        <span class="hljs-type">SendFileServerThread</span> <span class="hljs-variable">sfst</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendFileServerThread</span>(file_receive_accept,fn);<br>                        sfst.start();<br>                        file_receive_server.close();<br><br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Client@&quot;</span> + socketName + <span class="hljs-string">&quot;:&quot;</span> + line;<br>                        System.out.println(msg);<br>                        <span class="hljs-comment">//向在线客户端输出信息</span><br>                        print(msg);<br>                    &#125;<br>                &#125;<br>                closeConnect();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                str=<span class="hljs-string">&quot;登录失败！账号或密码有误！&quot;</span>;<br>                <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(socket.getOutputStream());<br>                pw.println(str);<br>                pw.flush();<br>                closeConnect();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">try</span> &#123;<br>                closeConnect();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e1) &#123;<br>                e1.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向所有在线客户端socket转发消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">synchronized</span> (sockets)&#123;<br>            <span class="hljs-keyword">for</span> (Socket sc : sockets)&#123;<br>                out = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(sc.getOutputStream());<br>                out.println(msg);<br>                out.flush();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭该socket的连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeConnect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Client@&quot;</span>+socketName+<span class="hljs-string">&quot;已退出聊天&quot;</span>);<br>        print(<span class="hljs-string">&quot;Client@&quot;</span>+socketName+<span class="hljs-string">&quot;已退出聊天&quot;</span>);<br>        <span class="hljs-comment">//移除没连接上的客户端</span><br>        <span class="hljs-keyword">synchronized</span> (sockets)&#123;<br>            sockets.remove(socket);<br>        &#125;<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SendFileServerThread-java"><a href="#SendFileServerThread-java" class="headerlink" title="SendFileServerThread.java"></a>SendFileServerThread.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mysocket2;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendFileServerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Socket socket;<br>    String fn;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SendFileServerThread</span><span class="hljs-params">(Socket socket, String fn)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>        <span class="hljs-built_in">this</span>.fn = fn;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        FileInputStream fis;<br>        DataInputStream dis;<br>        DataOutputStream dos;<br>        <span class="hljs-keyword">try</span> &#123;<br>            File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./&quot;</span>+fn);<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>            dis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(socket.getInputStream());<br>            dos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(socket.getOutputStream());<br>            <span class="hljs-comment">//文件名、大小等属性</span><br>            dos.writeUTF(file.getName());<br>            dos.flush();<br>            dos.writeLong(file.length());<br>            dos.flush();<br>            <span class="hljs-comment">///////////////</span><br>            <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">rad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(fn, <span class="hljs-string">&quot;r&quot;</span>);<br>            <span class="hljs-type">long</span> size=dis.readLong();<span class="hljs-comment">//读取文件已发送的大小</span><br>            dos.writeLong(rad.length());<span class="hljs-comment">//完整文件大小</span><br>            dos.flush();<br>            <span class="hljs-comment">//开始传输的位置</span><br>            <span class="hljs-type">long</span> offset=size;<br>            <span class="hljs-comment">// 文件分块</span><br>            <span class="hljs-type">int</span> barSize=(<span class="hljs-type">int</span>) (rad.length()/<span class="hljs-number">1024</span>);<br>            <span class="hljs-type">int</span> barOffset=(<span class="hljs-type">int</span>)(offset/<span class="hljs-number">1024</span>);<br><br>            System.out.println(<span class="hljs-string">&quot;发送文件 &quot;</span> + file.getName());<br>            System.out.println(<span class="hljs-string">&quot;######## 开始传输文件 ########&quot;</span>);<br>            <span class="hljs-type">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> length;<br>            <span class="hljs-keyword">if</span> (offset&lt;rad.length()) &#123;<br>                rad.seek(offset);<br>                <span class="hljs-keyword">while</span>((length=rad.read(buf))&gt;<span class="hljs-number">0</span>)&#123;<br>                    dos.write(buf,<span class="hljs-number">0</span>,length);<br>                    dos.flush();<br>                &#125;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;######## 文件传输成功 ########&quot;</span>);<br>            dis.close();<br>            dos.close();<br>            rad.close();<br>            <span class="hljs-comment">///////////////</span><br>        &#125;<span class="hljs-keyword">catch</span>(IOException e)&#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;文件传输异常&quot;</span>);<br>            <span class="hljs-comment">//JOptionPane.showMessageDialog(frame, &quot;无法发送文件!&quot;, &quot;错误&quot;, JOptionPane.ERROR_MESSAGE);</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ReceiveFileServerThread-java"><a href="#ReceiveFileServerThread-java" class="headerlink" title="ReceiveFileServerThread.java"></a>ReceiveFileServerThread.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mysocket2;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiveFileServerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Socket socket;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> SERVER_FILE_RECEIVE_PORT=<span class="hljs-number">9911</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReceiveFileServerThread</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        DataInputStream dis;<br>        DataOutputStream dos;<br>        <span class="hljs-keyword">try</span> &#123;<br>            dis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(socket.getInputStream());<br>            dos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(socket.getOutputStream());<br><br>            <span class="hljs-comment">// 文件名和长度</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> dis.readUTF();<br>            <span class="hljs-comment">//////////////</span><br>            File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName+<span class="hljs-string">&quot;.temp&quot;</span>);<br>            RandomAccessFile rad=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(fileName+<span class="hljs-string">&quot;.temp&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>);<br>            <span class="hljs-comment">//获得文件大小</span><br>            <span class="hljs-type">long</span> size=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(file.exists()&amp;&amp; file.isFile())&#123;<br>                size=file.length();<br>            &#125;<br>            dos.writeLong(size);<span class="hljs-comment">//发送已接收的大小</span><br>            dos.flush();<br>            <span class="hljs-type">long</span> allSize=dis.readLong();<span class="hljs-comment">//接收完整文件大小</span><br>            <span class="hljs-comment">// 文件分块</span><br>            <span class="hljs-type">int</span> barSize=(<span class="hljs-type">int</span>)(allSize/<span class="hljs-number">1024</span>); <span class="hljs-comment">// 块数</span><br>            <span class="hljs-type">int</span> barOffset=(<span class="hljs-type">int</span>)(size/<span class="hljs-number">1024</span>); <span class="hljs-comment">//</span><br>            System.out.println(<span class="hljs-string">&quot;######## 开始接收文件 ########&quot;</span>);<br>            rad.seek(size);<br>            <span class="hljs-type">int</span> length;<br>            <span class="hljs-type">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span>((length=dis.read(buf, <span class="hljs-number">0</span>, buf.length))!=-<span class="hljs-number">1</span>)&#123;<br>                rad.write(buf,<span class="hljs-number">0</span>,length);<br>                barOffset += <span class="hljs-number">1</span>;<br>            &#125;<br>            dis.close();<br>            dos.close();<br>            rad.close();<br>            File f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>            <span class="hljs-comment">// 覆盖已有的文件</span><br>            <span class="hljs-keyword">if</span>(f.exists())&#123;<br>                f.delete();<br>            &#125;<br>            <span class="hljs-comment">// 将.temp文件转为正式文件</span><br>            <span class="hljs-keyword">if</span>(barOffset &gt;= barSize)&#123;<br>                file.renameTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName));<br>            &#125;<br>            <span class="hljs-comment">//////////////</span><br>            System.out.println(<span class="hljs-string">&quot;######## 文件接收成功 [File Name：&quot;</span> + fileName + <span class="hljs-string">&quot;] ########&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CancelActionListener-java"><a href="#CancelActionListener-java" class="headerlink" title="CancelActionListener.java"></a>CancelActionListener.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mysocket2;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.DataOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.RandomAccessFile;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CancelActionListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActionListener</span> &#123;<br>    JLabel label;<br>    DataInputStream dis;<br>    DataOutputStream dos;<br>    RandomAccessFile rad;<br>    JFrame frame;<br>    Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CancelActionListener</span><span class="hljs-params">(JLabel label,DataInputStream dis,DataOutputStream dos,RandomAccessFile rad,JFrame frame,Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.label = label;<br>        <span class="hljs-built_in">this</span>.dis = dis;<br>        <span class="hljs-built_in">this</span>.dos = dos;<br>        <span class="hljs-built_in">this</span>.rad = rad;<br>        <span class="hljs-built_in">this</span>.frame = frame;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e3)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            label.setText(<span class="hljs-string">&quot; 取消发送,连接关闭&quot;</span>);<br>            JOptionPane.showMessageDialog(frame, <span class="hljs-string">&quot;取消发送给，连接关闭!&quot;</span>, <span class="hljs-string">&quot;提示：&quot;</span>, JOptionPane.INFORMATION_MESSAGE);<br>            dis.close();<br>            dos.close();<br>            rad.close();<br>            frame.dispose();<br>            socket.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub+Hexo博客网站搭建（四）</title>
    <link href="/blog/posts/6d0c3408/"/>
    <url>/blog/posts/6d0c3408/</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Hexo博客网站搭建（四）"><a href="#GitHub-Hexo博客网站搭建（四）" class="headerlink" title="GitHub+Hexo博客网站搭建（四）"></a>GitHub+Hexo博客网站搭建（四）</h1><p>SEO(Search Engine Optimization)，搜索引擎优化，让博客更容易被搜索引擎检索</p><h2 id="文章链接优化"><a href="#文章链接优化" class="headerlink" title="文章链接优化"></a>文章链接优化</h2><p>原本的文章链接有一长串，有年月日标题等，使用插件生成唯一文章链接</p><p>安装hexo-abbrlink插件</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-abbrlink <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>配置_config.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># permalink</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink/</span> <br><span class="hljs-comment"># or</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink.html</span><br><span class="hljs-comment"># abbrlink设置，在后面添加</span><br><span class="hljs-comment"># abbrlink config</span><br><span class="hljs-attr">abbrlink:</span><br>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>      <span class="hljs-comment">#support crc16(default) and crc32</span><br>  <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>        <span class="hljs-comment">#support dec(default) and hex</span><br>  <span class="hljs-attr">drafts:</span> <span class="hljs-literal">false</span>   <span class="hljs-comment">#(true)Process draft,(false)Do not process draft. false(default) </span><br>  <span class="hljs-comment"># Generate categories from directory-tree</span><br>  <span class="hljs-comment"># depth: the max_depth of directory-tree you want to generate, should &gt; 0</span><br>  <span class="hljs-attr">auto_category:</span><br>     <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#true(default)</span><br>     <span class="hljs-attr">depth:</span>        <span class="hljs-comment">#3(default)</span><br>     <span class="hljs-attr">over_write:</span> <span class="hljs-literal">false</span> <br>  <span class="hljs-attr">auto_title:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#enable auto title, it can auto fill the title by path</span><br>  <span class="hljs-attr">auto_date:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#enable auto date, it can auto fill the date by time today</span><br>  <span class="hljs-attr">force:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink. This only updates abbrlink rather than other front variables.</span><br></code></pre></td></tr></table></figure><h2 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h2><h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><p>网站的sitemap需要提交到搜索引擎</p><p>安装sitemap插件</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-generator-sitemap <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>可选配置_config.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sitemap:</span><br>  <span class="hljs-attr">path:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sitemap.xml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sitemap.txt</span><br>  <span class="hljs-attr">template:</span> <span class="hljs-string">./sitemap_template.xml</span><br>  <span class="hljs-attr">template_txt:</span> <span class="hljs-string">./sitemap_template.txt</span><br>  <span class="hljs-attr">rel:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>访问站点url加上sitemap.xml可查看站点地图</p><h3 id="收录站点"><a href="#收录站点" class="headerlink" title="收录站点"></a>收录站点</h3><p>查看站点是否被收录，谷歌搜索<code>site:https://wangaaayu.github.io/blog/</code></p><p>登录谷歌站点控制台<a href="https://search.google.com/search-console/about">Google Search Console</a>，添加站点，资源类型选择网址前缀，输入_config.yml文件中的url，选择HTML文件验证，下载文件后放入博客目录中的public文件夹下，并备份一份在根目录下，<code>hexo d</code>发布博客，点击验证即可完成</p><p>在谷歌站点控制台中选择站点地图，提交网站的站点地图</p><p>过段时间网站就可以被谷歌收录</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/yinyoupoet/p/13287384.html">hexo博客进行百度、谷歌SEO - _吟游诗人 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.51cto.com/u_8865295/5000165">【Hexo实战】SEO（百度、Google）设置_51CTO博客_hexo seo</a></p><p><a href="https://zhuanlan.zhihu.com/p/426081101">hexo之SEO优化 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>GitHub个人网站搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django模板</title>
    <link href="/blog/posts/a86d5b82/"/>
    <url>/blog/posts/a86d5b82/</url>
    
    <content type="html"><![CDATA[<h1 id="Django模板"><a href="#Django模板" class="headerlink" title="Django模板"></a>Django模板</h1><h2 id="创建虚拟环境和django项目"><a href="#创建虚拟环境和django项目" class="headerlink" title="创建虚拟环境和django项目"></a>创建虚拟环境和django项目</h2><p>适用于vscode开发，如果使用PyCharm可跳过</p><p>以管理员身份打开cmd或powershell</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 创建虚拟环境，需要系统有python</span><br>python -m venv 虚拟环境名<br><span class="hljs-comment"># 进入虚拟环境</span><br>.\虚拟环境名\<span class="hljs-keyword">Scripts\activate</span><br><span class="hljs-keyword"></span><span class="hljs-comment"># 安装django</span><br>pip <span class="hljs-keyword">install </span>django<br><span class="hljs-comment"># 创建django项目</span><br>django-admin startproject 项目名<br><span class="hljs-comment"># 创建应用</span><br>cd 项目名<br>python manage.py startapp 应用名<br></code></pre></td></tr></table></figure><p>vscode配置python解释器</p><ol><li><p>快捷键ctrl+shift+p打开命令框</p></li><li><p>输入python interpreter，点击select interpreter</p></li><li><p>点击enter interpreter path（添加一次过后解释器就会显示在下方）</p></li><li><p>点击find</p></li><li><p>选择 虚拟环境\Scripts\python.exe 并确定</p></li><li><p>快捷键ctrl+shift+`打开新终端，可以看见已经进入虚拟环境</p></li></ol><p>vscode安装虚拟插件</p><p>扩展搜索django安装第一个（最多下载）</p><h2 id="整体框架搭建"><a href="#整体框架搭建" class="headerlink" title="整体框架搭建"></a>整体框架搭建</h2><p>以创建的项目名为project，应用名为app为例，项目的结构为（没有的文件夹自行创建）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stylus">project<br><span class="hljs-attr">--app</span><br>----__pycache__<br>--<span class="hljs-attr">--migrations</span><br>----__init__<span class="hljs-selector-class">.py</span><br>--<span class="hljs-attr">--admin</span><span class="hljs-selector-class">.py</span><br>--<span class="hljs-attr">--apps</span><span class="hljs-selector-class">.py</span><br>--<span class="hljs-attr">--models</span><span class="hljs-selector-class">.py</span><br>--<span class="hljs-attr">--tests</span><span class="hljs-selector-class">.py</span><br>--<span class="hljs-attr">--urls</span><span class="hljs-selector-class">.py</span><br>--<span class="hljs-attr">--views</span><span class="hljs-selector-class">.py</span><br><span class="hljs-attr">--project</span><br>----__pycache__<br>----__init__<span class="hljs-selector-class">.py</span><br>--<span class="hljs-attr">--asgi</span><span class="hljs-selector-class">.py</span><br>--<span class="hljs-attr">--settings</span><span class="hljs-selector-class">.py</span><br>--<span class="hljs-attr">--urls</span><span class="hljs-selector-class">.py</span><br>--<span class="hljs-attr">--wsgi</span><span class="hljs-selector-class">.py</span><br><span class="hljs-attr">--static</span><br><span class="hljs-attr">--templates</span><br><span class="hljs-attr">--db</span><span class="hljs-selector-class">.sqlite3</span><br><span class="hljs-attr">--favicon</span><span class="hljs-selector-class">.ico</span><br><span class="hljs-attr">--manage</span>.py<br></code></pre></td></tr></table></figure><p>项目安装的依赖有（需额外下载的有django-cors-heade、mysqlclient、PyMySQL）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">asgiref</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">3.6</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Django</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">4.1</span>.<span class="hljs-number">7</span><br><span class="hljs-attribute">django-cors-headers</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">3.14</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">mysqlclient</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2.1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">PyMySQL</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.0</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">sqlparse</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0.4</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">tzdata</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">2022.7</span><br></code></pre></td></tr></table></figure><h3 id="project"><a href="#project" class="headerlink" title="project"></a>project</h3><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 允许访问的host，*为任意</span><br>ALLOWED_HOSTS = [<span class="hljs-string">&#x27;*&#x27;</span>]<br><br><span class="hljs-comment"># Application definition</span><br><span class="hljs-comment"># corsheaders用于解决跨域问题，app为本项目的应用</span><br>INSTALLED_APPS = [<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># 最后加上两行</span><br>    <span class="hljs-string">&#x27;corsheaders&#x27;</span>,<br>    <span class="hljs-string">&#x27;app&#x27;</span><br>]<br>MIDDLEWARE = [<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,  <span class="hljs-comment"># 中间加上这一行</span><br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-comment"># ...</span><br>]<br>TEMPLATES = [<br>    &#123;<br>        <span class="hljs-comment"># ...</span><br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [BASE_DIR / <span class="hljs-string">&#x27;templates&#x27;</span>],  <span class="hljs-comment"># 配置templates文件夹的路径</span><br>        <span class="hljs-comment"># ...</span><br>    &#125;,<br>]<br><br><br><span class="hljs-comment"># Database</span><br><span class="hljs-comment"># 数据库配置，以mysql为例，系统需安装MySQL并创建对应的数据库</span><br>DATABASES = &#123;<br>    <span class="hljs-comment"># &#x27;default&#x27;: &#123;</span><br>    <span class="hljs-comment">#     &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span><br>    <span class="hljs-comment">#     &#x27;NAME&#x27;: BASE_DIR / &#x27;db.sqlite3&#x27;,</span><br>    <span class="hljs-comment"># &#125;</span><br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;demo&#x27;</span>,<br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;123456&#x27;</span>,<br>        <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-number">3306</span>,<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment"># Internationalization</span><br><span class="hljs-comment"># 对于国际化的设置，供参考</span><br>LANGUAGE_CODE = <span class="hljs-string">&#x27;zh-Hans&#x27;</span><br>TIME_ZONE = <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br>USE_I18N = <span class="hljs-literal">True</span><br>USE_TZ = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># Static files (CSS, JavaScript, Images)</span><br><span class="hljs-comment"># 静态文件位置</span><br>STATIC_URL = <span class="hljs-string">&#x27;static/&#x27;</span><br>STATICFILES_DIRS=[os.path.join(BASE_DIR,<span class="hljs-string">&#x27;static&#x27;</span>)]<br><br><span class="hljs-comment"># 跨域问题corsheaders的配置，供参考</span><br>CORS_ORIGIN_ALLOW_ALL = <span class="hljs-literal">True</span><br>CORS_ALLOW_CREDENTIALS = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&#x27;app/&#x27;</span>, include(<span class="hljs-string">&#x27;app.urls&#x27;</span>))<br>]<br></code></pre></td></tr></table></figure><h3 id="app"><a href="#app" class="headerlink" title="app"></a>app</h3><p>models.py定义数据库的表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(models.Model):<br>    user_id = models.AutoField(primary_key=<span class="hljs-literal">True</span>)<br>    user_name = models.CharField(max_length=<span class="hljs-number">30</span>, default=<span class="hljs-string">&#x27;&#x27;</span>, unique=<span class="hljs-literal">True</span>)<br>    user_password = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    created_time = models.DateTimeField(<span class="hljs-string">&#x27;创建时间&#x27;</span>, auto_now_add=<span class="hljs-literal">True</span>)<br>    updated_time = models.DateTimeField(<span class="hljs-string">&#x27;更新时间&#x27;</span>, auto_now=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelExampleA</span>(models.Model):<br>    a_id = models.AutoField(primary_key=<span class="hljs-literal">True</span>)<br>    a_name = models.CharField(max_length=<span class="hljs-number">30</span>, default=<span class="hljs-string">&#x27;&#x27;</span>)<br>    number = models.IntegerField(default=<span class="hljs-number">0</span>)<br>    time = models.DateTimeField(default = timezone.now)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelExampleB</span>(models.Model):<br>    b_id = models.AutoField(primary_key=<span class="hljs-literal">True</span>)<br>    user_id = models.ForeignKey(to=User, db_column=<span class="hljs-string">&#x27;user_id&#x27;</span>, on_delete=models.CASCADE)<br>    a_id = models.ForeignKey(to=ModelExampleA, db_column=<span class="hljs-string">&#x27;a_id&#x27;</span>, on_delete=models.CASCADE)<br>    number = models.IntegerField(default=-<span class="hljs-number">1</span>)<br>    time = models.DateTimeField(default = timezone.now)<br></code></pre></td></tr></table></figure><p>urls.py定义api</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;create_user/&#x27;</span>, views.create_user),<br>    path(<span class="hljs-string">&#x27;login/&#x27;</span>, views.login),<br>]<br></code></pre></td></tr></table></figure><p>views.py定义视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse, JsonResponse<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">from</span> django.views.decorators.csrf <span class="hljs-keyword">import</span> csrf_exempt  <span class="hljs-comment"># 用于处理POST请求</span><br><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># json编码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyEncoder</span>(json.JSONEncoder):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">default</span>(<span class="hljs-params">self, obj</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(obj, datetime):<br>            <span class="hljs-keyword">return</span> obj.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> json.JSONEncoder.default(self, obj)<br><br><span class="hljs-comment"># GET</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_a</span>(<span class="hljs-params">request</span>):<br>    a = ModelExampleA.objects.<span class="hljs-built_in">all</span>().values()<br>    a = <span class="hljs-built_in">list</span>(a[:])<br>    data = json.dumps(a)<br>    <span class="hljs-keyword">return</span> HttpResponse(data, content_type=<span class="hljs-string">&quot;application/json&quot;</span>)<br><br><br><span class="hljs-comment"># POST</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_a</span>(<span class="hljs-params">request</span>):<br>    body = json.loads(request.body)<br>    a_id = body[<span class="hljs-string">&#x27;a_id&#x27;</span>]<br>    a = ModelExampleA.objects.<span class="hljs-built_in">filter</span>(a_id=a_id).values()<br>    a = <span class="hljs-built_in">list</span>(a[:])<br>    data = json.dumps(a)<br>    <span class="hljs-keyword">return</span> HttpResponse(data, content_type=<span class="hljs-string">&quot;application/json&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>在终端中</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><p>可以访问/admin和/app</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub+Hexo博客网站搭建（三）</title>
    <link href="/blog/posts/da212d6d/"/>
    <url>/blog/posts/da212d6d/</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Hexo博客网站搭建（三）"><a href="#GitHub-Hexo博客网站搭建（三）" class="headerlink" title="GitHub+Hexo博客网站搭建（三）"></a>GitHub+Hexo博客网站搭建（三）</h1><p>不想将wangaaayu.github.io作为博客的地址，想多加一级，用wangaaayu.github.io/blog/访问博客</p><h2 id="创建新博客仓库"><a href="#创建新博客仓库" class="headerlink" title="创建新博客仓库"></a>创建新博客仓库</h2><p>新建仓库，名字取为blog，顺便把添加README.md选项点上</p><p>在README.md中随便写点东西</p><p>在设置中的Pages选项中，将Branch由None改为main，文件夹默认为/(root)即可</p><p>稍等一段时间，就可以访问wangaaayu.github.io/blog/，看到README.md中的内容</p><p><img src="/blog/posts/da212d6d/%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E8%AE%BE%E7%BD%AE.png"></p><h2 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h2><p>之前博客都备份在了io.dev私有仓库中，现在将该私有仓库重命名为blog.dev</p><p>clone该blog.dev仓库到本地，或者用命令【git remote set-url origin 新地址】修改之前本地仓库的git远程仓库地址，同时将本地仓库改名</p><p>修改本地仓库根目录下的_config.yml和_config.主题.yml（如果有的话）文件</p><ol><li><p>修改url。url修改为访问地址，即在原来的后面加上/blog</p></li><li><p>在url下添加root。root值为/blog/（官方建议<a href="https://hexo.io/docs/configuration">Configuration | Hexo</a>）</p></li><li><p>修改deploy:repo。deploy:repo修改为新的blog远程仓库的地址（注意分支branch也要正确）</p></li></ol><p><img src="/blog/posts/da212d6d/hexo%E4%BA%8C%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%AE%BE%E7%BD%AE.png"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># ...</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://WangAaayu.github.io/blog</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/blog/</span><br><span class="hljs-comment"># ...</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span>  <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span>  <span class="hljs-string">git@github.com:WangAaayu/blog.git</span><br>  <span class="hljs-attr">branch:</span>  <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>最后执行命令hexo g以及hexo d，发布博客</p><p>稍等一段时间，访问新的博客网站就可以看到发布的博客</p><h2 id="图片无法加载"><a href="#图片无法加载" class="headerlink" title="图片无法加载"></a>图片无法加载</h2><p>新的博客网站图片都加载不出来，原因是图片的请求路径不对</p><p>之前提到用这个命令下载插件能解决图片不显示的问题</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CodeFalling/</span>hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>现在图片加载不出来，说明这个插件也解决不了</p><p>试着重新下载hexo-asset-image插件，用github上点赞更多的</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm uninstall hexo-asset-<span class="hljs-built_in">image</span><br>npm install hexo-asset-<span class="hljs-built_in">image</span> --<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure><p>重新运行发现路径还是不对，原因是插件不适配</p><p>修改插件的index.js文件（node_modules\hexo-asset-image\index.js）</p><ol><li><p>将beginPos的位置改为link中的第4个“/”之后</p></li><li><p>将endPos的位置都改为link中的最后一个“/”</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">var</span> link = data.<span class="hljs-property">permalink</span>;<br><span class="hljs-comment">// 改为第4个“/”的位置，因为现在的网址多了blog/</span><br><span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">4</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> appendLink = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="hljs-comment">// if not with index.html endpos = link.lastIndexOf(&#x27;.&#x27;) + 1 support hexo-abbrlink</span><br><span class="hljs-keyword">if</span>(<span class="hljs-regexp">/.*\/index\.html$/</span>.<span class="hljs-title function_">test</span>(link)) &#123;<br>  <span class="hljs-comment">// when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html</span><br>  <span class="hljs-comment">// image in xxtitle/ will go to xxtitle/index/</span><br>  appendLink = <span class="hljs-string">&#x27;index/&#x27;</span>;<br>  <span class="hljs-comment">// var endPos = link.lastIndexOf(&#x27;/&#x27;);</span><br>&#125;<br><span class="hljs-comment">// else &#123;</span><br><span class="hljs-comment">//   var endPos = link.lastIndexOf(&#x27;.&#x27;);</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// 删除上面的endPos语句，无论是否有index.html，路径都是以“/”结尾</span><br><span class="hljs-comment">// 添加下面的endPos语句，endPos是最后一个“/”的位置</span><br><span class="hljs-keyword">var</span> endPos = link.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>link = link.<span class="hljs-title function_">substring</span>(beginPos, endPos) + <span class="hljs-string">&#x27;/&#x27;</span> + appendLink;<br><br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p><img src="/blog/posts/da212d6d/%E6%8F%92%E4%BB%B6%E4%BF%AE%E6%94%B9.png"></p><p>最后用hexo命令清除并重新生成博客网站</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo cl</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>稍等一段时间，访问新的博客网站就可以看到图片可以正常显示</p>]]></content>
    
    
    <categories>
      
      <category>GitHub个人网站搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue测试后端API接口简易模板</title>
    <link href="/blog/posts/2628a59d/"/>
    <url>/blog/posts/2628a59d/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue测试后端API接口简易模板"><a href="#Vue测试后端API接口简易模板" class="headerlink" title="Vue测试后端API接口简易模板"></a>Vue测试后端API接口简易模板</h1><p>大多数vue项目都把页面放在src/views/目录下，并且有src/router/index.js做路由。本项目是<strong>vue2</strong>版本，主要用于后端开发过程中测试api，只用到api模块。项目结构如图：</p><p><img src="/blog/posts/2628a59d/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></p><h2 id="src-main-js"><a href="#src-main-js" class="headerlink" title="src/main.js"></a>src/main.js</h2><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs v"><span class="hljs-keyword">import</span> Vue from &#x27;vue&#x27;<br><span class="hljs-keyword">import</span> App from &#x27;./App<span class="hljs-variable">.vue</span>&#x27;<br><br>Vue<span class="hljs-variable">.config</span><span class="hljs-variable">.productionTip</span> = false<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  render: h =&gt; h(App),<br>&#125;).$mount(&#x27;#app&#x27;)<br></code></pre></td></tr></table></figure><h2 id="src-App-vue"><a href="#src-App-vue" class="headerlink" title="src/App.vue"></a>src/App.vue</h2><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs v">&lt;template&gt;<br>  &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;img alt=<span class="hljs-string">&quot;Vue logo&quot;</span> src=<span class="hljs-string">&quot;./assets/logo.png&quot;</span>&gt;<br>    &lt;HelloWorld msg=<span class="hljs-string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">import</span> HelloWorld from &#x27;./components/HelloWorld<span class="hljs-variable">.vue</span>&#x27;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: &#x27;App&#x27;,<br>  components: &#123;<br>    HelloWorld<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: Avenir, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  text-align: center;<br>  color: #<span class="hljs-number">2</span>c3e50;<br>  margin-top: <span class="hljs-number">60</span>px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="src-api-index-js"><a href="#src-api-index-js" class="headerlink" title="src/api/index.js"></a>src/api/index.js</h2><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs v"><span class="hljs-keyword">import</span> Vue from &#x27;vue&#x27;<br><span class="hljs-keyword">import</span> Axios from &#x27;axios&#x27;<br><br><span class="hljs-keyword">const</span> axiosInstance = Axios<span class="hljs-variable">.create</span>(&#123;<br>    withCredentials: true<br>&#125;)<br><br><span class="hljs-comment">// 通过拦截器处理csrf问题，这里的正则和匹配下标可能需要根据实际情况小改动</span><br>axiosInstance<span class="hljs-variable">.interceptors</span><span class="hljs-variable">.request</span><span class="hljs-variable">.use</span>((<span class="hljs-keyword">config</span>) =&gt; &#123;<br>    <span class="hljs-keyword">config</span><span class="hljs-variable">.headers</span>[&#x27;X-Requested-With&#x27;] = &#x27;XMLHttpRequest&#x27;<br>    <span class="hljs-keyword">const</span> regex = /.*csrftoken=([^;.]*).*$/<br>    <span class="hljs-keyword">config</span><span class="hljs-variable">.headers</span>[&#x27;X-CSRFToken&#x27;] = document<span class="hljs-variable">.cookie</span><span class="hljs-variable">.match</span>(regex) === <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : document<span class="hljs-variable">.cookie</span><span class="hljs-variable">.match</span>(regex)[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">config</span><br>&#125;)<br><br>axiosInstance<span class="hljs-variable">.interceptors</span><span class="hljs-variable">.response</span><span class="hljs-variable">.use</span>(<br>    response =&gt; &#123;<br>        <span class="hljs-keyword">return</span> response<br>    &#125;,<br>    error =&gt; &#123;<br>        <span class="hljs-keyword">return</span> Promise<span class="hljs-variable">.reject</span>(error)<br>    &#125;<br>)<br><br>Vue<span class="hljs-variable">.prototype</span><span class="hljs-variable">.axios</span> = axiosInstance<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> axiosInstance<br></code></pre></td></tr></table></figure><h2 id="src-api-api-js"><a href="#src-api-api-js" class="headerlink" title="src/api/api.js"></a>src/api/api.js</h2><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs v"><span class="hljs-keyword">import</span> axiosInstance from &#x27;./index&#x27;<br><br><span class="hljs-keyword">const</span> axios = axiosInstance<br><span class="hljs-keyword">const</span> ip = &#x27;http:<span class="hljs-comment">//localhost:8000/app/&#x27;  // api请求地址的统一字段</span><br><br><span class="hljs-comment">// GET请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getRequest = () =&gt; &#123;<span class="hljs-keyword">return</span> axios<span class="hljs-variable">.get</span>(ip + &#x27;后端url&#x27;)&#125;<br><br><span class="hljs-comment">// POST请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> postRequest = data =&gt; &#123;<span class="hljs-keyword">return</span> axios<span class="hljs-variable">.get</span>(ip + &#x27;后端url&#x27;, data)&#125;<br></code></pre></td></tr></table></figure><h2 id="src-components-HelloWorld-vue"><a href="#src-components-HelloWorld-vue" class="headerlink" title="src/components/HelloWorld.vue"></a>src/components/HelloWorld.vue</h2><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs v">&lt;template&gt;<br>  &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">import</span> &#123;<br>  getRequest, postRequest<br>&#125; from &#x27;../api/api<span class="hljs-variable">.js</span>&#x27;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-number">&#x27;He</span>lloWorld&#x27;,<br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: &#x27;Welcome to Your Vue<span class="hljs-variable">.js</span> App&#x27;,<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    testGetRequest() &#123;<br>      getRequest()<span class="hljs-variable">.then</span>(response =&gt; &#123;<br>        console<span class="hljs-variable">.log</span>(response<span class="hljs-variable">.data</span>)<br>      &#125;)<span class="hljs-variable">.catch</span>((error) =&gt; &#123;<br>        alert(error<span class="hljs-variable">.response</span><span class="hljs-variable">.data</span>)<br>      &#125;)<br>    &#125;,<br>    testPostRequest() &#123;<br>      postRequest(&#123;<br>        <span class="hljs-comment">// 以字典形式构造POST请求的参数</span><br>        &#x27;key&#x27;: value,<br>        &#x27;key&#x27;: &#x27;value&#x27;,<br>      &#125;)<span class="hljs-variable">.then</span>(response =&gt; &#123;<br>        console<span class="hljs-variable">.log</span>(response<span class="hljs-variable">.data</span>)<br>      &#125;)<span class="hljs-variable">.catch</span>((error) =&gt; &#123;<br>        alert(error<span class="hljs-variable">.response</span><span class="hljs-variable">.data</span>)<br>      &#125;)<br>    &#125;,<br>  &#125;,<br>  created: <span class="hljs-keyword">function</span> () &#123;<br>    <span class="hljs-keyword">this</span><span class="hljs-variable">.testGetRequest</span>()<br>    <span class="hljs-keyword">this</span><span class="hljs-variable">.testPostRequest</span>()<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+Django部署Ubuntu服务器</title>
    <link href="/blog/posts/61a84e4c/"/>
    <url>/blog/posts/61a84e4c/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-Django部署Ubuntu服务器"><a href="#Vue-Django部署Ubuntu服务器" class="headerlink" title="Vue+Django部署Ubuntu服务器"></a>Vue+Django部署Ubuntu服务器</h1><p>首先用MobaXterm（或其他软件）连接上ubuntu服务器</p><p>ubuntu服务器上需安装：</p><ul><li><p>mysql</p></li><li><p>python3（django+uwsgi）</p></li><li><p>nginx</p></li></ul><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="/blog/posts/61a84e4c/%E6%9E%B6%E6%9E%84.jpg"></p><h2 id="查看端口与进程"><a href="#查看端口与进程" class="headerlink" title="查看端口与进程"></a>查看端口与进程</h2><p>查看mysql的3306、django项目的8000等要用的端口有没有被占用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># -a查看已连接的服务端口，-ap查看所有的服务端口</span><br><span class="hljs-attribute">netstat</span> -ap | grep <span class="hljs-number">8000</span><br><span class="hljs-comment"># 关闭使用端口的程序</span><br><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> pid号<br></code></pre></td></tr></table></figure><p>查看mysql、nginx等进程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 输出格式为：拥有者 PID PPID CPU 系统启动时间 登入者的终端机位置 使用掉的CPU时间 下达的命令</span><br><span class="hljs-comment"># 该命令最少有一个结果，即该命令本身</span><br><span class="hljs-attribute">ps</span> -ef | grep mysql<br><span class="hljs-comment"># 关闭进程</span><br><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> pid号<br></code></pre></td></tr></table></figure><h2 id="mysql安装配置"><a href="#mysql安装配置" class="headerlink" title="mysql安装配置"></a>mysql安装配置</h2><p>mysql8.0</p><p>安装与密码基本配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 安装mysql（可只安装server）</span><br>sudo apt-<span class="hljs-built_in">get</span> install mysql-server<br>sudo apt-<span class="hljs-built_in">get</span> install mysql-client<br><span class="hljs-comment"># 查看mysql服务状态</span><br>systemctl status mysql.service<br><span class="hljs-comment"># mysql基本安全配置</span><br><span class="hljs-comment"># 配置的内容为：增加密码组件；设置root密码策略和密码；是否禁用匿名用户；是否不允许root远程登录；是否移除test数据库；是否重新加载权限表</span><br>sudo mysql_secure_installation<br><span class="hljs-comment"># 进入mysql</span><br>mysql -u root -p<br><span class="hljs-comment"># 设置密码策略</span><br><span class="hljs-built_in">set</span> global validate_password.<span class="hljs-attribute">policy</span>=LOW;<br><span class="hljs-comment"># 设置密码长度</span><br><span class="hljs-built_in">set</span> global validate_password.<span class="hljs-attribute">length</span>=6;<br><span class="hljs-comment"># 修改root密码（建议密码不要设太简单）</span><br>alter<span class="hljs-built_in"> user </span><span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified with mysql_native_password by <span class="hljs-string">&#x27;password&#x27;</span>;<br><span class="hljs-comment"># 退出mysql</span><br>exit<br></code></pre></td></tr></table></figure><p>若忘记密码，据说不能用skip-grant-tables来跳过密码登录（<a href="https://blog.csdn.net/weixin_29231725/article/details/114472319">ubuntu20.04安装mysql_Ubuntu 20.04安装MySQL 8.0.20记_zibuyu9的博客-CSDN博客</a>）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 使用该命令输出的默认用户名密码登录，再修改密码</span><br>sudo cat <span class="hljs-regexp">/etc/my</span>sql/debian.cnf<br></code></pre></td></tr></table></figure><p>创建两个新用户，一个供项目访问一个供远程访问（host不同），并授予项目数据库的所有权限、并使mysql能够远程连接</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 进入mysql数据库<br>use mysql;<br># 查看<span class="hljs-keyword">user</span>表<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br># 查看用户和host<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br># 创建新用户（一个host为localhost，一个host为远程主机ip地址）<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;要访问的主机ip地址（%为任意）&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;password&#x27;</span>;<br># 授予该用户数据库权限<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> 数据库名（*为任意）.表名（*为任意） <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;要访问的主机ip地址（%为任意）&#x27;</span>;<br># 或<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> 数据库名（*为任意）.表名（*为任意） <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;要访问的主机ip地址（%为任意）&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>;<br># 刷新权限，使之生效<br>flush <span class="hljs-keyword">privileges</span>;<br># 退出mysql<br><span class="hljs-keyword">exit</span><br># 修改mysqld.cnf配置文件中的bind-address<br>sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf<br>bind-address = <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>,服务器ip地址<br># 重启mysql<br>sudo systemctl <span class="hljs-keyword">restart</span> mysql.service<br># 查看<span class="hljs-number">3306</span>端口的地址<br>ss -anplt | grep <span class="hljs-number">3306</span><br># 验证是否能够远程连接<br>mysql -u 用户名 -p -h 数据库的ipv4地址<br></code></pre></td></tr></table></figure><p><img src="/blog/posts/61a84e4c/mysql%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png"></p><p>开启数据库操作日志</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 查看日志相关设置（是否开启、日志文件位置）</span><br>show variables like <span class="hljs-string">&#x27;gen%&#x27;</span>;<br><span class="hljs-comment"># 开启日志</span><br><span class="hljs-built_in">set</span> global <span class="hljs-attribute">general_log</span>=ON;<br></code></pre></td></tr></table></figure><h2 id="python3虚拟环境"><a href="#python3虚拟环境" class="headerlink" title="python3虚拟环境"></a>python3虚拟环境</h2><p>创建虚拟环境来运行项目，方便python环境管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装virtualenv包</span><br>pip install virtualenv<br><span class="hljs-comment"># 创建虚拟环境</span><br>virtualenv 环境名称<br><span class="hljs-comment"># 指定python版本创建虚拟环境</span><br>virtualenv 环境名称 --python=python3.8<br><span class="hljs-comment"># 激活虚拟环境</span><br><span class="hljs-built_in">source</span> 虚拟环境目录/bin/activate<br><span class="hljs-comment"># 退出虚拟环境</span><br>deactivate<br><span class="hljs-comment"># 删除环境删除文件夹即可</span><br><span class="hljs-built_in">rm</span> -rf 环境名称<br></code></pre></td></tr></table></figure><p>也可以使用virtualenvwrapper统一配置和管理虚拟环境</p><h2 id="上传本地项目"><a href="#上传本地项目" class="headerlink" title="上传本地项目"></a>上传本地项目</h2><p>vue中的后端api请求的请求ip地址改为服务器ip地址，端口应为后面nginx监听的端口</p><p>首先将vue打包放到django项目中，然后上传django项目；或者vue项目也上传</p><p>可以使用git上传项目或直接将项目打包文件传输至服务器</p><p>vue环境安装</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 安装nodejs</span><br>sudo apt-get install nodejs<br><span class="hljs-comment"># 查看nodejs和npm版本</span><br>node -v<br><span class="hljs-built_in">npm</span> -v<br><span class="hljs-comment"># 安装vue2脚手架</span><br>sudo <span class="hljs-built_in">npm</span> install -g vue-cli<br><span class="hljs-comment"># 安装vue3脚手架</span><br>sudo <span class="hljs-built_in">npm</span> install -g @vue/cli<br><span class="hljs-comment"># 查看vue版本</span><br>vue -V<br></code></pre></td></tr></table></figure><p>上传成功后在虚拟环境中安装django依赖包</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 本地django项目生成依赖包<br>pip <span class="hljs-keyword">freeze</span> &gt; requirements.txt<br># 在服务器安装依赖包<br>pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>服务器上安装报错的话可以根据生成的requirements.txt手动安装</p><p>其中，下载mysqlclient的方法为</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt-get <span class="hljs-keyword">install</span> libmysqlclient-dev<br>pip <span class="hljs-keyword">install</span> mysqlclient<br></code></pre></td></tr></table></figure><p>进入mysql创建django的数据库，并修改django设置文件中的数据库配置</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">mysql -u root -p<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> example;<br></code></pre></td></tr></table></figure><p>最后运行一下django项目，看能不能成功</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver<br></code></pre></td></tr></table></figure><p>若出现问题，可参考部署windows一文</p><h2 id="uwsgi安装配置"><a href="#uwsgi安装配置" class="headerlink" title="uwsgi安装配置"></a>uwsgi安装配置</h2><p>安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 在虚拟环境下</span><br>pip <span class="hljs-keyword">install</span> uwsgi<br></code></pre></td></tr></table></figure><p>配置uwsgi，新建uwsgi.ini文件并配置（路径不能用~符号，只能用根目录/开始写绝对路径），其中uwsgi.log需手动创建</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[uwsgi]</span><br><span class="hljs-comment"># 开启主进程</span><br><span class="hljs-attr">master</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># 最大进程数量</span><br><span class="hljs-attr">processes</span> = <span class="hljs-number">8</span><br><span class="hljs-comment"># 启用线程</span><br><span class="hljs-attr">enable-threads</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># 每个进程下的线程数</span><br><span class="hljs-attr">threads</span> = <span class="hljs-number">4</span><br><span class="hljs-comment"># django项目路径</span><br><span class="hljs-attr">chdir</span> = django项目路径<br><span class="hljs-comment"># wsgi.py文件的位置</span><br><span class="hljs-attr">wsgi-file</span> = django项目wsgi.py文件路径<br><span class="hljs-comment"># 该端口为后端django的运行端口，与nginx的配置一致</span><br><span class="hljs-attr">socket</span> = 服务器ip:<span class="hljs-number">8001</span><br><span class="hljs-attr">chmod-socket</span> = <span class="hljs-number">660</span><br><span class="hljs-comment"># 当服务器退出的时候自动删除unix socket文件和pid文件</span><br><span class="hljs-attr">vacuum</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment">#uwsgi的运行状态</span><br><span class="hljs-attr">status</span> = django项目路径/uwsgi.status<br><span class="hljs-comment"># uwsgid的进程id</span><br><span class="hljs-attr">pidfile</span> = django项目路径/uwsgi.pid<br><span class="hljs-comment"># 输出日志</span><br><span class="hljs-attr">logto</span> = django项目路径/uwsgi.log<br><span class="hljs-comment"># 虚拟环境路径</span><br><span class="hljs-attr">virtualenv</span> = 虚拟环境路径<br></code></pre></td></tr></table></figure><p>运行uwsgi，启动django项目</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">uwsgi <span class="hljs-comment">--ini uwsgi.ini</span><br></code></pre></td></tr></table></figure><p><img src="/blog/posts/61a84e4c/uwsgi%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F.png"></p><p>uwsgi常用命令</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 运行</span><br>uwsgi <span class="hljs-comment">--ini uwsgi.ini</span><br><span class="hljs-comment"># 停止</span><br>uwsgi <span class="hljs-comment">--stop uwsgi.pid</span><br><span class="hljs-comment"># 重启</span><br>uwsgi <span class="hljs-comment">--reload uwsgi.pid</span><br></code></pre></td></tr></table></figure><h2 id="uwsgi后台运行"><a href="#uwsgi后台运行" class="headerlink" title="uwsgi后台运行"></a>uwsgi后台运行</h2><p>用systemd将uwsgi设置为系统服务，开启uwsgi服务使其在后台一直运行</p><p>在虚拟环境中查看虚拟环境的uwsgi命令路径</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">whereis uwsgi</span><br></code></pre></td></tr></table></figure><p>在/etc/systemd/system下创建uwsgi.service文件（路径应为绝对路径）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=singing evaluation music web uwsgi<br><span class="hljs-attr">After</span>=network.target<br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span>=虚拟环境的uwsgi命令路径 --ini uwsgi.ini路径<br><span class="hljs-attr">ExecStop</span>=虚拟环境的uwsgi命令路径 --stop uwsgi.pid路径<br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>开启uwsgi服务</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> uwsgi.service<br></code></pre></td></tr></table></figure><p>uwsgi服务的常用命令</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 开机自启动</span><br><span class="hljs-params">system</span>ctl enable uwsgi.service<br><span class="hljs-comment"># 启动</span><br><span class="hljs-params">system</span>ctl start uwsgi.service<br><span class="hljs-comment"># 停止</span><br><span class="hljs-params">system</span>ctl stop uwsgi.service<br><span class="hljs-comment"># 重启</span><br><span class="hljs-params">system</span>ctl restart uwsgi.service<br><span class="hljs-comment"># 查看状态</span><br><span class="hljs-params">system</span>ctl status uwsgi.service<br></code></pre></td></tr></table></figure><h2 id="nginx安装配置"><a href="#nginx安装配置" class="headerlink" title="nginx安装配置"></a>nginx安装配置</h2><p>安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install nginx<br></code></pre></td></tr></table></figure><p>配置项目的nginx服务器块</p><p>在/etc/nginx/sites-available目录下新建配置文件example并配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>     <span class="hljs-attribute">listen</span>       <span class="hljs-number">8000</span>;  <span class="hljs-comment"># 项目访问端口</span><br>     <span class="hljs-attribute">server_name</span>  服务器ip;<br>     <span class="hljs-comment"># root         ;</span><br>     <span class="hljs-comment">#charset koi8-r;</span><br><br>     <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>     <span class="hljs-comment"># location / &#123;</span><br>     <span class="hljs-comment">#     root ;</span><br>     <span class="hljs-comment">#     index /templates/index.html;</span><br>     <span class="hljs-comment"># &#125;</span><br><br>     <span class="hljs-section">location</span> /app &#123;  <span class="hljs-comment"># 前端api请求</span><br>         <span class="hljs-attribute">uwsgi_pass</span> 服务器ip:<span class="hljs-number">8001</span>;  <span class="hljs-comment"># django运行端口，也即uwsgi配置中的socket端口，无需http://</span><br>         <span class="hljs-attribute">include</span> /etc/nginx/uwsgi_params;<br>     &#125;<br><br>     <span class="hljs-section">location</span> /static &#123;<br>         <span class="hljs-attribute">root</span> django项目的static目录路径;  <span class="hljs-comment"># 末尾加/</span><br>     &#125;<br><br>     <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>     <span class="hljs-section">location</span> = /50x.html &#123;<br>         <span class="hljs-attribute">root</span>   html;<br>     &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在sites-enabled目录建立该配置的链接，使nginx启动时读取该配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo ln -s <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-available/</span>example.com <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-enabled/</span><br></code></pre></td></tr></table></figure><p>重新启动nginx</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service nginx restart</span><br></code></pre></td></tr></table></figure><p>登录刚配置的网址看是否有nginx的欢迎界面</p><p><img src="/blog/posts/61a84e4c/nginx%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F.png"></p><p>nginx常用命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 开机自启动</span><br>systemctl <span class="hljs-built_in">enable</span> nginx<br><span class="hljs-comment"># 启动</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>nginx start<br>systemctl start nginx<br><span class="hljs-comment"># 停止</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>nginx stop<br>systemctl stop nginx<br><span class="hljs-comment"># 重启</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>nginx restart<br>systemctl restart nginx<br><span class="hljs-comment"># 查看状态</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>nginx status<br>systemctl status nginx<br><span class="hljs-comment"># 重新加载</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>nginx reload<br>systemctl reload nginx<br>sudo nginx -s reload<br><span class="hljs-comment"># 若修改了/etc/nginx/nginx.conf文件，先测试配置是否正确</span><br>sudo nginx -t<br></code></pre></td></tr></table></figure><p>nginx日志文件位置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 请求日志</span><br><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>access.log<br><span class="hljs-comment"># 错误日志</span><br><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>error.log <br></code></pre></td></tr></table></figure><h2 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h2><p>运行nginx和uwsgi，访问服务器ip地址，端口为nginx的监听端口</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/zewanhuang/p/16595492.html">服务器部署 Vue 和 Django 项目的全记录 - ZewanHuang - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/shelter1234567/article/details/128065959">ubuntu安装Mysql数据库及安全配置_sudo mysql_secure_installation_昵称还在想呢的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/zhang1f/p/15771853.html">Ubuntu 中安装和配置 Nginx - Tozhang - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows下Nginx代理Django项目</title>
    <link href="/blog/posts/f0bd5174/"/>
    <url>/blog/posts/f0bd5174/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows下Nginx代理Django项目"><a href="#Windows下Nginx代理Django项目" class="headerlink" title="Windows下Nginx代理Django项目"></a>Windows下Nginx代理Django项目</h1><p>django部署到本机网络上后，出现了音频无法快进，进度条无法拖动的问题。原因是前端请求音频文件不是通过后端的api，而是直接用require方法，这样做后端的响应没有包含 Content-Range 或者 Accept-Ranges Header。解决方法有两种：</p><ol><li><p>让django响应静态文件请求时有响应头（即前端通过api请求静态文件，该方法要修改前端，还要在后端单独写方法处理请求）。</p></li><li><p>用nginx服务器处理静态文件。</p></li></ol><p>考虑将来部署到linux服务器上也需要用nginx，以及实现的难度，我采用第二种方法，即在windows下用nginx处理django项目的静态文件请求。</p><p>值得一提的是，大多数django项目部署都需要用到uwsgi和nginx，然而在windows环境下，uwsgi无法下载（或者说使用的代价太大），因此windows下还是简单部署为好，实际项目使用还是需要在linux下。</p><h2 id="nginx目的"><a href="#nginx目的" class="headerlink" title="nginx目的"></a>nginx目的</h2><p>我们使用nginx的目的是帮助django处理静态文件，nginx起到代理的作用。因此，我们要做的是：</p><ol><li><p>对于静态文件请求，nginx直接处理，无需交与django</p></li><li><p>对于后端api接口请求，nginx交与django处理</p></li></ol><p><strong>重点：nginx监听的端口和django部署的端口不能是同一个端口</strong></p><p>两个程序不能监听同一个端口，这样做会出现有的静态文件通过nginx而有的则通过django的问题。</p><p>因此，我们访问项目也不再是django项目部署的端口，而是nginx监听的端口，前端同样是向nginx监听的端口发送api接口请求。</p><h2 id="nginx下载"><a href="#nginx下载" class="headerlink" title="nginx下载"></a>nginx下载</h2><p><a href="https://nginx.org/en/download.html">nginx: download</a>官网下载stable version的windows版本并解压。</p><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>在解压后的conf文件夹中，修改nginx.conf文件，主要修改http中的server：</p><ol><li><p>listen端口号改为浏览器访问项目的端口号；</p></li><li><p>server_name改为django项目部署的ipv4地址；</p></li><li><p>添加location /app（注册的app名称）将前端发送的api请求转发给后端；</p></li><li><p>添加location /static/处理前端的静态文件请求。</p></li></ol><p><strong>注意：路径一定要正确，用 “/” 而不是 “\” 。</strong></p><p>有关location的root、alias、路径末尾是否加 “/” 的问题，参考<a href="https://mp.weixin.qq.com/s/d9Kh-7CQhMIhEpcaZ3Em_A">Nginx之location详解</a></p><p>前端的api请求应转发给后端，因为nginx是不允许静态资源请求使用POST方法的，若通过nginx处理POST请求会报错，解决方法较复杂。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">8000</span>;  <span class="hljs-comment"># nginx监听端口号，即实际访问项目的端口号</span><br>    <span class="hljs-attribute">server_name</span>  x.x.x.x;  <span class="hljs-comment"># django项目部署的ipv4地址</span><br>    <span class="hljs-comment">#charset koi8-r;</span><br><br>    <span class="hljs-comment"># location / &#123;</span><br>    <span class="hljs-comment">#     root django项目根目录（manage.py所在目录）在电脑上的绝对路径（末尾需加/）;</span><br>    <span class="hljs-comment">#     index /templates/index.html;</span><br>    <span class="hljs-comment"># &#125;</span><br><br>    <span class="hljs-section">location</span> /app &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://x.x.x.x:8001;  <span class="hljs-comment"># django项目部署的ipv4地址与端口号（前面需加上http://）</span><br>    &#125;<br><br>    <span class="hljs-section">location</span> /static/ &#123;<br>        <span class="hljs-attribute">root</span> django项目根目录（manage.py所在目录）在电脑上的绝对路径（末尾需加/）;<br>    &#125;<br><br>    <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>    <span class="hljs-section">location</span> = /50x.html &#123;<br>        <span class="hljs-attribute">root</span>   html;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h2><p>nginx常用的命令如下。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 在nginx根目录下cmd</span><br><span class="hljs-comment"># 启动</span><br>start nginx<br><span class="hljs-comment"># 检查配置文件</span><br>nginx.exe -t<br><span class="hljs-comment"># 安全停止</span><br>nginx.exe -s <span class="hljs-keyword">quit</span><br><span class="hljs-comment"># 立即停止，可能不保存相关信息</span><br>nginx.exe -s stop<br><span class="hljs-comment"># 指定配置文件启动（？）</span><br>nginx.exe -c <span class="hljs-string">./conf/nginx.conf</span><br><span class="hljs-comment"># 启动后，重新加载配置</span><br>nginx.exe -s <span class="hljs-keyword">reload</span><br></code></pre></td></tr></table></figure><p><em>指定配置文件启动命令似乎不行，使用后cmd卡死。</em></p><p><em>当nginx启动失败或报错后，需要手动在任务管理器关闭进程，此时使用命令并不能真正关闭进程。</em></p><h2 id="启动nginx运行django"><a href="#启动nginx运行django" class="headerlink" title="启动nginx运行django"></a>启动nginx运行django</h2><p>先启动nginx，启动成功后，运行django。</p><p>访问项目时浏览器地址输入的端口号为nginx监听的端口号。</p><p>在浏览器开发者工具的网络里可以查看前端发送的请求，其中server为nginx。</p><p><img src="/blog/posts/f0bd5174/%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82.png"></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+Django简单部署本地Windows</title>
    <link href="/blog/posts/da6f56bd/"/>
    <url>/blog/posts/da6f56bd/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-Django简单部署本地Windows"><a href="#Vue-Django简单部署本地Windows" class="headerlink" title="Vue+Django简单部署本地Windows"></a>Vue+Django简单部署本地Windows</h1><ol><li><p>前端配置跨域、api请求的ip地址和打包的静态资源位置</p></li><li><p>后端配置跨域、templates和static路径和路由</p></li><li><p>将vue打包放入django中，在本机ip地址上运行django即可</p></li></ol><p>该方法仅在本地windows所在的内网中可以访问</p><p>不使用uwsgi和nginx</p><h2 id="vue-axios跨域携带cookie"><a href="#vue-axios跨域携带cookie" class="headerlink" title="vue axios跨域携带cookie"></a>vue axios跨域携带cookie</h2><p>在axios的请求实例创建时配置</p><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs v"><span class="hljs-keyword">const</span> axiosInstance = Axios<span class="hljs-variable">.create</span>(&#123;<br>    withCredentials: true<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="vue-axios请求ip配置"><a href="#vue-axios请求ip配置" class="headerlink" title="vue axios请求ip配置"></a>vue axios请求ip配置</h2><p>vue axios发送后端api请求的ip地址要换成本机的实际ip地址</p><p>即将127.0.0.1:xxxx换成ipv4:xxxx</p><h2 id="vue配置打包的静态资源位置"><a href="#vue配置打包的静态资源位置" class="headerlink" title="vue配置打包的静态资源位置"></a>vue配置打包的静态资源位置</h2><p>vue.config.js增加assetsDir，使vue打包的静态文件都放在static文件夹中（不增加也行，只要将vue打包出来的所有文件夹（静态资源）都放入django项目的static文件夹中即可）</p><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs v"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = require(&#x27;@vue/cli-service&#x27;)<br><span class="hljs-keyword">module</span><span class="hljs-variable">.exports</span> = defineConfig(&#123;<br>  assetsDir: <span class="hljs-string">&quot;static&quot;</span>,  <span class="hljs-comment">// 添加</span><br>  transpileDependencies: true,<br>  lintOnSave: false<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="vue打包放入django"><a href="#vue打包放入django" class="headerlink" title="vue打包放入django"></a>vue打包放入django</h2><p>打包前先运行一下看有没有报错</p><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs v">npm run build<br></code></pre></td></tr></table></figure><p>将打包后的dist文件夹里的</p><p>static里的所有文件放到django项目里的static文件夹下（static和manage.py同级）</p><p>index.html文件放到django项目里的templates文件夹下（templates和manage.py同级）</p><h2 id="django跨域配置"><a href="#django跨域配置" class="headerlink" title="django跨域配置"></a>django跨域配置</h2><p>先安装corsheaders</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> django-cors-headers<br></code></pre></td></tr></table></figure><p>settings.py增加corsheaders</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;corsheaders&#x27;</span>,  <span class="hljs-comment"># 增加</span><br>    <span class="hljs-string">&#x27;app&#x27;</span><br>]<br><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,  <span class="hljs-comment"># 增加</span><br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br><br><span class="hljs-comment"># 在最后增加两行，根据实际情况配置</span><br>CORS_ORIGIN_ALLOW_ALL = <span class="hljs-literal">True</span><br>CORS_ALLOW_CREDENTIALS = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h2 id="django-templates和static路径配置"><a href="#django-templates和static路径配置" class="headerlink" title="django templates和static路径配置"></a>django templates和static路径配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">TEMPLATES = [<br>    &#123;<br>        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [BASE_DIR / <span class="hljs-string">&#x27;templates&#x27;</span>],  <span class="hljs-comment"># templates路径</span><br>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>        &#125;,<br>    &#125;,<br>]<br><span class="hljs-comment"># static路径</span><br>STATIC_URL = <span class="hljs-string">&#x27;static/&#x27;</span><br>STATICFILES_DIRS=[os.path.join(BASE_DIR,<span class="hljs-string">&#x27;static&#x27;</span>)]<br></code></pre></td></tr></table></figure><h2 id="django路由配置"><a href="#django路由配置" class="headerlink" title="django路由配置"></a>django路由配置</h2><p>使django能够找到vue的index.html，显示出页面</p><p>views.py添加Index类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, req</span>):<br>        <span class="hljs-keyword">return</span> render(req, <span class="hljs-string">&#x27;index.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>urls.py（与views.py同级）添加re_path</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> re_path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    // ...<br>    re_path(<span class="hljs-string">&#x27;&#x27;</span>, views.Index.as_view())  <span class="hljs-comment"># 空表示匹配全部路由，需放在最后</span><br>]<br></code></pre></td></tr></table></figure><h2 id="运行django项目"><a href="#运行django项目" class="headerlink" title="运行django项目"></a>运行django项目</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver 本机ipv4地址:端口号<br></code></pre></td></tr></table></figure><p>访问项目浏览器输入本机的ip地址与端口号再加上注册的app名字，如ipv4:8000/app</p><p>若上面命令行的ip地址是0.0.0.0，则在本机上所有的ipv4地址的对应端口都能访问该项目</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.likecs.com/show-308274532.html">vue+django开发配置(vue转发请求、跨域携带cookie) - 爱码网 (likecs.com)</a></p><p><a href="https://www.likecs.com/show-308446244.html">windows下简单部署django+vue项目(打包后) - 爱码网 (likecs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dijkstra算法及networkx与animation动画演示</title>
    <link href="/blog/posts/7c297a7f/"/>
    <url>/blog/posts/7c297a7f/</url>
    
    <content type="html"><![CDATA[<h1 id="Dijkstra算法及networkx与animation动画演示"><a href="#Dijkstra算法及networkx与animation动画演示" class="headerlink" title="Dijkstra算法及networkx与animation动画演示"></a>Dijkstra算法及networkx与animation动画演示</h1><p>用动图来演示Dijkstra算法的过程和结果，使用了python的networkx画图，animation做动画，效果如下。</p><p>图：</p><p><img src="/blog/posts/7c297a7f/graph.png"></p><p>Dijkstra算法过程：</p><p><img src="/blog/posts/7c297a7f/process.gif"></p><p>Dijkstra算法结果：</p><p><img src="/blog/posts/7c297a7f/path.gif"></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>音频处理笔记</title>
    <link href="/blog/posts/114e30c3/"/>
    <url>/blog/posts/114e30c3/</url>
    
    <content type="html"><![CDATA[<h1 id="音频处理笔记"><a href="#音频处理笔记" class="headerlink" title="音频处理笔记"></a>音频处理笔记</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><h3 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h3><p>声音由空气压力的变化而产生。声音信号通常由不同频率的信号组合而成。</p><p>为了能够将声音输入模型中，我们需要将声波数字化，即将信号转换为一系列的数字。这是通过以固定时间间隔测量声音的振幅来完成的，即采样。采样率是每秒采样出的样本数，常见的采样率约为每秒44100个样本。</p><p><img src="/blog/posts/114e30c3/%E4%BF%A1%E5%8F%B7%E9%87%87%E6%A0%B7.png"></p><h3 id="音频数据处理方式"><a href="#音频数据处理方式" class="headerlink" title="音频数据处理方式"></a>音频数据处理方式</h3><p>过去的音频机器学习应用程序依赖于传统的数字信号处理技术来提取特征。例如，用语音学概念分析音频信号以提取音素等元素。所有这些方法都大量特定领域的专业知识。</p><p>随着深度学习的发展，处理音频的方式不再使用传统的音频处理技术，无需通过大量手动操作和自定义来生成特征，而是采用由音频生成频谱图的技术。</p><h3 id="频谱Spectrum"><a href="#频谱Spectrum" class="headerlink" title="频谱Spectrum"></a>频谱Spectrum</h3><p>频谱是组合产生信号的一组频率。频谱绘制了信号中存在的所有频率以及每个频率的强度或幅度。信号中最低的频率称为基频。基频的整数倍频率称为谐波。</p><p><img src="/blog/posts/114e30c3/Spectrum.gif"></p><p>通常我们看的波形是信号的时域表示，表示振幅随时间的变化。频谱是信号的频域表示，表示再某个时刻，振幅与频率的关系。</p><p><img src="/blog/posts/114e30c3/%E6%97%B6%E5%9F%9F%E5%92%8C%E9%A2%91%E5%9F%9F.png"></p><h3 id="频谱图spectrogram"><a href="#频谱图spectrogram" class="headerlink" title="频谱图spectrogram"></a>频谱图spectrogram</h3><p>声音信号的组成频率是随时间变化的，因此频谱随时间而变化。</p><p>频谱图是音频信号的等效紧凑表示，就像信号的“指纹”，它将音频数据的基本特征捕获为图像。</p><p>频谱图绘制了时间与频谱的关系，x轴为时间，y轴为频率。</p><p>频谱图使用不同的颜色来表示频率的幅度或强度。颜色月亮，信号的能量就越高。频谱图每个垂直的“切片”本质上是信号在该时刻的频谱，并表示信号强度如何分布在该时刻信号中的每个频率中。</p><p>频谱图是使用傅立叶变化将信号分解为其组成频率而生成的。首先将声音信号分为一系列持续时间很短的信号片段；然后对每个段应用傅立叶变换获取该段的组成频率，并显示信号中存在的每个频率的幅度；最后将所有这些片段的傅立叶变换组合成一个图即为频谱图。</p><h3 id="人耳"><a href="#人耳" class="headerlink" title="人耳"></a>人耳</h3><p>我们通常所说的“音高”，其实为声音的频率。音调高的声音具有比音调低的声音更高的频率。人类不会线性感知频率，与高频相比，人类对低频之间的差异更敏感。</p><p>我们通常所说的“响度”，其实为声音的振幅。人们对振幅的感知同样也不是线性的。</p><p>事实上，人耳对频率和响度的感知都是对数的。</p><p>为了以真实的方式处理声音，在处理数据中的频率和振幅时，需要使用对数标度，即梅尔标度（频率）和分贝标度（振幅）。这正是Mel Spectrogram的目的。</p><p><img src="/blog/posts/114e30c3/Mel.gif"></p><p><img src="/blog/posts/114e30c3/Decibel_scale.jpg"></p><h2 id="2-处理"><a href="#2-处理" class="headerlink" title="2 处理"></a>2 处理</h2><h3 id="音频信号的内存表示"><a href="#音频信号的内存表示" class="headerlink" title="音频信号的内存表示"></a>音频信号的内存表示</h3><p>在内存中，音频表示为数字的时间序列，表示每个时间步长的振幅。例如，如果采样率为 44100，则一秒的音频剪辑将有 44100 个数字。由于测量是在固定的时间间隔进行的，因此数据仅包含振幅数字而不包含时间值。给定采样率，我们可以计算出每次振幅数测量是在什么时刻进行的。</p><p>位深度（bit-depth）告诉我们每个样本的幅度测量值可以取多少个可能的值。例如，位深度为 16 表示振幅数可以介于 0 和 65535 (2 16 - 1) 之间。位深度影响音频测量的分辨率——位深度越高，音频保真度越好。</p><p><img src="/blog/posts/114e30c3/SSampling.png"></p><h3 id="waveform"><a href="#waveform" class="headerlink" title="waveform"></a>waveform</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> librosa.display<br><span class="hljs-keyword">import</span> sklearn<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pl<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npt<br><br>AUDIO_FILE = <span class="hljs-string">&#x27;./audio/周杰伦 - 晴天.mp3&#x27;</span><br><br>samples, sample_rate = librosa.load(AUDIO_FILE, sr=<span class="hljs-literal">None</span>)<br>librosa.display.waveshow(samples, sr=sample_rate)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/blog/posts/114e30c3/waveform.png"></p><h3 id="spectrogram"><a href="#spectrogram" class="headerlink" title="spectrogram"></a>spectrogram</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 短时傅里叶变换，返回一个复数矩阵D(F，T)</span><br>sgram = librosa.stft(samples)<br>librosa.display.specshow(sgram)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/blog/posts/114e30c3/spectrogram.png"></p><p>显然，在该频谱图上看不到太多信息。发生这种情况的原因是人耳感知声音的方式是对数的，人类能够听到的大部分声音都集中在一个狭窄的频率和振幅范围内。</p><h3 id="Mel-Spectrogram"><a href="#Mel-Spectrogram" class="headerlink" title="Mel Spectrogram"></a>Mel Spectrogram</h3><p>相对于常规的频谱图，梅尔频谱图有两个重要的变化：</p><ul><li><p>y轴使用梅尔刻度而不是频率</p></li><li><p>使用Decibel Scale而不是Amplitude来指示颜色</p></li></ul><p>深度学习通常使用梅尔频谱图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将复数矩阵D(F, T)分离为幅值𝑆和相位𝑃的函数，返回幅值S，相位P</span><br>sgram_mag, _ = librosa.magphase(sgram)<br><span class="hljs-comment"># 计算梅尔频谱</span><br>mel_scale_sgram = librosa.feature.melspectrogram(S=sgram_mag, sr=sample_rate)<br>librosa.display.specshow(mel_scale_sgram)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/blog/posts/114e30c3/mel-spectrogram1.png"></p><p>这好多了，但大部分仍然很暗，可见没有携带足够的有用信息。因此，我们修改它以分贝比例而不是振幅。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 幅值转dB，将幅度频谱转换为dB标度频谱。也就是对S取对数</span><br>mel_sgram = librosa.amplitude_to_db(mel_scale_sgram, ref=np.<span class="hljs-built_in">min</span>)<br>librosa.display.specshow(mel_sgram, sr=sample_rate, x_axis=<span class="hljs-string">&#x27;time&#x27;</span>, y_axis=<span class="hljs-string">&#x27;mel&#x27;</span>)<br>plt.colorbar(<span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%+2.0f dB&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/blog/posts/114e30c3/mel-spectrogram2.png"></p><p>这就是我们真正想要的。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="傅立叶变换"><a href="#傅立叶变换" class="headerlink" title="傅立叶变换"></a>傅立叶变换</h3><p>离散傅立叶变换（DFT）：计算成本高，实践中较少用。</p><p>快速傅立叶变换（FFT）：计算音频信号整个时间序列的整体频率分量。但无法得知频率分量在音频信号中随时间的变化情况。</p><p>短时傅里叶变换（STFT）：使用滑动时间窗口将音频信号分解成更小的部分，对每个部分进行FFT，最终组合在一起。能够捕获频率随时间的变化。</p><p>STFT将音频信号分别沿时间轴和频率轴分为多个部分。它对整个频率范围进行划分，在梅尔尺度中分为等距的频带。STFT对每个时间段计算每个频带的振幅或能量。</p><p><img src="/blog/posts/114e30c3/STFT.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 频谱图是二维的numpy数组，（频段数，时间段数）</span><br><span class="hljs-comment"># 数组中的每个数字都是对应时间段和频段信号的振幅</span><br><span class="hljs-comment"># 数组中的每一列都成为梅尔谱图图像中的一列</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mel_sgram), mel_sgram.shape)<br><span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt; (128, 23235)</span><br></code></pre></td></tr></table></figure><h3 id="梅尔谱图超参数"><a href="#梅尔谱图超参数" class="headerlink" title="梅尔谱图超参数"></a>梅尔谱图超参数</h3><p>用于调整梅尔谱图的超参数，使用Librosa的参数名称。（其他库也具有等效参数）</p><p>频段</p><ul><li><p>fmin：最小频率</p></li><li><p>fmax：要显示的最大频率</p></li><li><p>n_mels：频带数（即梅尔箱）。这是频谱图的高度</p></li></ul><p>时间段</p><ul><li><p>n_fft：每个时间段的窗口长度</p></li><li><p>hop_length：每一步滑动窗口的样本数。频谱图宽度=样本总数/hop_length</p></li></ul><h3 id="MFCC（梅尔频率倒谱系数）"><a href="#MFCC（梅尔频率倒谱系数）" class="headerlink" title="MFCC（梅尔频率倒谱系数）"></a>MFCC（梅尔频率倒谱系数）</h3><p>对于处理人类语音的问题，MFCC有时效果更好。</p><p>MFCC可以从梅尔谱图中选择与人类说话最常见的频率相对应的频带的压缩表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 提取MFCC特征</span><br>mfcc = librosa.feature.mfcc(samples, sr=sample_rate)<br><span class="hljs-comment"># 执行特征缩放，使得每个系数维度具有零均值和单位方差</span><br>mfcc = sklearn.preprocessing.scale(mfcc, axis=<span class="hljs-number">1</span>)<br>librosa.display.specshow(mfcc, sr=sample_rate, x_axis=<span class="hljs-string">&#x27;time&#x27;</span>)<br>plt.show()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mfcc), mfcc.shape)<br><span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt; (20, 23235)</span><br></code></pre></td></tr></table></figure><p><img src="/blog/posts/114e30c3/mfcc.png"></p><p>MFCC从音频中提取出的特征比梅尔谱图更少，这些特征与捕捉声音的基本质量最相关。</p><h3 id="频谱图增强"><a href="#频谱图增强" class="headerlink" title="频谱图增强"></a>频谱图增强</h3><p>应用于图像的变换不适用于频谱图。例如翻转或旋转等。</p><p>使用SpecAugment，屏蔽频谱图的某个部分，有两种方式：</p><ul><li><p>Frequency mask：使用水平条随机屏蔽一系列连续频率</p></li><li><p>Time mask：使用垂直条随机屏蔽一段时间范围</p></li></ul><h3 id="原始音频增强"><a href="#原始音频增强" class="headerlink" title="原始音频增强"></a>原始音频增强</h3><ul><li><p>Time shift：将音频向左或向右移动一个随机量（对于没有特定顺序的交通或海浪等声音，音频可以环绕；对于顺序很重要的人类语音等声音，间隙可以用静音填充）</p></li><li><p>Pitch shift：随机修改声音部分的频率</p></li><li><p>Time stretch：随机放慢或加快声音</p></li><li><p>Add noise：为声音添加一些随机值</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://towardsdatascience.com/audio-deep-learning-made-simple-part-1-state-of-the-art-techniques-da1d3dff2504">Audio Deep Learning Made Simple (Part 1): State-of-the-Art Techniques | by Ketan Doshi | Towards Data Science</a></p><p><a href="https://towardsdatascience.com/audio-deep-learning-made-simple-part-2-why-mel-spectrograms-perform-better-aad889a93505">Audio Deep Learning Made Simple (Part 2): Why Mel Spectrograms perform better | by Ketan Doshi | Towards Data Science</a></p><p><a href="https://towardsdatascience.com/audio-deep-learning-made-simple-part-3-data-preparation-and-augmentation-24c6e1f6b52">Audio Deep Learning Made Simple (Part 3): Data Preparation and Augmentation | by Ketan Doshi | Towards Data Science</a></p><p><a href="https://lxkaka.wang/audio-process/">深度学习中的常用音频处理方法 - lxkaka</a></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Diffusion Model笔记</title>
    <link href="/blog/posts/33d4eadd/"/>
    <url>/blog/posts/33d4eadd/</url>
    
    <content type="html"><![CDATA[<h1 id="Diffusion-Model笔记"><a href="#Diffusion-Model笔记" class="headerlink" title="Diffusion Model笔记"></a>Diffusion Model笔记</h1><h2 id="扩散过程"><a href="#扩散过程" class="headerlink" title="扩散过程"></a>扩散过程</h2><p>对初始数据分布$x_0$~q(x)，不断添加高斯噪声，最终使数据分布$X_T$变成各项独立的高斯分布。</p><ul><li><p>前向扩散过程的定义</p><p>$q(x_t|x_{t-1})=N(x_t;\sqrt{1-\beta_t}x_{t-1},\beta_tI)$</p><p>$q(x_{1:T}|x_0)=\prod_{t=1}^Tq(x_t|x_{t-1})$（马尔科夫链过程）</p></li><li><p>通过重参数化技巧，可以推导出任意时刻的$q(x_t)$，无需做迭代</p><p>$x_t=\sqrt{\alpha_t}x_{t-1}+\sqrt{1-\alpha_t}z_{t-1}=…=\sqrt{\overline{\alpha}_t}x_0+\sqrt{1-\overline{\alpha}_t}z$</p><p>其中$\overline{\alpha_t}=\prod_{i=1}^T\alpha_i$；参数重整化体现为$\sqrt{\alpha_t}(\sqrt{\alpha_{t-1}}x_{t-2}+\sqrt{1-\alpha_{t-1}}z_{t-2})+\sqrt{1-\alpha_t}z_{t-1}$中，$\sqrt{\alpha_t-\alpha_t\alpha_{t-1}}z_{t-2}+\sqrt{1-\alpha_t}z_{t-1}$为两个正态分布叠加，可以重参数化为$\sqrt{1-\alpha_t\alpha_{t-1}}\overline{z}_{t-2}$</p></li><li><p>每个时间步所添加的噪声的标准差$\beta_t$给定，且随t增大而增大</p></li><li><p>每个时间步所添加的噪声的均值与$\beta_t$有关，为了使$x_T$稳定收敛到$N(0,1)$</p></li><li><p>由$\mathbf{x_t=\sqrt{\overline{\alpha_t}}x_0+\sqrt{1-\overline{\alpha_t}}z}$可得</p><ul><li><p>$\mathbf{q(x_t|x_0)=N(x_t;\sqrt{\overline{\alpha}_t}x_0,(1-\overline{\alpha}_t)I)}$</p></li><li><p>随着不断加噪，$x_t$逐渐接近纯高斯噪声</p></li><li><p>$\mathbf{x_0=\frac{1}{\sqrt{\overline{\alpha}_t}}(x_t-\sqrt{1-\overline{\alpha}_t}z_t)}$</p></li></ul></li><li><p>扩散过程中的后验条件概率$q(x_{t-1}|x_t,x_0)$可以用公式表达，即给定$x_t$、$x_0$，可计算出$x_{t-1}$</p><p>假设$\beta_t$足够小时，$\mathbf{q(x_{t-1}|x_t,x_0)=N(x_{t-1};\tilde{\mu}(x_t,x_0),\tilde{\beta_t}I)}$</p><p>通过高斯分布的概率密度函数和贝叶斯以及二次函数的均值和方差计算可得（具体推导过程省略）$\mathbf{\tilde{\mu}_t=\frac{1}{\sqrt{\alpha_t}}(x_t-\frac{\beta_t}{\sqrt{1-\overline{\alpha}_t}}z_t)}$</p><p>即在$x_0$条件下，后验条件概率分布可通过$x_t$和$z_t$计算得到</p></li></ul><h2 id="逆扩散过程"><a href="#逆扩散过程" class="headerlink" title="逆扩散过程"></a>逆扩散过程</h2><p>从高斯噪声$x_T$中逐步还原出原始数据$x_0$。马尔科夫链过程。</p><ul><li>$\mathbf{p_{\theta}(x_{t-1}|x_t)=N(x_{t-1};\mu_{\theta}(x_t,t),\Sigma_{\theta}(x_t,t)}$$p_{\theta}(x_{0:T})=p(x_T)\prod_{t-1}^Tp_{\theta}(x_{t-1}|x_t)$</li></ul><h2 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h2><p>对负对数似然$L=E_{q(x_0)}[-logp_\theta(x_0)]$使用变分下限（VLB），并进一步推导化简得到最终loss</p><ul><li><p>$\mathbf{L_t^{simple}=E_{t,x_0,\epsilon}[||\epsilon-\epsilon_\theta(\sqrt{\overline{\alpha}_t}x_0+\sqrt{1-\overline{\alpha}_t}\epsilon,t)||^2]}$</p></li><li><p>在推导的过程中，loss转换为$q(x_{t-1}|x_t,x_0)=N(x_{t-1};\tilde{\mu}(x_t,x_0),\tilde{\beta_t}I)$与$p_{\theta}(x_{t-1}|x_t)=N(x_{t-1};\mu_{\theta}(x_t,t),\Sigma_{\theta}(x_t,t)$两个高斯分布之间的KL散度，将$\mu$与$x_t$的公式代入将loss转化为$\epsilon$、$x_0$、$t$的公式</p></li><li><p>DDPM作者采用了预测随机变量（噪声）法，并不直接预测后验分布的期望值或原始数据</p></li><li><p>DDPM作者将方差$\Sigma_{\theta}(x_t,t)$用给定的$\beta_t$或$\tilde{\beta_t}$代替，训练参数只存在均值中，为了使训练更加稳定</p></li></ul><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><ol><li><p>给出原始数据$x_0 \sim q(x_0)$</p></li><li><p>设定$t \sim Uniform({1,…,T})$</p></li><li><p>从标准高斯分布采样一个噪声$\epsilon \sim N(0,I)$</p></li><li><p>采用梯度下降法优化目标函数$||\epsilon-\epsilon_\theta(\sqrt{\overline{\alpha}_t}x_0+\sqrt{1-\overline{\alpha}_t}\epsilon,t)||$</p></li></ol><h2 id="推断过程"><a href="#推断过程" class="headerlink" title="推断过程"></a>推断过程</h2><ol><li><p>每个时间步通过$x_t$和$t$计算$p_{\theta}(x_{t-1}|x_t)=N(x_{t-1};\mu_{\theta}(x_t,t),\Sigma_{\theta}(x_t,t))$</p></li><li><p>通过重参数从$p_{\theta}(x_{t-1}|x_t)$中采样得到$x_{t-1}$</p></li><li><p>通过不断迭代最终得到$x_0$</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li><p>定义时间步数、$\beta_t$、$\sqrt{\overline{\alpha_t}}$等公式计算中需要用到的常量</p><p>$\mathbf{x_t=\sqrt{\overline{\alpha_t}}x_0+\sqrt{1-\overline{\alpha_t}}z}$</p><p>$\mathbf{\mu_\theta=\frac{1}{\sqrt{\alpha_t}}(x_t-\frac{\beta_t}{\sqrt{1-\overline{\alpha}_t}}z_\theta(x_t,t))}$</p><p>$\mathbf{\Sigma_{\theta}(x_t,t)=\tilde{\beta_t}=\beta_t}$</p><p><em>DDPM论文中作者将时间步数$T$设置为1000，$\beta_t$为0.0001到0.02之间的线性插值</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">num_timesteps = <span class="hljs-number">1000</span><br>schedule_low = <span class="hljs-number">1e-4</span><br>schedule_high = <span class="hljs-number">0.02</span><br>betas = torch.tensor(np.linspace(schedule_low, schedule_high, num_timesteps), dtype=torch.float32)<br><br>alphas = <span class="hljs-number">1</span> - betas<br>alphas_cumprod = np.cumprod(alphas)<br>sqrt_alphas_cumprod = np.sqrt(alphas_cumprod)<br>sqrt_one_minus_alphas_cumprod = np.sqrt(<span class="hljs-number">1</span> - alphas_cumprod)<br>reciprocal_sqrt_alphas = np.sqrt(<span class="hljs-number">1</span> / alphas)<br>betas_over_sqrt_one_minus_alphas_cumprod = (betas / sqrt_one_minus_alphas_cumprod)<br>sqrt_betas = np.sqrt(betas)<br></code></pre></td></tr></table></figure></li><li><p>前向扩散过程</p><p>$\mathbf{x_t=\sqrt{\overline{\alpha_t}}x_0+\sqrt{1-\overline{\alpha_t}}z}$</p><p>$\mathbf{||\epsilon-\epsilon_\theta(\sqrt{\overline{\alpha}_t}x_0+\sqrt{1-\overline{\alpha}_t}\epsilon,t)||}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward_diffusion_process</span>(<span class="hljs-params">model, x0, num_timesteps, sqrt_alphas_cumprod, sqrt_one_minus_alphas_cumprod</span>):<br>    batch_size = x0.shape[<span class="hljs-number">0</span>]<br>    t = torch.randint(<span class="hljs-number">0</span>, num_timesteps, size=(batch_size,))<br>    noise = torch.randn_like(x0)<br>    xt = sqrt_alphas_cumprod[t] * x0 + sqrt_one_minus_alphas_cumprod[t] * noise<br>    estimated_noise = model(xt, t)<br>    loss = (noise - estimated_noise).square().mean()<br>    <span class="hljs-keyword">return</span> loss<br></code></pre></td></tr></table></figure></li><li><p>逆向扩散过程</p><p>$\mathbf{p_{\theta}(x_{t-1}|x_t)=N(x_{t-1};\mu_{\theta}(x_t,t),\Sigma_{\theta}(x_t,t))}$</p><p>$\mathbf{\mu_\theta(x_t,t)=\frac{1}{\sqrt{\alpha_t}}(x_t-\frac{\beta_t}{\sqrt{1-\overline{\alpha}_t}}z_\theta(x_t,t))}$</p><p>$\mathbf{\Sigma_{\theta}(x_t,t)=\tilde{\beta_t}=\beta_t}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_diffusion_process</span>(<span class="hljs-params">model, shape, num_timesteps, reciprocal_sqrt_alphas, betas_over_sqrt_one_minus_alphas_cumprod, sqrt_betas</span>):<br>    current_x = torch.randn(shape)<br>    x_seq = [current_x]<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(num_timesteps)):<br>        current_x = sample(model, current_x, t, shape[<span class="hljs-number">0</span>], reciprocal_sqrt_alphas, betas_over_sqrt_one_minus_alphas_cumprod, sqrt_betas)<br>        x_seq.append(current_x)<br>    <span class="hljs-keyword">return</span> x_seq<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sample</span>(<span class="hljs-params">model, xt, t, batch_size, reciprocal_sqrt_alphas, betas_over_sqrt_one_minus_alphas_cumprod, sqrt_betas</span>):<br>    ts = torch.full([batch_size, <span class="hljs-number">1</span>], t)<br>    estimated_noise = model(xt, ts)<br>    mean = reciprocal_sqrt_alphas[ts] * (xt - betas_over_sqrt_one_minus_alphas_cumprod[ts] * estimated_noise)<br>    <span class="hljs-keyword">if</span> t &gt; <span class="hljs-number">0</span>:<br>        z = torch.randn_like(xt)<br>    <span class="hljs-keyword">else</span>:<br>        z = <span class="hljs-number">0</span><br>    sample = mean + sqrt_betas[t] * z<br>    <span class="hljs-keyword">return</span> sample<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub+Hexo博客网站搭建（二）</title>
    <link href="/blog/posts/973f8e3f/"/>
    <url>/blog/posts/973f8e3f/</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Hexo博客网站搭建（二）"><a href="#GitHub-Hexo博客网站搭建（二）" class="headerlink" title="GitHub+Hexo博客网站搭建（二）"></a>GitHub+Hexo博客网站搭建（二）</h1><h2 id="图片无法正常加载"><a href="#图片无法正常加载" class="headerlink" title="图片无法正常加载"></a>图片无法正常加载</h2><p>Hexo网页无法正常加载图片</p><p>解决方法：</p><ol><li><p>_config.yml和主题的_config.theme.yml里的<code>post_asset_folder</code>设置为true（这样每篇文章都会有对应同名的文件夹，图片就放在这里面）</p></li><li><p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code>（一定要有前面的网址，不能只有hexo-asset-image，这是个坑，害我搞了好久）（因为默认hexo-asset-image下载的插件是有问题的，原因可能是这个插件是好几年前写的，适用于当时的hexo版本，现在hexo版本更新了就不再适用了）</p></li><li><p>markdown正常插入图片（即<code>![image_introduction](blog_name/image_name.jpg)</code>）</p></li></ol><h2 id="图片无法居中"><a href="#图片无法居中" class="headerlink" title="图片无法居中"></a>图片无法居中</h2><p>hexo网页的图片总是左对齐，无法居中</p><p>解决方法：</p><ol><li>使用HTML标签，注意该段代码不能放在代码栏中，成功时代码不显示，显示的是图片</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图片的绝对路径或与本文档的相对路径&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;鼠标移动到图片上显示该内容&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">img</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="公式无法正常加载"><a href="#公式无法正常加载" class="headerlink" title="公式无法正常加载"></a>公式无法正常加载</h2><p>Hexo网页无法正常加载公式</p><p>解决方法：</p><ol><li><p>在theme文件夹里找到主题的配置文件_config.yml</p></li><li><p>把<code>mathjax </code>下面的<code>enable</code> 设置为 true（到这里只解决了行间公式，即<code>$fomula$</code>）</p></li><li><p>在有数学公式的markdown文件里的front-matter（即最开头那块）里加上<code>mathjax: true</code>（到这里才更进一步解决了公式块，即<code>$$fomula$$</code>）</p></li></ol><h2 id="文章标题下方显示最后更新时间"><a href="#文章标题下方显示最后更新时间" class="headerlink" title="文章标题下方显示最后更新时间"></a>文章标题下方显示最后更新时间</h2><p>在themes\fluid\layout_partials\post\meta-top.ejs文件中的最后一行之前加上代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;% if (page.meta !== false) &#123; %&gt;<br>    &lt;!-- ... --&gt;<br>    &lt;!-- 添加span块 --&gt;<br>  &lt;span class=&quot;myupdated&quot;&gt;<br>    &lt;% if (theme.post.updated &amp;&amp; compare_date(page.date, page.updated)) &#123; %&gt;<br>      &lt;i class=&quot;fa fa-repeat&quot; aria-hidden=&quot;true&quot; style=&quot;margin-right: 0.3rem;&quot;&gt;&lt;/i&gt;<br>      &lt;span class=&quot;post-meta &quot;&gt;<br>        &lt;% if (theme.post.updated.relative) &#123; %&gt;<br>          &lt;% if (theme.post.updated.content) &#123; %&gt;<br>            &lt;!-- compatible with older versions--&gt;<br>            &lt;%- theme.post.updated.content %&gt;&lt;%- relative_date(page.updated, theme.post.updated.date_format) %&gt;<br>          &lt;% &#125; else &#123; %&gt;<br>            &lt;%- __(&#x27;post.updated&#x27;, relative_date(page.updated, theme.post.updated.date_format)) %&gt;<br>          &lt;% &#125; %&gt;<br>        &lt;% &#125; else &#123; %&gt;<br>          &lt;% if (theme.post.updated.content) &#123; %&gt;<br>            &lt;!-- compatible with older versions--&gt;<br>            &lt;%- theme.post.updated.content %&gt;&lt;%- date(page.updated, theme.post.updated.date_format) %&gt;<br>          &lt;% &#125; else &#123; %&gt;<br>            &lt;%- __(&#x27;post.updated&#x27;, date(page.updated, theme.post.updated.date_format)) %&gt;<br>          &lt;% &#125; %&gt;<br>        &lt;% &#125; %&gt;<br>      &lt;/span&gt;<br>    &lt;% &#125; %&gt;<br>  &lt;/span&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    
    <categories>
      
      <category>GitHub个人网站搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Transformer笔记</title>
    <link href="/blog/posts/7b049359/"/>
    <url>/blog/posts/7b049359/</url>
    
    <content type="html"><![CDATA[<h1 id="Transformer笔记"><a href="#Transformer笔记" class="headerlink" title="Transformer笔记"></a>Transformer笔记</h1><p>     <img src="/blog/posts/7b049359/transformer_model.jpg"></p><h2 id="Input-Embedding"><a href="#Input-Embedding" class="headerlink" title="Input Embedding"></a>Input Embedding</h2><h3 id="One-Hot-Encoding"><a href="#One-Hot-Encoding" class="headerlink" title="One-Hot Encoding"></a>One-Hot Encoding</h3><p>将输入单词用one-hot形式编码成序列向量，向量长度就是预定义的词汇表中拥有的词汇量，向量在这一维中的值只有一个位置是1，其余都是0，1对应的位置就是词汇表中表示这个单词的地方</p><p>劣势：稀疏；长</p><h3 id="Word-Embedding"><a href="#Word-Embedding" class="headerlink" title="Word Embedding"></a>Word Embedding</h3><p>设计一个可学习的权重矩阵W，将one-hot词向量与这个矩阵进行点乘，得到新的表示结果</p><p>优势：降维</p><h3 id="Position-Encoding"><a href="#Position-Encoding" class="headerlink" title="Position Encoding"></a>Position Encoding</h3><p>预定义函数，通过函数计算出位置信息<br>$PE_{(pos,2i)}=sin(pos/10000^{2i/d})$</p><p>$PE_{(pos,2i+1)}=cos(pos/10000^{2i/d})$<br>这种编码方式保证了不同位置在所有维度上不会被编码到完全一样的值</p><h3 id="Transformer对输入的操作概括"><a href="#Transformer对输入的操作概括" class="headerlink" title="Transformer对输入的操作概括"></a>Transformer对输入的操作概括</h3><p>word embedding + position embedding = final representation</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/e6b5b463cf7b">Transformer 修炼之道（一）、Input Embedding</a></p><h2 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h2><p>Encoder由多个（通常6个）层组成，每个层内部都有<strong>残差连接</strong>和<strong>归一化操作</strong>，主要内容包括<strong>多头自注意力层</strong>（Multi-Head Self-Attention）和<strong>前向反馈网络层</strong>（Feed Forward Network），前者用于捕捉特征之间的关系，后者是进一步编码学习，实质上等同于MLP（Multi-Layer Perception）</p><h3 id="Multi-Head-Self-Attention"><a href="#Multi-Head-Self-Attention" class="headerlink" title="Multi-Head Self-Attention"></a>Multi-Head Self-Attention</h3><p>多头（多个，通常为8）</p><ol><li><p>对输入做不同的线性变换生成<strong>Q（Query）、K（Key）、V（Value）</strong></p></li><li><p><strong>Scaled Dot-Product Attention</strong>（对Q、K、V进行计算得到输出）</p><p>$$<br>Attention(Q,K,V)=softmax(\frac{Q K^T}{\sqrt{d_k}})V \<br>d_k是Q,K矩阵的列数，即向量维度<br>$$</p><p>除以\sqrt{d_k}的原因是防止Q和K的点积值过大（\sqrt{d_k}即Q的列数，也是K的行数），避免在经过softmax后梯度太小</p></li><li><p>将多个自注意力的输出拼接起来，再进行线性变换</p></li></ol><h3 id="Feed-Forward-Network（FFN）"><a href="#Feed-Forward-Network（FFN）" class="headerlink" title="Feed Forward Network（FFN）"></a>Feed Forward Network（FFN）</h3><p>两个全连接层，其中一个带ReLU激活，两层中间有Dropout<br>$FFN(x)=max(0,xW_1+b_1)W_2+b_2$</p><h3 id="Add-amp-Norm"><a href="#Add-amp-Norm" class="headerlink" title="Add &amp; Norm"></a>Add &amp; Norm</h3><p>$$<br>LayerNorm(X+MultiHeadAttention(X)) \<br>LayerNorm(X+FeedForward(X))<br>$$</p><p>Add：输入加输出（残差连接）</p><p>Norm：Layer Normalization，通常为$\frac{x-\mu}{\sigma}$，$\mu$表示均值$\sigma$表示标准差</p><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/81901d3d3f8e">Transformer 修炼之道（二）、Encoder</a></p><h2 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h2><h3 id="Multi-Head-Attention-with-Mask"><a href="#Multi-Head-Attention-with-Mask" class="headerlink" title="Multi-Head Attention with Mask"></a>Multi-Head Attention with Mask</h3><p>mask：忽略某些位置（要预测的之后的内容），不计算与其相关的注意力权重（下三角矩阵，以极大负值代替0，从而使得其经过softmax后生成的概率趋近于0，相当于不计算这些位置的注意力权重）</p><h3 id="Encoder-Decoder-Attention"><a href="#Encoder-Decoder-Attention" class="headerlink" title="Encoder-Decoder Attention"></a>Encoder-Decoder Attention</h3><p>其实是多头自注意力，K和V来自Encoder的输出，Q：如果是Decoder的第一层，则使用（已解码的）输入序列（最开始则是起始字符）；如果是后面的层，则是前面层的输出</p><h3 id="Output-Generator"><a href="#Output-Generator" class="headerlink" title="Output Generator"></a>Output Generator</h3><p>实质是线性层，将解码的序列映射回原来的空间维度，然后经过softmax（或log-softmax）生成预测概率</p><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/2ee8a87bcd29">Transformer 修炼之道（三）、Decoder</a></p><h2 id="Transformer总结"><a href="#Transformer总结" class="headerlink" title="Transformer总结"></a>Transformer总结</h2><ul><li>Transformer 与 RNN 不同，可以比较好地并行训练</li><li>Transformer 本身是不能利用单词的顺序信息的，因此需要在输入中添加位置 Embedding，否则 Transformer 就是一个词袋模型了</li><li>Transformer 的重点是 Self-Attention 结构，其中用到的 Q, K, V矩阵通过输出进行线性变换得到</li><li>Transformer 中 Multi-Head Attention 中有多个 Self-Attention，可以捕获单词之间多种维度上的相关系数 attention score</li></ul><h2 id="整体可参考"><a href="#整体可参考" class="headerlink" title="整体可参考"></a>整体可参考</h2><p><a href="https://zhuanlan.zhihu.com/p/338817680">Transformer模型详解（图解最完整版）</a></p><h2 id="变种"><a href="#变种" class="headerlink" title="变种"></a>变种</h2><h3 id="Sandwich-Transformer"><a href="#Sandwich-Transformer" class="headerlink" title="Sandwich Transformer"></a>Sandwich Transformer</h3><p>变换了self-attention和FFN的顺序</p><h3 id="Universal-Transformer"><a href="#Universal-Transformer" class="headerlink" title="Universal Transformer"></a>Universal Transformer</h3><p>在深度上加上循环，增加通用性</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub+Hexo博客网站搭建（一）</title>
    <link href="/blog/posts/a72962e7/"/>
    <url>/blog/posts/a72962e7/</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Hexo博客网站搭建（一）"><a href="#GitHub-Hexo博客网站搭建（一）" class="headerlink" title="GitHub+Hexo博客网站搭建（一）"></a>GitHub+Hexo博客网站搭建（一）</h1><p>弄一个自己的网站，可以放一些平时写的笔记或找到的资料什么的。</p><h2 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h2><p>网站的搭建其实很简单，在GitHub上新建一个repository，把名字命名为username.github.io就行。</p><p>网站有了，如何写文章？这里不需涉及到前端的编程。有一个叫框架的东西，可以帮我们实现前端，我们要做的就是写markdown就行了。我没用GitHub默认的框架，用的是Hexo。</p><p>接下来就是把网站换成Hexo框架。需要下两个东西，Git和Node.js。</p><p>Git是GitHub必备，主要目的就是为了方便项目管理，在本地更新项目后git上去比在GitHub上操作方便多了。</p><p>Node.js是Hexo的基础，就是Hexo是基于Node.js的。</p><p>详细的搭建步骤<a href="https://blog.csdn.net/qq_39400113/article/details/104703467?spm=1001.2014.3001.5501">Github+Hexo+matery博客搭建_果果小师弟的博客-CSDN博客</a></p><h2 id="网站主题"><a href="#网站主题" class="headerlink" title="网站主题"></a>网站主题</h2><p>网站主题就是网页显示的样子，主题有很多，萝卜青菜各有所爱，我选用的是Fluid。</p><p>安装的详细步骤<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">开始使用 | Hexo Fluid 用户手册</a></p><h2 id="多电脑写博客"><a href="#多电脑写博客" class="headerlink" title="多电脑写博客"></a>多电脑写博客</h2><p>因为工位有电脑，自己也有一台，所以如果两台电脑都能写博客， 就会很方便。</p><p>这个方法其实就是把博客的所有内容也都放到GitHub上，然后要写博客就更新一下本地的repository，写好博客后再更新到GitHub上。</p><p>所以Git和Hexo都是必备的。</p><p>具体步骤可以参考：</p><p><a href="https://blog.csdn.net/qq_30105599/article/details/118302086">多台电脑同步更新Hexo博客___tourist的博客-CSDN博客_hexo 多台电脑</a></p><h2 id="多电脑写博客改进"><a href="#多电脑写博客改进" class="headerlink" title="多电脑写博客改进"></a>多电脑写博客改进</h2><p>上面的方法是没毛病，但是有个问题，就是这样做的话源文件都公开了，安全性不太好。虽然可能也没多少人看，也没人愿意抄，真想搞到文章也拦不住，但是还是保护一下源文件，不然心里膈应。</p><p>刚开始试了把repository改成私有的，但是这样就没有公开的网站了；也试了lock branch的分支保护规则，但是只是不允许别人push，clone还是可以的呀。</p><p>所以想出一个解决方法就是，把源文件放在一个新的repository里，让这个repository是私有的，发布的网页还是放在原来的repository里。</p><p>操作很简单：</p><ol><li><p>新建一个私有的repository</p></li><li><p>在私有repository里随便添加个文件（readme什么的都行），然后clone到本地</p></li><li><p>把源文件（除了.git和.deploy_git文件夹）全部copy到私有的repository里</p></li><li><p>把github上发布网站的repository的存放源文件的分支删掉</p></li><li><p>在私有repository里push一下把源文件存到私有库里</p></li></ol><p>这样就完成了，之后所有的操作都在新的这个私有repository里，命令什么的也都一样。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><code>hexo new &quot;[title]&quot;</code>新建文章，名为title（加不加双引号都可以）</p><p><code>hexo g</code>渲染静态页面</p><p><code>hexo s</code>本地预览网站</p><p><code>hexo d</code>将渲染出的静态页面上传至GitHub</p><p><code>git pull</code>从GitHub上拉取仓库文件（本地更新）</p><p><code>git add .</code>将当前目录下的所有文件添加到暂存区</p><p><code>git commit -m &quot;[message]&quot;</code>提交暂存区到本地仓库</p><p><code>git push</code>将本地的分支版本上传到远程并合并</p>]]></content>
    
    
    <categories>
      
      <category>GitHub个人网站搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
